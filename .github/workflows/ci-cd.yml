name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  JAVA_VERSION: '21'

jobs:
  # Frontend Build and Test
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: |
        npm ci
        cd client && npm ci
        
    # - name: Lint frontend
    #   run: |
    #     cd client
    #     npm run lint
        
    - name: Run frontend tests
      run: |
        cd client
        npm run test:ci
        
    - name: Build frontend
      run: |
        cd client
        npm run build
        
    - name: Upload frontend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: client/dist/
        
  # Backend Build and Test
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build backend
      run: |
        cd server
        mvn clean compile
        
    - name: Run backend tests
      run: |
        cd server
        mvn test
        
    - name: Build JAR
      run: |
        cd server
        mvn package -DskipTests
        
    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: server/target/*.jar
        
  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
  # E2E Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        
    - name: Start application
      run: |
        # Start backend
        java -jar server/target/*.jar &
        # Start frontend
        npx serve client/dist/ -p 4200 &
        # Wait for services
        sleep 30
        
    - name: Run E2E tests
      run: |
        cd client
        npm run test:e2e:ci
        
  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [frontend, backend, security, e2e]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        
    - name: Build and push Docker images
      run: |
        docker build -t task-management-frontend:${{ github.sha }} ./client
        docker build -t task-management-backend:${{ github.sha }} ./server
        docker tag task-management-frontend:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/task-management-frontend:staging
        docker tag task-management-backend:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/task-management-backend:staging
        docker push ${{ secrets.DOCKER_REGISTRY }}/task-management-frontend:staging
        docker push ${{ secrets.DOCKER_REGISTRY }}/task-management-backend:staging
        
    - name: Deploy to staging
      run: |
        # Deploy using kubectl or docker-compose
        kubectl set image deployment/task-management-frontend frontend=${{ secrets.DOCKER_REGISTRY }}/task-management-frontend:staging
        kubectl set image deployment/task-management-backend backend=${{ secrets.DOCKER_REGISTRY }}/task-management-backend:staging
        
  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        
    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        
    - name: Build and push Docker images
      run: |
        docker build -t task-management-frontend:${{ github.sha }} ./client
        docker build -t task-management-backend:${{ github.sha }} ./server
        docker tag task-management-frontend:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/task-management-frontend:latest
        docker tag task-management-backend:${{ github.sha }} ${{ secrets.DOCKER_REGISTRY }}/task-management-backend:latest
        docker push ${{ secrets.DOCKER_REGISTRY }}/task-management-frontend:latest
        docker push ${{ secrets.DOCKER_REGISTRY }}/task-management-backend:latest
        
    - name: Deploy to production
      run: |
        # Deploy using kubectl or docker-compose
        kubectl set image deployment/task-management-frontend frontend=${{ secrets.DOCKER_REGISTRY }}/task-management-frontend:latest
        kubectl set image deployment/task-management-backend backend=${{ secrets.DOCKER_REGISTRY }}/task-management-backend:latest
        
    - name: Run post-deployment tests
      run: |
        # Run smoke tests
        curl -f http://production-url/health
        curl -f http://production-url/api/health
