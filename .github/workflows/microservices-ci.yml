name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'microservices/**'
      - '.github/workflows/microservices-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'microservices/**'
      - '.github/workflows/microservices-ci.yml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Определение измененных сервисов
  changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.changes.outputs.services }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            user-service:
              - 'microservices/services/user-service/**'
            task-service:
              - 'microservices/services/task-service/**'
            project-service:
              - 'microservices/services/project-service/**'
            time-service:
              - 'microservices/services/time-service/**'
            analytics-service:
              - 'microservices/services/analytics-service/**'
            notification-service:
              - 'microservices/services/notification-service/**'
            search-service:
              - 'microservices/services/search-service/**'
            file-service:
              - 'microservices/services/file-service/**'
            gateway-service:
              - 'microservices/services/gateway-service/**'
            shared:
              - 'microservices/shared/**'
            infrastructure:
              - 'microservices/infrastructure/**'

  # Сборка и тестирование измененных сервисов
  build-and-test:
    needs: changes
    if: needs.changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJson(needs.changes.outputs.services) }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-m2-
      
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and test ${{ matrix.service }}
        run: |
          cd microservices/services/${{ matrix.service }}
          mvn clean compile test
      
      - name: Run integration tests
        run: |
          cd microservices/services/${{ matrix.service }}
          mvn test -Dtest="*IntegrationTest"
        env:
          SPRING_PROFILES_ACTIVE: test
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: microservices/services/${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
      
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: ${{ matrix.service }} Tests
          path: microservices/services/${{ matrix.service }}/target/surefire-reports/*.xml
          reporter: java-junit
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: microservices/services/${{ matrix.service }}/target/site/jacoco/jacoco.xml
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage

  # Сборка shared компонентов
  build-shared:
    needs: changes
    if: needs.changes.outputs.shared == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      
      - name: Build shared events
        run: |
          cd microservices/shared/events
          mvn clean compile test
      
      - name: Install shared events to local repository
        run: |
          cd microservices/shared/events
          mvn install -DskipTests

  # Развертывание в staging
  deploy-staging:
    needs: [build-and-test, build-shared]
    if: github.ref == 'refs/heads/develop' && needs.changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config use-context staging
      
      - name: Deploy to staging
        run: |
          export KUBECONFIG=kubeconfig
          kubectl config use-context staging
          
          # Применение namespace
          kubectl apply -f microservices/infrastructure/kubernetes/namespace.yaml
          
          # Применение конфигураций
          kubectl apply -f microservices/infrastructure/kubernetes/configmap.yaml
          kubectl apply -f microservices/infrastructure/kubernetes/secrets.yaml
          
          # Развертывание измененных сервисов
          for service in ${{ needs.changes.outputs.services }}; do
            if [ -f "microservices/services/$service/k8s.yaml" ]; then
              kubectl apply -f "microservices/services/$service/k8s.yaml"
            fi
          done
      
      - name: Wait for deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl config use-context staging
          
          for service in ${{ needs.changes.outputs.services }}; do
            kubectl rollout status deployment/$service -n taskboard --timeout=300s
          done
      
      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          kubectl config use-context staging
          
          # Получение URL сервисов
          GATEWAY_URL=$(kubectl get service gateway-service -n taskboard -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Smoke тесты
          curl -f http://$GATEWAY_URL/actuator/health || exit 1

  # Развертывание в production
  deploy-production:
    needs: [build-and-test, build-shared]
    if: github.ref == 'refs/heads/main' && needs.changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'
      
      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          kubectl config use-context production
      
      - name: Deploy to production
        run: |
          export KUBECONFIG=kubeconfig
          kubectl config use-context production
          
          # Применение namespace
          kubectl apply -f microservices/infrastructure/kubernetes/namespace.yaml
          
          # Применение конфигураций
          kubectl apply -f microservices/infrastructure/kubernetes/configmap.yaml
          kubectl apply -f microservices/infrastructure/kubernetes/secrets.yaml
          
          # Развертывание измененных сервисов
          for service in ${{ needs.changes.outputs.services }}; do
            if [ -f "microservices/services/$service/k8s.yaml" ]; then
              kubectl apply -f "microservices/services/$service/k8s.yaml"
            fi
          done
      
      - name: Wait for deployment
        run: |
          export KUBECONFIG=kubeconfig
          kubectl config use-context production
          
          for service in ${{ needs.changes.outputs.services }}; do
            kubectl rollout status deployment/$service -n taskboard --timeout=300s
          done
      
      - name: Run smoke tests
        run: |
          export KUBECONFIG=kubeconfig
          kubectl config use-context production
          
          # Получение URL сервисов
          GATEWAY_URL=$(kubectl get service gateway-service -n taskboard -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          
          # Smoke тесты
          curl -f http://$GATEWAY_URL/actuator/health || exit 1

  # Уведомления
  notify:
    needs: [deploy-staging, deploy-production]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()
