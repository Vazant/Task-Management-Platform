# User Service Application Configuration
# This file contains the main configuration for the User Service microservice

spring:
  application:
    name: user-service
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/user_service_db}
    username: ${DATABASE_USERNAME:user_service_user}
    password: ${DATABASE_PASSWORD:user_service_password}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      idle-timeout: 300000
      max-lifetime: 1200000
      connection-timeout: 20000
      leak-detection-threshold: 60000
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: validate
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        jdbc:
          batch_size: 20
          batch_versioned_data: true
        order_inserts: true
        order_updates: true
        jdbc.batch_size: 20
        connection:
          provider_disables_autocommit: true
  
  # Flyway Configuration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    baseline-version: 0
    validate-on-migrate: true
    clean-disabled: true
  
  # Security Configuration
  security:
    jwt:
      secret: ${JWT_SECRET:your-256-bit-secret-key-here-must-be-at-least-32-characters-long}
      expiration: ${JWT_EXPIRATION:3600}
      refresh-expiration: ${JWT_REFRESH_EXPIRATION:86400}
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 5
      buffer-memory: 33554432
    consumer:
      group-id: user-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      properties:
        spring.json.trusted.packages: "com.taskboard.shared.events"
  
  # Redis Configuration (for caching)
  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    timeout: 2000ms
    lettuce:
      pool:
        max-active: 20
        max-idle: 10
        min-idle: 5
        max-wait: 2000ms

# Server Configuration
server:
  port: ${SERVER_PORT:8081}
  servlet:
    context-path: /api
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  error:
    include-stacktrace: never
    include-message: always

# Management and Monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
    info:
      enabled: true
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms

# Logging Configuration
logging:
  level:
    root: INFO
    com.taskboard.userservice: DEBUG
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId:-},%X{spanId:-}] %logger{36} - %msg%n"
  file:
    name: logs/user-service.log
    max-size: 100MB
    max-history: 30

# Application specific configuration
app:
  user:
    default-role: USER
    password:
      min-length: 8
      require-uppercase: true
      require-lowercase: true
      require-digit: true
      require-special-char: true
    email:
      verification-required: true
      verification-token-expiry: 86400 # 24 hours
    profile:
      max-image-size: 5242880 # 5MB
      allowed-image-types: jpg,jpeg,png,gif
  security:
    cors:
      allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:4200,http://localhost:3000}
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      allow-credentials: true
      max-age: 3600
    rate-limiting:
      enabled: true
      requests-per-minute: 100
      burst-capacity: 200

# OpenAPI/Swagger Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
  packages-to-scan: com.taskboard.userservice.interfaces.rest

# Profile specific configurations
---
spring:
  config:
    activate:
      on-profile: docker
  datasource:
    url: jdbc:postgresql://postgres:5432/user_service_db
    username: user_service_user
    password: user_service_password
  kafka:
    bootstrap-servers: kafka:9092
  redis:
    host: redis

---
spring:
  config:
    activate:
      on-profile: kubernetes
  datasource:
    url: jdbc:postgresql://postgres-service:5432/user_service_db
    username: user_service_user
    password: ${DATABASE_PASSWORD}
  kafka:
    bootstrap-servers: kafka-service:9092
  redis:
    host: redis-service

---
spring:
  config:
    activate:
      on-profile: prod
  jpa:
    show-sql: false
    properties:
      hibernate:
        format_sql: false
  logging:
    level:
      root: WARN
      com.taskboard.userservice: INFO
      org.springframework.security: WARN
      org.hibernate.SQL: WARN
  management:
    endpoints:
      web:
        exposure:
          include: health,info,metrics
