{
    "pipes": [],
    "interfaces": [
        {
            "name": "Activity",
            "id": "interface-Activity-e71fe3c5d27fd8d789af74110f19d65a7e6f04534fde34051f74ff5dc86154207fb73f2e234ebb7f80c5c0ec012b85ab666f78ce8a9cbdcf10bddb14b64658cf",
            "file": "src/app/core/models/activity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  id: string;\r\n  type: 'task_created' | 'task_moved' | 'task_completed' | 'time_logged' | 'comment_added';\r\n  userId: string; // ref: User\r\n  projectId: string; // ref: Project\r\n  taskId?: string; // ref: Task\r\n  data: Record<string, unknown>; // дополнительные данные\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface TimeEntry {\r\n  id: string;\r\n  taskId: string; // ref: Task\r\n  userId: string; // ref: User\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  duration: number; // в минутах\r\n  description?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | >",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"task_created\" | \"task_moved\" | \"task_completed\" | \"time_logged\" | \"comment_added\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ApiError",
            "id": "interface-ApiError-2a811e4f52f5707cc592cb713067b42dd3faa6b58895e1ad4094d6f82cde64e10b551244fe8294eba7dbe82875b35ea8b099b5ec8ee670df6c1376a6120098cf",
            "file": "src/app/core/interceptors/error-handler.interceptor.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpInterceptorFn, HttpRequest, HttpHandlerFn, HttpEvent, HttpErrorResponse } from '@angular/common/http';\r\nimport { Observable, throwError, timer } from 'rxjs';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { inject } from '@angular/core';\r\nimport { NotificationService } from '@services';\r\n\r\nexport interface ApiError {\r\n  message: string;\r\n  status: number;\r\n  statusText: string;\r\n  url: string;\r\n  timestamp: Date;\r\n}\r\n\r\n// Функция-интерцептор для Angular 16+ с современными RxJS операторами\r\nexport const errorHandlerInterceptor: HttpInterceptorFn = (\r\n  req: HttpRequest<unknown>,\r\n  next: HttpHandlerFn\r\n): Observable<HttpEvent<unknown>> => {\r\n  const notificationService = inject(NotificationService);\r\n\r\n  return next(req).pipe(\r\n    // Заменяем retryWhen на retry с delayWhen для экспоненциальной задержки\r\n    retry({\r\n      count: 3,\r\n      delay: (error: HttpErrorResponse, retryCount: number) => {\r\n        // Не повторяем для определенных ошибок\r\n        if (shouldNotRetry(error, retryCount)) {\r\n          return throwError(() => error);\r\n        }\r\n\r\n        // Экспоненциальная задержка: 1s, 2s, 4s, 8s...\r\n        const delayMs = Math.min(1000 * Math.pow(2, retryCount), 10000);\r\n\r\n        console.warn(`Retry attempt ${retryCount + 1} for ${req.url} after ${delayMs}ms`);\r\n\r\n        return timer(delayMs);\r\n      }\r\n    }),\r\n    catchError((error: HttpErrorResponse) => {\r\n      const apiError = createApiError(error, req);\r\n\r\n      // Логируем ошибку для разработчиков\r\n      console.error('API Error:', apiError);\r\n\r\n      // Показываем уведомление только для критичных ошибок (0, 5xx)\r\n      // Для 4xx ошибок уведомления будут показываться в effects\r\n      if (error.status === 0 || (error.status >= 500)) {\r\n        notificationService.error('Ошибка сервера', apiError.message);\r\n      }\r\n\r\n      return throwError(() => apiError);\r\n    })\r\n  );\r\n};\r\n\r\nfunction shouldNotRetry(error: HttpErrorResponse, attemptIndex: number): boolean {\r\n  // Не повторяем для клиентских ошибок (4xx), кроме 408, 429\r\n  if (error.status >= 400 && error.status < 500 && ![408, 429].includes(error.status)) {\r\n    return true;\r\n  }\r\n\r\n  // Не повторяем больше 3 раз\r\n  if (attemptIndex >= 2) {\r\n    return true;\r\n  }\r\n\r\n  // Не повторяем для определенных эндпоинтов\r\n  const noRetryEndpoints = ['/auth/logout', '/profile/avatar'];\r\n  if (noRetryEndpoints.some(endpoint => error.url?.includes(endpoint))) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction createApiError(error: HttpErrorResponse, request: HttpRequest<unknown>): ApiError {\r\n  return {\r\n    message: getUserFriendlyMessage(error),\r\n    status: error.status,\r\n    statusText: error.statusText,\r\n    url: request.url,\r\n    timestamp: new Date()\r\n  };\r\n}\r\n\r\nfunction getUserFriendlyMessage(error: HttpErrorResponse): string {\r\n  const status = error.status;\r\n\r\n  switch (status) {\r\n    case 0:\r\n      return 'Сервер недоступен. Проверьте подключение к интернету.';\r\n    case 400:\r\n      return 'Неверный запрос. Проверьте введенные данные.';\r\n    case 401:\r\n      return 'Необходима авторизация. Войдите в систему.';\r\n    case 403:\r\n      return 'Доступ запрещен. У вас недостаточно прав.';\r\n    case 404:\r\n      return 'Запрашиваемый ресурс не найден.';\r\n    case 408:\r\n      return 'Превышено время ожидания ответа сервера.';\r\n    case 409:\r\n      return 'Конфликт данных. Возможно, запись уже существует.';\r\n    case 413:\r\n      return 'Файл слишком большой. Уменьшите размер файла.';\r\n    case 415:\r\n      return 'Неподдерживаемый тип файла.';\r\n    case 429:\r\n      return 'Слишком много запросов. Попробуйте позже.';\r\n    case 500:\r\n      return 'Внутренняя ошибка сервера. Попробуйте позже.';\r\n    case 502:\r\n      return 'Ошибка шлюза. Сервер временно недоступен.';\r\n    case 503:\r\n      return 'Сервис временно недоступен. Попробуйте позже.';\r\n    case 504:\r\n      return 'Превышено время ожидания шлюза.';\r\n    default:\r\n      return 'Произошла неизвестная ошибка. Попробуйте позже.';\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "statusText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ApiResponse",
            "id": "interface-ApiResponse-42da008ec27f3e31d0232272d8df6bd3f9e89e707476791b5361230ef8c4226518d3b21ec25b9b4e1e879726b6c875c2f468571bfdbae10fe539d40a76f3d5d8",
            "file": "src/app/core/models/api-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ApiResponse<T> {\r\n  data: T;\r\n  message?: string;\r\n  success: boolean;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nimport { User } from './user.model';\r\n\r\nexport interface LoginResponse {\r\n  user: User;\r\n  token: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AppState",
            "id": "interface-AppState-756471300b7da11283f5269206b162d1ac512b3e7df7be3fa41dfda7c045d927327384be782f21b94d4d26658f7347cc728022a11c6813a7ac72ef7e2853ea32",
            "file": "src/app/store/app.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AuthState } from '../features/auth/store/auth.state';\r\nimport { ProjectsState } from '../features/projects/store/projects.state';\r\nimport { TasksState } from '../features/tasks/store/tasks.state';\r\nimport { TimeTrackingState } from '../features/time-tracking/store/time-tracking.state';\r\n\r\nexport interface AppState {\r\n  auth: AuthState;\r\n  projects: ProjectsState;\r\n  tasks: TasksState;\r\n  timeTracking: TimeTrackingState;\r\n}\r\n",
            "properties": [
                {
                    "name": "auth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectsState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "tasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TasksState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "timeTracking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeTrackingState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-6ba8cfd946b728de0761d30f8286cbe55e64da9cc92c911dc161cb966c6ba863ce1ba34f86cedc28ed624e20773c0d345791ec250e8ef1ef7f711cbe5914fd19",
            "file": "src/app/features/auth/store/auth.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { User } from '@models';\r\n\r\nexport interface AuthState {\r\n  user: User | null;\r\n  token: string | null;\r\n  refreshToken: string | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n  isAuthenticated: boolean;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ErrorNotification",
            "id": "interface-ErrorNotification-b27aa1c975cbfe259616b28f1bcfd7760fd02733d38d3b980391a7cefbadad1fa331f9a7bf5897e1ed665260b0ccd759ebd729f353715f2f9e8205626a021a48",
            "file": "src/app/core/services/notification.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  timestamp: Date;\n  action?: {\n    label: string;\n    callback: () => void;\n  };\n}\n\nexport interface ErrorNotification {\n  title: string;\n  message: string;\n  retryAction?: () => void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private readonly snackBar = inject(MatSnackBar);\n  private readonly notificationsSubject = new BehaviorSubject<Notification[]>([]);\n  public notifications$ = this.notificationsSubject.asObservable();\n\n  // Отслеживаем активные уведомления для предотвращения дублирования\n  private readonly activeNotifications = new Set<string>();\n  private readonly lastNotificationTime = new Map<string, number>();\n\n  private generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  private generateNotificationKey(type: string, title: string, message: string): string {\n    return `${type}:${title}:${message}`;\n  }\n\n  private addNotification(notification: Omit<Notification, 'id' | 'timestamp'>): void {\n    const notificationKey = this.generateNotificationKey(notification.type, notification.title, notification.message);\n    const now = Date.now();\n    const lastTime = this.lastNotificationTime.get(notificationKey) ?? 0;\n\n    // Проверяем, не показываем ли мы уже такое уведомление или не показывали его недавно (в течение 3 секунд)\n    if (this.activeNotifications.has(notificationKey) || (now - lastTime) < 3000) {\n      return; // Пропускаем дублирующееся уведомление\n    }\n\n    const newNotification: Notification = {\n      ...notification,\n      id: this.generateId(),\n      timestamp: new Date()\n    };\n\n    // Добавляем ключ в активные уведомления и запоминаем время\n    this.activeNotifications.add(notificationKey);\n    this.lastNotificationTime.set(notificationKey, now);\n\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, newNotification]);\n\n    // Автоматическое удаление уведомления\n    if (notification.duration !== 0) {\n      setTimeout(() => {\n        this.removeNotification(newNotification.id);\n        this.activeNotifications.delete(notificationKey);\n      }, notification.duration ?? 5000);\n    }\n  }\n\n  success(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'success', title, message, duration });\n  }\n\n  error(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'error', title, message, duration });\n  }\n\n  warning(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'warning', title, message, duration });\n  }\n\n  info(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'info', title, message, duration });\n  }\n\n  /**\n   * Показывает ошибку с кнопкой \"Повторить\"\n   */\n  showErrorWithRetry(error: ErrorNotification): void {\n    const config: MatSnackBarConfig = {\n      duration: 0, // Не закрывается автоматически\n      panelClass: ['error-snackbar'],\n      data: {\n        title: error.title,\n        message: error.message,\n        retryAction: error.retryAction\n      }\n    };\n\n    this.snackBar.open(error.message, 'Повторить', config);\n  }\n\n  /**\n   * Упрощенный метод для показа ошибок API\n   */\n  showError(message: string, retryAction?: () => void): void {\n    if (retryAction) {\n      this.showErrorWithRetry({\n        title: 'Ошибка',\n        message,\n        retryAction\n      });\n    } else {\n      this.error('Ошибка', message);\n    }\n  }\n\n  /**\n   * Показывает уведомление через MatSnackBar\n   */\n  private showSnackBar(message: string, type: 'success' | 'error' | 'warning' | 'info', duration?: number): void {\n    const config: MatSnackBarConfig = {\n      duration: duration ?? 5000,\n      panelClass: [`${type}-snackbar`],\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    };\n\n    this.snackBar.open(message, 'Закрыть', config);\n  }\n\n  removeNotification(id: string): void {\n    const currentNotifications = this.notificationsSubject.value;\n    const notificationToRemove = currentNotifications.find(n => n.id === id);\n\n    if (notificationToRemove) {\n      const notificationKey = this.generateNotificationKey(\n        notificationToRemove.type,\n        notificationToRemove.title,\n        notificationToRemove.message\n      );\n      this.activeNotifications.delete(notificationKey);\n      this.lastNotificationTime.delete(notificationKey);\n    }\n\n    const filteredNotifications = currentNotifications.filter(\n      notification => notification.id !== id\n    );\n    this.notificationsSubject.next(filteredNotifications);\n  }\n\n  clearAll(): void {\n    this.notificationsSubject.next([]);\n    this.activeNotifications.clear();\n    this.lastNotificationTime.clear();\n    this.snackBar.dismiss();\n  }\n\n  getNotifications(): Notification[] {\n    return this.notificationsSubject.value;\n  }\n\n  /**\n   * Очищает только уведомления определенного типа\n   */\n  clearByType(type: 'success' | 'error' | 'warning' | 'info'): void {\n    const currentNotifications = this.notificationsSubject.value;\n    const filteredNotifications = currentNotifications.filter(n => n.type !== type);\n\n    // Очищаем активные уведомления этого типа\n    currentNotifications.forEach(notification => {\n      if (notification.type === type) {\n        const notificationKey = this.generateNotificationKey(\n          notification.type,\n          notification.title,\n          notification.message\n        );\n        this.activeNotifications.delete(notificationKey);\n        this.lastNotificationTime.delete(notificationKey);\n      }\n    });\n\n    this.notificationsSubject.next(filteredNotifications);\n  }\n}\n",
            "properties": [
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "retryAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Label",
            "id": "interface-Label-edc3759ecd7a239dec6ffa2eacaebc04b9af38f1723d6b9a84c77487b3a2a2be92f612efff2662f481c2a6c10d5f48bd99b268391cb24846801111f216fe063b",
            "file": "src/app/core/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: 'backlog' | 'in-progress' | 'done';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  projectId: string; // ref: Project\r\n  assigneeId?: string; // ref: User\r\n  creatorId: string; // ref: User\r\n  labels: string[]; // ref: Label[]\r\n  subtasks: Subtask[];\r\n  timeSpent: number; // в минутах\r\n  estimatedTime?: number; // в минутах\r\n  dueDate?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface Subtask {\r\n  id: string;\r\n  title: string;\r\n  completed: boolean;\r\n  taskId: string; // ref: Task\r\n  order: number;\r\n}\r\n\r\nexport interface Label {\r\n  id: string;\r\n  name: string;\r\n  color: string;\r\n  projectId: string; // ref: Project\r\n}\r\n\r\nexport interface TaskFilters {\r\n  status: 'all' | 'backlog' | 'in-progress' | 'done';\r\n  priority: 'all' | 'low' | 'medium' | 'high' | 'urgent';\r\n  assignee: 'all' | string;\r\n  project: 'all' | string;\r\n}\r\n\r\nexport type TaskSortOption = 'created' | 'updated' | 'priority' | 'dueDate' | 'title';\r\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginRequest",
            "id": "interface-LoginRequest-42da008ec27f3e31d0232272d8df6bd3f9e89e707476791b5361230ef8c4226518d3b21ec25b9b4e1e879726b6c875c2f468571bfdbae10fe539d40a76f3d5d8",
            "file": "src/app/core/models/api-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ApiResponse<T> {\r\n  data: T;\r\n  message?: string;\r\n  success: boolean;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nimport { User } from './user.model';\r\n\r\nexport interface LoginResponse {\r\n  user: User;\r\n  token: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginResponse",
            "id": "interface-LoginResponse-42da008ec27f3e31d0232272d8df6bd3f9e89e707476791b5361230ef8c4226518d3b21ec25b9b4e1e879726b6c875c2f468571bfdbae10fe539d40a76f3d5d8",
            "file": "src/app/core/models/api-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ApiResponse<T> {\r\n  data: T;\r\n  message?: string;\r\n  success: boolean;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nimport { User } from './user.model';\r\n\r\nexport interface LoginResponse {\r\n  user: User;\r\n  token: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "token",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Notification",
            "id": "interface-Notification-b27aa1c975cbfe259616b28f1bcfd7760fd02733d38d3b980391a7cefbadad1fa331f9a7bf5897e1ed665260b0ccd759ebd729f353715f2f9e8205626a021a48",
            "file": "src/app/core/services/notification.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  timestamp: Date;\n  action?: {\n    label: string;\n    callback: () => void;\n  };\n}\n\nexport interface ErrorNotification {\n  title: string;\n  message: string;\n  retryAction?: () => void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private readonly snackBar = inject(MatSnackBar);\n  private readonly notificationsSubject = new BehaviorSubject<Notification[]>([]);\n  public notifications$ = this.notificationsSubject.asObservable();\n\n  // Отслеживаем активные уведомления для предотвращения дублирования\n  private readonly activeNotifications = new Set<string>();\n  private readonly lastNotificationTime = new Map<string, number>();\n\n  private generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  private generateNotificationKey(type: string, title: string, message: string): string {\n    return `${type}:${title}:${message}`;\n  }\n\n  private addNotification(notification: Omit<Notification, 'id' | 'timestamp'>): void {\n    const notificationKey = this.generateNotificationKey(notification.type, notification.title, notification.message);\n    const now = Date.now();\n    const lastTime = this.lastNotificationTime.get(notificationKey) ?? 0;\n\n    // Проверяем, не показываем ли мы уже такое уведомление или не показывали его недавно (в течение 3 секунд)\n    if (this.activeNotifications.has(notificationKey) || (now - lastTime) < 3000) {\n      return; // Пропускаем дублирующееся уведомление\n    }\n\n    const newNotification: Notification = {\n      ...notification,\n      id: this.generateId(),\n      timestamp: new Date()\n    };\n\n    // Добавляем ключ в активные уведомления и запоминаем время\n    this.activeNotifications.add(notificationKey);\n    this.lastNotificationTime.set(notificationKey, now);\n\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, newNotification]);\n\n    // Автоматическое удаление уведомления\n    if (notification.duration !== 0) {\n      setTimeout(() => {\n        this.removeNotification(newNotification.id);\n        this.activeNotifications.delete(notificationKey);\n      }, notification.duration ?? 5000);\n    }\n  }\n\n  success(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'success', title, message, duration });\n  }\n\n  error(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'error', title, message, duration });\n  }\n\n  warning(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'warning', title, message, duration });\n  }\n\n  info(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'info', title, message, duration });\n  }\n\n  /**\n   * Показывает ошибку с кнопкой \"Повторить\"\n   */\n  showErrorWithRetry(error: ErrorNotification): void {\n    const config: MatSnackBarConfig = {\n      duration: 0, // Не закрывается автоматически\n      panelClass: ['error-snackbar'],\n      data: {\n        title: error.title,\n        message: error.message,\n        retryAction: error.retryAction\n      }\n    };\n\n    this.snackBar.open(error.message, 'Повторить', config);\n  }\n\n  /**\n   * Упрощенный метод для показа ошибок API\n   */\n  showError(message: string, retryAction?: () => void): void {\n    if (retryAction) {\n      this.showErrorWithRetry({\n        title: 'Ошибка',\n        message,\n        retryAction\n      });\n    } else {\n      this.error('Ошибка', message);\n    }\n  }\n\n  /**\n   * Показывает уведомление через MatSnackBar\n   */\n  private showSnackBar(message: string, type: 'success' | 'error' | 'warning' | 'info', duration?: number): void {\n    const config: MatSnackBarConfig = {\n      duration: duration ?? 5000,\n      panelClass: [`${type}-snackbar`],\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    };\n\n    this.snackBar.open(message, 'Закрыть', config);\n  }\n\n  removeNotification(id: string): void {\n    const currentNotifications = this.notificationsSubject.value;\n    const notificationToRemove = currentNotifications.find(n => n.id === id);\n\n    if (notificationToRemove) {\n      const notificationKey = this.generateNotificationKey(\n        notificationToRemove.type,\n        notificationToRemove.title,\n        notificationToRemove.message\n      );\n      this.activeNotifications.delete(notificationKey);\n      this.lastNotificationTime.delete(notificationKey);\n    }\n\n    const filteredNotifications = currentNotifications.filter(\n      notification => notification.id !== id\n    );\n    this.notificationsSubject.next(filteredNotifications);\n  }\n\n  clearAll(): void {\n    this.notificationsSubject.next([]);\n    this.activeNotifications.clear();\n    this.lastNotificationTime.clear();\n    this.snackBar.dismiss();\n  }\n\n  getNotifications(): Notification[] {\n    return this.notificationsSubject.value;\n  }\n\n  /**\n   * Очищает только уведомления определенного типа\n   */\n  clearByType(type: 'success' | 'error' | 'warning' | 'info'): void {\n    const currentNotifications = this.notificationsSubject.value;\n    const filteredNotifications = currentNotifications.filter(n => n.type !== type);\n\n    // Очищаем активные уведомления этого типа\n    currentNotifications.forEach(notification => {\n      if (notification.type === type) {\n        const notificationKey = this.generateNotificationKey(\n          notification.type,\n          notification.title,\n          notification.message\n        );\n        this.activeNotifications.delete(notificationKey);\n        this.lastNotificationTime.delete(notificationKey);\n      }\n    });\n\n    this.notificationsSubject.next(filteredNotifications);\n  }\n}\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NotificationSettings",
            "id": "interface-NotificationSettings-dce68f5ba038870944771d65510d457c32879043d0f8e524130d096c48714f98e175155cb01d8210a6f9f8fa107959bd8e2ec455109a23b091531117ecfce304",
            "file": "src/app/core/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: string;\r\n  email: string;\r\n  username: string;\r\n  role: 'user' | 'admin';\r\n  avatar?: string;\r\n  createdAt: Date;\r\n  lastLogin: Date;\r\n  preferences: UserPreferences;\r\n}\r\n\r\nexport interface UserPreferences {\r\n  theme: 'light' | 'dark';\r\n  language: string;\r\n  notifications: NotificationSettings;\r\n}\r\n\r\nexport interface NotificationSettings {\r\n  email: boolean;\r\n  push: boolean;\r\n  taskUpdates: boolean;\r\n  projectUpdates: boolean;\r\n} ",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "projectUpdates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "push",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "taskUpdates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PaginatedResponse",
            "id": "interface-PaginatedResponse-42da008ec27f3e31d0232272d8df6bd3f9e89e707476791b5361230ef8c4226518d3b21ec25b9b4e1e879726b6c875c2f468571bfdbae10fe539d40a76f3d5d8",
            "file": "src/app/core/models/api-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ApiResponse<T> {\r\n  data: T;\r\n  message?: string;\r\n  success: boolean;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nimport { User } from './user.model';\r\n\r\nexport interface LoginResponse {\r\n  user: User;\r\n  token: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "ApiResponse"
            ]
        },
        {
            "name": "ProfileFormData",
            "id": "interface-ProfileFormData-3c36243447a8f1546a2bac93811ba1880cd66208a6b42afceda6039b3598ac47ae00fb354c137a82ab7042d92b40d45c4c2472bfb872698a2a18b920c3317527",
            "file": "src/app/features/settings/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserProfile {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n  role?: string;\r\n  lastLogin?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n}\r\n\r\nexport interface UpdateAvatarRequest {\r\n  avatar: File;\r\n}\r\n\r\nexport interface ProfileFormData {\r\n  username: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  avatar?: File;\r\n}\r\n\r\nexport interface ProfileValidationErrors {\r\n  username?: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProfileState",
            "id": "interface-ProfileState-81e9018b970111e5151d3e85159b8830ff4db1ca44a1ae94ba8584be852c2bbfc6a9162969b6a57fbcdd14b3a73787663b38ea151f1533109a70437fb7c2ccfd",
            "file": "src/app/features/settings/services/profile.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject, signal } from '@angular/core';\r\nimport { Observable, catchError, map, of, tap } from 'rxjs';\r\nimport { ApiService, NotificationService } from '@services';\r\nimport { UserProfile, UpdateProfileRequest, UpdateAvatarRequest } from '../models/user-profile.model';\r\n\r\nexport interface ProfileState {\r\n  profile: UserProfile | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  hasError: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n  private readonly apiService = inject(ApiService);\r\n  private readonly notificationService = inject(NotificationService);\r\n\r\n  // Сигналы для состояния\r\n  private readonly _profile = signal<UserProfile | null>(null);\r\n  private readonly _isLoading = signal(false);\r\n  private readonly _error = signal<string | null>(null);\r\n  private readonly _hasError = signal(false);\r\n\r\n  // Публичные readonly сигналы\r\n  readonly profile = this._profile.asReadonly();\r\n  readonly isLoading = this._isLoading.asReadonly();\r\n  readonly error = this._error.asReadonly();\r\n  readonly hasError = this._hasError.asReadonly();\r\n\r\n  constructor() {\r\n    this.loadProfile();\r\n  }\r\n\r\n  /**\r\n   * Загружает профиль пользователя с сервера\r\n   */\r\n  loadProfile(): Observable<UserProfile | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    return this.apiService.get<UserProfile>('/profile').pipe(\r\n      map(response => response.data),\r\n      tap(profile => {\r\n        this._profile.set(profile);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка загрузки профиля:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        // Показываем уведомление с кнопкой retry\r\n        this.notificationService.showError(\r\n          'Ошибка загрузки профиля',\r\n          () => this.loadProfile()\r\n        );\r\n\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Обновляет профиль пользователя\r\n   */\r\n  updateProfile(request: UpdateProfileRequest): Observable<UserProfile | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    return this.apiService.put<UserProfile>('/profile', request).pipe(\r\n      map(response => response.data),\r\n      tap(profile => {\r\n        this._profile.set(profile);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n        this.notificationService.success('Успех', 'Профиль успешно обновлен');\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка обновления профиля:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        this.notificationService.error('Ошибка обновления профиля', errorMessage);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Обновляет аватар пользователя\r\n   */\r\n  updateAvatar(request: UpdateAvatarRequest): Observable<UserProfile | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    // Создаем FormData для отправки файла\r\n    const formData = new FormData();\r\n    formData.append('avatar', request.avatar);\r\n\r\n    return this.apiService.postFile<UserProfile>('/profile/avatar', formData).pipe(\r\n      map(response => response.data),\r\n      tap(profile => {\r\n        this._profile.set(profile);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n        this.notificationService.success('Успех', 'Аватар успешно обновлен');\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка обновления аватара:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        this.notificationService.error('Ошибка обновления аватара', errorMessage);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Удаляет аватар пользователя\r\n   */\r\n  deleteAvatar(): Observable<UserProfile | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    return this.apiService.delete<UserProfile>('/profile/avatar').pipe(\r\n      map(response => response.data),\r\n      tap(profile => {\r\n        this._profile.set(profile);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n        this.notificationService.success('Успех', 'Аватар успешно удален');\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка удаления аватара:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        this.notificationService.error('Ошибка удаления аватара', errorMessage);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Изменяет пароль пользователя\r\n   */\r\n  changePassword(currentPassword: string, newPassword: string): Observable<{ message: string } | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    const request = {\r\n      currentPassword,\r\n      newPassword\r\n    };\r\n\r\n    return this.apiService.post<{ message: string }>('/profile/change-password', request).pipe(\r\n      map(response => response.data),\r\n      tap(() => {\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n        this.notificationService.success('Успех', 'Пароль успешно изменен');\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка смены пароля:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        this.notificationService.error('Ошибка смены пароля', errorMessage);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получает текущий профиль из состояния\r\n   */\r\n  getCurrentProfile(): UserProfile | null {\r\n    return this._profile();\r\n  }\r\n\r\n  /**\r\n   * Очищает ошибку\r\n   */\r\n  clearError(): void {\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n  }\r\n\r\n  /**\r\n   * Сбрасывает состояние загрузки\r\n   */\r\n  resetLoading(): void {\r\n    this._isLoading.set(false);\r\n  }\r\n\r\n  /**\r\n   * Повторная попытка загрузки профиля\r\n   */\r\n  retryLoadProfile(): void {\r\n    this.loadProfile().subscribe();\r\n  }\r\n\r\n  /**\r\n   * Обрабатывает ошибки и возвращает понятное сообщение\r\n   */\r\n  private getErrorMessage(error: unknown): string {\r\n    if (error && typeof error === 'object' && 'error' in error && error.error && typeof error.error === 'object' && 'message' in error.error) {\r\n      return String(error.error.message);\r\n    }\r\n\r\n    if (error && typeof error === 'object' && 'message' in error) {\r\n      return String(error.message);\r\n    }\r\n\r\n    if (error && typeof error === 'object' && 'status' in error) {\r\n      const status = Number(error.status);\r\n      switch (status) {\r\n        case 0:\r\n          return 'Сервер недоступен. Проверьте подключение к интернету.';\r\n        case 400:\r\n          return 'Неверные данные запроса';\r\n        case 401:\r\n          return 'Необходима авторизация';\r\n        case 403:\r\n          return 'Доступ запрещен';\r\n        case 404:\r\n          return 'Профиль не найден';\r\n        case 409:\r\n          return 'Пользователь с таким email уже существует';\r\n        case 413:\r\n          return 'Файл слишком большой';\r\n        case 415:\r\n          return 'Неподдерживаемый тип файла';\r\n        case 500:\r\n          return 'Внутренняя ошибка сервера';\r\n        default:\r\n          return 'Произошла ошибка при выполнении запроса';\r\n      }\r\n    }\r\n\r\n    return 'Произошла неизвестная ошибка';\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserProfile | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProfileValidationErrors",
            "id": "interface-ProfileValidationErrors-3c36243447a8f1546a2bac93811ba1880cd66208a6b42afceda6039b3598ac47ae00fb354c137a82ab7042d92b40d45c4c2472bfb872698a2a18b920c3317527",
            "file": "src/app/features/settings/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserProfile {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n  role?: string;\r\n  lastLogin?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n}\r\n\r\nexport interface UpdateAvatarRequest {\r\n  avatar: File;\r\n}\r\n\r\nexport interface ProfileFormData {\r\n  username: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  avatar?: File;\r\n}\r\n\r\nexport interface ProfileValidationErrors {\r\n  username?: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Project",
            "id": "interface-Project-2bd6f499812024f143066bbecf70c94553015de274dd407d59c0b5252bf493bff9e473ffe92a7cbbdcc10dd35f165d75fb65d1b5e91a81115a14b0cd0bed2367",
            "file": "src/app/core/models/project.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Project {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  status: 'active' | 'archived' | 'completed' | 'on-hold';\r\n  ownerId: string; // ref: User\r\n  members: string[]; // ref: User[]\r\n  settings: ProjectSettings;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface ProjectSettings {\r\n  allowGuestAccess: boolean;\r\n  defaultTaskPriority: 'low' | 'medium' | 'high' | 'urgent';\r\n  autoAssignTasks: boolean;\r\n  requireTimeTracking: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "members",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"active\" | \"archived\" | \"completed\" | \"on-hold\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectAction",
            "id": "interface-ProjectAction-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 70
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"edit\" | \"delete\" | \"archive\" | \"duplicate\" | \"share\" | \"create\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectCard",
            "id": "interface-ProjectCard-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "isHovered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "isSelected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectFilters",
            "id": "interface-ProjectFilters-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "dateRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "ownerId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "searchTerm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectStatus | \"all\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectListConfig",
            "id": "interface-ProjectListConfig-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "debounceTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "enableActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80
                },
                {
                    "name": "enableFilters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "enableInfiniteScroll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "enableSearch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 79
                },
                {
                    "name": "enableSelection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                },
                {
                    "name": "enableSorting",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 78
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectListRequest",
            "id": "interface-ProjectListRequest-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectFilters",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectListResponse",
            "id": "interface-ProjectListResponse-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "hasMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectListState",
            "id": "interface-ProjectListState-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectFilters",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectPagination",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "projects",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Project[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectedProjectIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectPagination",
            "id": "interface-ProjectPagination-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "hasMore",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "page",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "total",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectSettings",
            "id": "interface-ProjectSettings-2bd6f499812024f143066bbecf70c94553015de274dd407d59c0b5252bf493bff9e473ffe92a7cbbdcc10dd35f165d75fb65d1b5e91a81115a14b0cd0bed2367",
            "file": "src/app/core/models/project.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Project {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  status: 'active' | 'archived' | 'completed' | 'on-hold';\r\n  ownerId: string; // ref: User\r\n  members: string[]; // ref: User[]\r\n  settings: ProjectSettings;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface ProjectSettings {\r\n  allowGuestAccess: boolean;\r\n  defaultTaskPriority: 'low' | 'medium' | 'high' | 'urgent';\r\n  autoAssignTasks: boolean;\r\n  requireTimeTracking: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "allowGuestAccess",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "autoAssignTasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "defaultTaskPriority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"low\" | \"medium\" | \"high\" | \"urgent\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "requireTimeTracking",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectSort",
            "id": "interface-ProjectSort-bfce1c0ad56ec5fe3551d3a19745891fc5ccb7a6f879c9b9a20a007eecbc3804e05164d5c2b5241a6ed285a7f0f729c5817274c93f12062e5cfbcc3f60da3e19",
            "file": "src/app/features/projects/models/project-list.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\n// Интерфейс для фильтрации проектов\r\nexport interface ProjectFilters {\r\n  searchTerm: string;\r\n  status: ProjectStatus | 'all';\r\n  ownerId: string | null;\r\n  dateRange: {\r\n    start: Date | null;\r\n    end: Date | null;\r\n  };\r\n}\r\n\r\n// Интерфейс для сортировки проектов\r\nexport interface ProjectSort {\r\n  field: keyof Project;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n// Интерфейс для пагинации\r\nexport interface ProjectPagination {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Интерфейс для состояния списка проектов\r\nexport interface ProjectListState {\r\n  projects: Project[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: ProjectPagination;\r\n  selectedProjectIds: string[];\r\n}\r\n\r\n// Интерфейс для запроса проектов\r\nexport interface ProjectListRequest {\r\n  filters: ProjectFilters;\r\n  sort: ProjectSort;\r\n  pagination: {\r\n    page: number;\r\n    pageSize: number;\r\n  };\r\n}\r\n\r\n// Интерфейс для ответа API\r\nexport interface ProjectListResponse {\r\n  projects: Project[];\r\n  total: number;\r\n  hasMore: boolean;\r\n}\r\n\r\n// Типы статусов проектов\r\nexport type ProjectStatus = 'active' | 'archived' | 'completed' | 'on-hold';\r\n\r\n// Интерфейс для карточки проекта\r\nexport interface ProjectCard {\r\n  project: Project;\r\n  isSelected: boolean;\r\n  isHovered: boolean;\r\n}\r\n\r\n// Интерфейс для действий с проектами\r\nexport interface ProjectAction {\r\n  type: 'edit' | 'delete' | 'archive' | 'duplicate' | 'share' | 'create';\r\n  projectId: string;\r\n  payload?: any;\r\n}\r\n\r\n// Интерфейс для конфигурации компонента\r\nexport interface ProjectListConfig {\r\n  enableSelection: boolean;\r\n  enableInfiniteScroll: boolean;\r\n  enableFilters: boolean;\r\n  enableSorting: boolean;\r\n  enableSearch: boolean;\r\n  enableActions: boolean;\r\n  pageSize: number;\r\n  debounceTime: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "direction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"asc\" | \"desc\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ProjectsState",
            "id": "interface-ProjectsState-f6a1e19abe0c188fc239490cd02171419fde677cfe236ea8322a1352c8e21725bc00d56ed584e2d5a93d253257d6de37d7dcb3eb6b3a176a99dfde3a7a18c5e1",
            "file": "src/app/features/projects/store/projects.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Project } from '@models';\r\n\r\nexport interface ProjectsState {\r\n  entities: { [id: string]: Project };\r\n  ids: string[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  selectedProjectId: string | null;\r\n}\r\n\r\n",
            "properties": [
                {
                    "name": "entities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "selectedProjectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterRequest",
            "id": "interface-RegisterRequest-42da008ec27f3e31d0232272d8df6bd3f9e89e707476791b5361230ef8c4226518d3b21ec25b9b4e1e879726b6c875c2f468571bfdbae10fe539d40a76f3d5d8",
            "file": "src/app/core/models/api-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ApiResponse<T> {\r\n  data: T;\r\n  message?: string;\r\n  success: boolean;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface PaginatedResponse<T> extends ApiResponse<T[]> {\r\n  pagination: {\r\n    page: number;\r\n    limit: number;\r\n    total: number;\r\n    totalPages: number;\r\n  };\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nimport { User } from './user.model';\r\n\r\nexport interface LoginResponse {\r\n  user: User;\r\n  token: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface RegisterRequest {\r\n  email: string;\r\n  username: string;\r\n  password: string;\r\n  confirmPassword: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SettingsTab",
            "id": "interface-SettingsTab-64ec1437d7e492e130ca2b69d70d565255ee7b43b0415d735b1ec141cf01756a6ce713095ad2413704b8497122cef73c0b92f2c328e3d3049e50af076f611fcd",
            "file": "src/app/features/settings/components/settings/settings.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, AfterViewInit, OnDestroy, ViewChild, ElementRef, ChangeDetectorRef, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { LayoutComponent } from '@shared/components/layout';\r\nimport {\r\n  LucideAngularModule,\r\n  User,\r\n  Palette,\r\n  Bell,\r\n  Shield,\r\n  Grid3X3,\r\n  Link,\r\n  Settings,\r\n  ChevronLeft,\r\n  ChevronRight\r\n} from 'lucide-angular';\r\n\r\ninterface SettingsTab {\r\n  label: string;\r\n  route: string;\r\n  icon: typeof User; // Using typeof for Lucide icon type\r\n  description: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-settings',\r\n  templateUrl: './settings.component.html',\r\n  styleUrls: ['./settings.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, MatCardModule, LayoutComponent, LucideAngularModule]\r\n})\r\nexport class SettingsComponent implements AfterViewInit, OnDestroy {\r\n  private readonly router = inject(Router);\r\n  private readonly cdr = inject(ChangeDetectorRef);\r\n\r\n  @ViewChild('navTabs', { static: false }) navTabsRef!: ElementRef<HTMLElement>;\r\n\r\n  // Lucide icons для standalone компонентов\r\n  readonly UserIcon = User;\r\n  readonly PaletteIcon = Palette;\r\n  readonly BellIcon = Bell;\r\n  readonly ShieldIcon = Shield;\r\n  readonly GridIcon = Grid3X3;\r\n  readonly LinkIcon = Link;\r\n  readonly SettingsIcon = Settings;\r\n  readonly ChevronLeft = ChevronLeft;\r\n  readonly ChevronRight = ChevronRight;\r\n\r\n  // Scroll state\r\n  canScrollLeft = false;\r\n  canScrollRight = false;\r\n  isScrolling = false;\r\n\r\n  private scrollHandler!: () => void;\r\n  private resizeHandler!: () => void;\r\n  private scrollTimeout?: number;\r\n\r\n  settingsTabs: SettingsTab[] = [\r\n    { label: 'Профиль', route: 'profile', icon: this.UserIcon, description: 'Личная информация и настройки профиля' },\r\n    { label: 'Внешний вид', route: 'appearance', icon: this.PaletteIcon, description: 'Темы, язык и настройки отображения' },\r\n    { label: 'Уведомления', route: 'notifications', icon: this.BellIcon, description: 'Настройки уведомлений и оповещений' },\r\n    { label: 'Безопасность', route: 'security', icon: this.ShieldIcon, description: 'Пароль, 2FA и безопасность аккаунта' },\r\n    { label: 'Рабочее пространство', route: 'workspace', icon: this.GridIcon, description: 'Настройки интерфейса и рабочего пространства' },\r\n    { label: 'Интеграции', route: 'integrations', icon: this.LinkIcon, description: 'Подключение внешних сервисов и API' },\r\n    { label: 'Дополнительно', route: 'advanced', icon: this.SettingsIcon, description: 'Дополнительные настройки и управление данными' }\r\n  ];\r\n\r\n  // Helpers for template\r\n  getCurrentTab(): SettingsTab {\r\n    const currentRoute = this.router.url.split('/').pop() ?? 'profile';\r\n    return this.settingsTabs.find(tab => tab.route === currentRoute) ?? this.settingsTabs[0];\r\n  }\r\n  getCurrentTabIcon(): typeof User { return this.getCurrentTab().icon; }\r\n  getCurrentTabLabel(): string { return this.getCurrentTab().label; }\r\n  getCurrentTabDescription(): string { return this.getCurrentTab().description; }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.setupScrollHandlers();\r\n    this.updateScrollState();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cleanupScrollHandlers();\r\n  }\r\n\r\n  private setupScrollHandlers(): void {\r\n    this.scrollHandler = () => {\r\n      this.updateScrollState();\r\n      this.isScrolling = true;\r\n\r\n      if (this.scrollTimeout) {\r\n        clearTimeout(this.scrollTimeout);\r\n      }\r\n\r\n      this.scrollTimeout = window.setTimeout(() => {\r\n        this.isScrolling = false;\r\n        this.cdr.detectChanges();\r\n      }, 150);\r\n    };\r\n\r\n    this.resizeHandler = () => {\r\n      this.updateScrollState();\r\n    };\r\n\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (navTabs) {\r\n      navTabs.addEventListener('scroll', this.scrollHandler);\r\n      window.addEventListener('resize', this.resizeHandler);\r\n    }\r\n  }\r\n\r\n  private cleanupScrollHandlers(): void {\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (navTabs) {\r\n      navTabs.removeEventListener('scroll', this.scrollHandler);\r\n      window.removeEventListener('resize', this.resizeHandler);\r\n    }\r\n\r\n    if (this.scrollTimeout) {\r\n      clearTimeout(this.scrollTimeout);\r\n    }\r\n  }\r\n\r\n  private updateScrollState(): void {\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (!navTabs) return;\r\n\r\n    this.canScrollLeft = navTabs.scrollLeft > 0;\r\n    this.canScrollRight = navTabs.scrollLeft < (navTabs.scrollWidth - navTabs.clientWidth);\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  scrollLeft(): void {\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (navTabs) {\r\n      navTabs.scrollBy({ left: -200, behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  scrollRight(): void {\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (navTabs) {\r\n      navTabs.scrollBy({ left: 200, behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  trackByRoute(index: number, tab: SettingsTab): string {\r\n    return tab.route;\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "route",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Subtask",
            "id": "interface-Subtask-edc3759ecd7a239dec6ffa2eacaebc04b9af38f1723d6b9a84c77487b3a2a2be92f612efff2662f481c2a6c10d5f48bd99b268391cb24846801111f216fe063b",
            "file": "src/app/core/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: 'backlog' | 'in-progress' | 'done';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  projectId: string; // ref: Project\r\n  assigneeId?: string; // ref: User\r\n  creatorId: string; // ref: User\r\n  labels: string[]; // ref: Label[]\r\n  subtasks: Subtask[];\r\n  timeSpent: number; // в минутах\r\n  estimatedTime?: number; // в минутах\r\n  dueDate?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface Subtask {\r\n  id: string;\r\n  title: string;\r\n  completed: boolean;\r\n  taskId: string; // ref: Task\r\n  order: number;\r\n}\r\n\r\nexport interface Label {\r\n  id: string;\r\n  name: string;\r\n  color: string;\r\n  projectId: string; // ref: Project\r\n}\r\n\r\nexport interface TaskFilters {\r\n  status: 'all' | 'backlog' | 'in-progress' | 'done';\r\n  priority: 'all' | 'low' | 'medium' | 'high' | 'urgent';\r\n  assignee: 'all' | string;\r\n  project: 'all' | string;\r\n}\r\n\r\nexport type TaskSortOption = 'created' | 'updated' | 'priority' | 'dueDate' | 'title';\r\n",
            "properties": [
                {
                    "name": "completed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "order",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Task",
            "id": "interface-Task-edc3759ecd7a239dec6ffa2eacaebc04b9af38f1723d6b9a84c77487b3a2a2be92f612efff2662f481c2a6c10d5f48bd99b268391cb24846801111f216fe063b",
            "file": "src/app/core/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: 'backlog' | 'in-progress' | 'done';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  projectId: string; // ref: Project\r\n  assigneeId?: string; // ref: User\r\n  creatorId: string; // ref: User\r\n  labels: string[]; // ref: Label[]\r\n  subtasks: Subtask[];\r\n  timeSpent: number; // в минутах\r\n  estimatedTime?: number; // в минутах\r\n  dueDate?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface Subtask {\r\n  id: string;\r\n  title: string;\r\n  completed: boolean;\r\n  taskId: string; // ref: Task\r\n  order: number;\r\n}\r\n\r\nexport interface Label {\r\n  id: string;\r\n  name: string;\r\n  color: string;\r\n  projectId: string; // ref: Project\r\n}\r\n\r\nexport interface TaskFilters {\r\n  status: 'all' | 'backlog' | 'in-progress' | 'done';\r\n  priority: 'all' | 'low' | 'medium' | 'high' | 'urgent';\r\n  assignee: 'all' | string;\r\n  project: 'all' | string;\r\n}\r\n\r\nexport type TaskSortOption = 'created' | 'updated' | 'priority' | 'dueDate' | 'title';\r\n",
            "properties": [
                {
                    "name": "assigneeId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "creatorId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "dueDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "estimatedTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"low\" | \"medium\" | \"high\" | \"urgent\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "projectId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"backlog\" | \"in-progress\" | \"done\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "subtasks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subtask[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "timeSpent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TaskFilters",
            "id": "interface-TaskFilters-edc3759ecd7a239dec6ffa2eacaebc04b9af38f1723d6b9a84c77487b3a2a2be92f612efff2662f481c2a6c10d5f48bd99b268391cb24846801111f216fe063b",
            "file": "src/app/core/models/task.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Task {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  status: 'backlog' | 'in-progress' | 'done';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  projectId: string; // ref: Project\r\n  assigneeId?: string; // ref: User\r\n  creatorId: string; // ref: User\r\n  labels: string[]; // ref: Label[]\r\n  subtasks: Subtask[];\r\n  timeSpent: number; // в минутах\r\n  estimatedTime?: number; // в минутах\r\n  dueDate?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface Subtask {\r\n  id: string;\r\n  title: string;\r\n  completed: boolean;\r\n  taskId: string; // ref: Task\r\n  order: number;\r\n}\r\n\r\nexport interface Label {\r\n  id: string;\r\n  name: string;\r\n  color: string;\r\n  projectId: string; // ref: Project\r\n}\r\n\r\nexport interface TaskFilters {\r\n  status: 'all' | 'backlog' | 'in-progress' | 'done';\r\n  priority: 'all' | 'low' | 'medium' | 'high' | 'urgent';\r\n  assignee: 'all' | string;\r\n  project: 'all' | string;\r\n}\r\n\r\nexport type TaskSortOption = 'created' | 'updated' | 'priority' | 'dueDate' | 'title';\r\n",
            "properties": [
                {
                    "name": "assignee",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"all\" | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "priority",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"all\" | \"low\" | \"medium\" | \"high\" | \"urgent\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"all\" | string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "status",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"all\" | \"backlog\" | \"in-progress\" | \"done\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TasksState",
            "id": "interface-TasksState-c31da7d9123dbcee9f16cd53526e24d1abbec755b864d3c9a5422491efd972d13749797be3b129e68e42eee926c614fe312b69660033450d5c5cae43c4d77b00",
            "file": "src/app/features/tasks/store/tasks.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Task, TaskFilters, TaskSortOption } from '@models';\r\n\r\nexport interface TasksState {\r\n  entities: { [id: string]: Task };\r\n  ids: string[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  filters: TaskFilters;\r\n  sortBy: TaskSortOption;\r\n}\r\n\r\n\r\n",
            "properties": [
                {
                    "name": "entities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "filters",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskFilters",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskSortOption",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TimeEntry",
            "id": "interface-TimeEntry-e71fe3c5d27fd8d789af74110f19d65a7e6f04534fde34051f74ff5dc86154207fb73f2e234ebb7f80c5c0ec012b85ab666f78ce8a9cbdcf10bddb14b64658cf",
            "file": "src/app/core/models/activity.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Activity {\r\n  id: string;\r\n  type: 'task_created' | 'task_moved' | 'task_completed' | 'time_logged' | 'comment_added';\r\n  userId: string; // ref: User\r\n  projectId: string; // ref: Project\r\n  taskId?: string; // ref: Task\r\n  data: Record<string, unknown>; // дополнительные данные\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface TimeEntry {\r\n  id: string;\r\n  taskId: string; // ref: Task\r\n  userId: string; // ref: User\r\n  startTime: Date;\r\n  endTime?: Date;\r\n  duration: number; // в минутах\r\n  description?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "duration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "endTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "taskId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "userId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TimeTrackingState",
            "id": "interface-TimeTrackingState-a8523748d1612a7eb158141431317cd03fc4ec5320cf3e75301cd0523c622c5684f692b9f73bae96b549b41828a624a8c18f9afa4ac0078b3e34c2e8f1088d47",
            "file": "src/app/features/time-tracking/store/time-tracking.state.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TimeEntry } from '@models';\r\n\r\nexport interface TimeTrackingState {\r\n  entities: { [id: string]: TimeEntry };\r\n  ids: string[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  activeTimer: {\r\n    taskId: string;\r\n    startTime: Date;\r\n  } | null;\r\n}\r\n\r\nexport const initialState: TimeTrackingState = {\r\n  entities: {},\r\n  ids: [],\r\n  loading: false,\r\n  error: null,\r\n  activeTimer: null\r\n};\r\n",
            "properties": [
                {
                    "name": "activeTimer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "entities",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "ids",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateAvatarRequest",
            "id": "interface-UpdateAvatarRequest-3c36243447a8f1546a2bac93811ba1880cd66208a6b42afceda6039b3598ac47ae00fb354c137a82ab7042d92b40d45c4c2472bfb872698a2a18b920c3317527",
            "file": "src/app/features/settings/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserProfile {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n  role?: string;\r\n  lastLogin?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n}\r\n\r\nexport interface UpdateAvatarRequest {\r\n  avatar: File;\r\n}\r\n\r\nexport interface ProfileFormData {\r\n  username: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  avatar?: File;\r\n}\r\n\r\nexport interface ProfileValidationErrors {\r\n  username?: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UpdateProfileRequest",
            "id": "interface-UpdateProfileRequest-3c36243447a8f1546a2bac93811ba1880cd66208a6b42afceda6039b3598ac47ae00fb354c137a82ab7042d92b40d45c4c2472bfb872698a2a18b920c3317527",
            "file": "src/app/features/settings/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserProfile {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n  role?: string;\r\n  lastLogin?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n}\r\n\r\nexport interface UpdateAvatarRequest {\r\n  avatar: File;\r\n}\r\n\r\nexport interface ProfileFormData {\r\n  username: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  avatar?: File;\r\n}\r\n\r\nexport interface ProfileValidationErrors {\r\n  username?: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-dce68f5ba038870944771d65510d457c32879043d0f8e524130d096c48714f98e175155cb01d8210a6f9f8fa107959bd8e2ec455109a23b091531117ecfce304-1",
            "file": "src/app/core/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: string;\r\n  email: string;\r\n  username: string;\r\n  role: 'user' | 'admin';\r\n  avatar?: string;\r\n  createdAt: Date;\r\n  lastLogin: Date;\r\n  preferences: UserPreferences;\r\n}\r\n\r\nexport interface UserPreferences {\r\n  theme: 'light' | 'dark';\r\n  language: string;\r\n  notifications: NotificationSettings;\r\n}\r\n\r\nexport interface NotificationSettings {\r\n  email: boolean;\r\n  push: boolean;\r\n  taskUpdates: boolean;\r\n  projectUpdates: boolean;\r\n} ",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "preferences",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "UserPreferences",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"user\" | \"admin\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        },
        {
            "name": "UserPreferences",
            "id": "interface-UserPreferences-dce68f5ba038870944771d65510d457c32879043d0f8e524130d096c48714f98e175155cb01d8210a6f9f8fa107959bd8e2ec455109a23b091531117ecfce304",
            "file": "src/app/core/models/user.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  id: string;\r\n  email: string;\r\n  username: string;\r\n  role: 'user' | 'admin';\r\n  avatar?: string;\r\n  createdAt: Date;\r\n  lastLogin: Date;\r\n  preferences: UserPreferences;\r\n}\r\n\r\nexport interface UserPreferences {\r\n  theme: 'light' | 'dark';\r\n  language: string;\r\n  notifications: NotificationSettings;\r\n}\r\n\r\nexport interface NotificationSettings {\r\n  email: boolean;\r\n  push: boolean;\r\n  taskUpdates: boolean;\r\n  projectUpdates: boolean;\r\n} ",
            "properties": [
                {
                    "name": "language",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "notifications",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NotificationSettings",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "UserProfile",
            "id": "interface-UserProfile-3c36243447a8f1546a2bac93811ba1880cd66208a6b42afceda6039b3598ac47ae00fb354c137a82ab7042d92b40d45c4c2472bfb872698a2a18b920c3317527",
            "file": "src/app/features/settings/models/user-profile.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface UserProfile {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n  role?: string;\r\n  lastLogin?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\nexport interface UpdateProfileRequest {\r\n  username: string;\r\n  email: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n}\r\n\r\nexport interface UpdateAvatarRequest {\r\n  avatar: File;\r\n}\r\n\r\nexport interface ProfileFormData {\r\n  username: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  avatar?: File;\r\n}\r\n\r\nexport interface ProfileValidationErrors {\r\n  username?: string;\r\n  email?: string;\r\n  firstName?: string;\r\n  lastName?: string;\r\n  avatar?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "lastLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "updatedAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "ApiService",
            "id": "injectable-ApiService-612009fb6a8302669ccd6eaf2fcdd4c542b4dc9372378a0bf2baba68a6abee7c62517ae82aa527a3d4f233e50c10dc44e2800f63507fb02217c3615c08ddb86b",
            "file": "src/app/core/services/api.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'http://localhost:3000/api'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "params",
                            "type": "Record<string | string | number | boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "Record<string | string | number | boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFileHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPaginated",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1"
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10"
                        },
                        {
                            "name": "params",
                            "type": "Record<string | string | number | boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<PaginatedResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "page",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "limit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "10",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "params",
                            "type": "Record<string | string | number | boolean>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "postFile",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "put",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ApiResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { ApiResponse, PaginatedResponse } from '@models';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  private readonly baseUrl = 'http://localhost:3000/api'; // Замените на ваш API URL\n  private readonly http = inject(HttpClient);\n\n  private getHeaders(): HttpHeaders {\n    return new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n  }\n\n  private getFileHeaders(): HttpHeaders {\n    return new HttpHeaders({\n      // 'Content-Type': 'multipart/form-data' // This header is often handled by the browser\n    });\n  }\n\n  get<T>(endpoint: string, params?: Record<string, string | number | boolean>): Observable<ApiResponse<T>> {\n    let httpParams = new HttpParams();\n    if (params) {\n      Object.keys(params).forEach((key: string) => {\n        httpParams = httpParams.set(key, params[key]);\n      });\n    }\n\n    return this.http.get<ApiResponse<T>>(`${this.baseUrl}${endpoint}`, {\n      headers: this.getHeaders(),\n      params: httpParams\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  getPaginated<T>(endpoint: string, page = 1, limit = 10, params?: Record<string, string | number | boolean>): Observable<PaginatedResponse<T>> {\n    let httpParams = new HttpParams()\n      .set('page', page.toString())\n      .set('limit', limit.toString());\n\n    if (params) {\n      Object.keys(params).forEach((key: string) => {\n        httpParams = httpParams.set(key, params[key]);\n      });\n    }\n\n    return this.http.get<PaginatedResponse<T>>(`${this.baseUrl}${endpoint}`, {\n      headers: this.getHeaders(),\n      params: httpParams\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  post<T>(endpoint: string, data: unknown): Observable<ApiResponse<T>> {\n    return this.http.post<ApiResponse<T>>(`${this.baseUrl}${endpoint}`, data, {\n      headers: this.getHeaders()\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  postFile<T>(endpoint: string, formData: FormData): Observable<ApiResponse<T>> {\n    return this.http.post<ApiResponse<T>>(`${this.baseUrl}${endpoint}`, formData, {\n      headers: this.getFileHeaders()\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  put<T>(endpoint: string, data: unknown): Observable<ApiResponse<T>> {\n    return this.http.put<ApiResponse<T>>(`${this.baseUrl}${endpoint}`, data, {\n      headers: this.getHeaders()\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  patch<T>(endpoint: string, data: unknown): Observable<ApiResponse<T>> {\n    return this.http.patch<ApiResponse<T>>(`${this.baseUrl}${endpoint}`, data, {\n      headers: this.getHeaders()\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  delete<T>(endpoint: string): Observable<ApiResponse<T>> {\n    return this.http.delete<ApiResponse<T>>(`${this.baseUrl}${endpoint}`, {\n      headers: this.getHeaders()\n    }).pipe(\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(error: unknown): Observable<never> {\n    console.error('API Error:', error);\n\n    let errorMessage = 'Произошла ошибка при выполнении запроса';\n\n        // Type guard для проверки типа ошибки\n    if (error && typeof error === 'object') {\n      const errorObj = error as Record<string, unknown>;\n\n      if (errorObj['error'] && typeof errorObj['error'] === 'object') {\n        const errorData = errorObj['error'] as Record<string, unknown>;\n        if (typeof errorData['message'] === 'string') {\n          errorMessage = errorData['message'];\n        }\n      } else if (typeof errorObj['message'] === 'string') {\n        errorMessage = errorObj['message'];\n      } else if (typeof errorObj['status'] === 'number') {\n        const status = errorObj['status'];\n        if (status === 0) {\n          errorMessage = 'Нет соединения с сервером';\n        } else if (status === 401) {\n          errorMessage = 'Необходима авторизация';\n        } else if (status === 403) {\n          errorMessage = 'Доступ запрещен';\n        } else if (status === 404) {\n          errorMessage = 'Ресурс не найден';\n        } else if (status === 500) {\n          errorMessage = 'Внутренняя ошибка сервера';\n        }\n      }\n    }\n\n    return throwError(() => ({ message: errorMessage }));\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-87aef141b95ff662b78543dab9b9634e2230d5d11e5aa0b613a742b31043fa199da08d2a3324ecd5dc25c8171bf36198066a62c6921f113021735e29208bc864",
            "file": "src/app/features/auth/store/auth.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "forgotPassword$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.forgotPassword),\n      switchMap(({ email }) =>\n        this.authService.forgotPassword(email).pipe(\n          map(() => AuthActions.forgotPasswordSuccess({\n            message: 'Инструкции отправлены на email'\n          })),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка восстановления пароля';\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', errorMessage);\n            }\n            return of(AuthActions.forgotPasswordFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "forgotPasswordSuccess$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.forgotPasswordSuccess),\n      tap(({ message }) => {\n        this.notificationService.success('Успех', message);\n      })\n    );\n  }, { dispatch: false })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 174
                },
                {
                    "name": "login$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.login),\n      switchMap(({ credentials }) =>\n        this.authService.login(credentials).pipe(\n          map((response) => {\n            this.authService.setUser(\n              response.user,\n              response.token,\n              response.refreshToken\n            );\n            this.notificationService.success('Успех', 'Вы успешно вошли в систему');\n            return AuthActions.loginSuccess({\n              user: response.user,\n              token: response.token,\n              refreshToken: response.refreshToken\n            });\n          }),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка входа в систему';\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', errorMessage);\n            }\n            return of(AuthActions.loginFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loginSuccess$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.loginSuccess),\n      tap(() => {\n        this.router.navigate(['/dashboard']);\n      })\n    );\n  }, { dispatch: false })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 156
                },
                {
                    "name": "logout$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.logout),\n      tap(() => {\n        this.authService.logout();\n        this.router.navigate(['/auth/login']);\n      }),\n      map(() => AuthActions.logoutSuccess())\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82
                },
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "refreshToken$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.refreshToken),\n      switchMap(() =>\n        this.authService.refreshToken().pipe(\n          map(({ token, refreshToken }) => {\n            localStorage.setItem('token', token);\n            localStorage.setItem('refreshToken', refreshToken);\n            return AuthActions.refreshTokenSuccess({ token, refreshToken });\n          }),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка обновления токена';\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', errorMessage);\n            }\n            return of(AuthActions.refreshTokenFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "register$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.register),\n      switchMap(({ userData }) =>\n        this.authService.register(userData).pipe(\n          map((response) => {\n            this.authService.setUser(\n              response.user,\n              response.token,\n              response.refreshToken\n            );\n            this.notificationService.success('Успех', 'Регистрация прошла успешно');\n            return AuthActions.registerSuccess({\n              user: response.user,\n              token: response.token,\n              refreshToken: response.refreshToken\n            });\n          }),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка регистрации';\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', errorMessage);\n            }\n            return of(AuthActions.registerFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "registerSuccess$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.registerSuccess),\n      tap(() => {\n        this.router.navigate(['/dashboard']);\n      })\n    );\n  }, { dispatch: false })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 165
                },
                {
                    "name": "resetPassword$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.resetPassword),\n      switchMap(({ token, password }) =>\n        this.authService.resetPassword(token, password).pipe(\n          map(() => AuthActions.resetPasswordSuccess({\n            message: 'Пароль успешно изменен'\n          })),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка сброса пароля';\n            this.notificationService.error('Ошибка', errorMessage);\n            return of(AuthActions.resetPasswordFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "resetPasswordSuccess$",
                    "defaultValue": "createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.resetPasswordSuccess),\n      tap(({ message }) => {\n        this.notificationService.success('Успех', message);\n        this.router.navigate(['/auth/login']);\n      })\n    );\n  }, { dispatch: false })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 183
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, switchMap, catchError, tap } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\nimport * as AuthActions from './auth.actions';\nimport { AuthService, NotificationService } from '@services';\n\n\n\n\n@Injectable()\nexport class AuthEffects {\n  private readonly actions$ = inject(Actions);\n  private readonly authService = inject(AuthService);\n  private readonly notificationService = inject(NotificationService);\n  private readonly router = inject(Router);\n\n  login$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.login),\n      switchMap(({ credentials }) =>\n        this.authService.login(credentials).pipe(\n          map((response) => {\n            this.authService.setUser(\n              response.user,\n              response.token,\n              response.refreshToken\n            );\n            this.notificationService.success('Успех', 'Вы успешно вошли в систему');\n            return AuthActions.loginSuccess({\n              user: response.user,\n              token: response.token,\n              refreshToken: response.refreshToken\n            });\n          }),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка входа в систему';\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', errorMessage);\n            }\n            return of(AuthActions.loginFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  });\n\n  register$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.register),\n      switchMap(({ userData }) =>\n        this.authService.register(userData).pipe(\n          map((response) => {\n            this.authService.setUser(\n              response.user,\n              response.token,\n              response.refreshToken\n            );\n            this.notificationService.success('Успех', 'Регистрация прошла успешно');\n            return AuthActions.registerSuccess({\n              user: response.user,\n              token: response.token,\n              refreshToken: response.refreshToken\n            });\n          }),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка регистрации';\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', errorMessage);\n            }\n            return of(AuthActions.registerFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  });\n\n  logout$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.logout),\n      tap(() => {\n        this.authService.logout();\n        this.router.navigate(['/auth/login']);\n      }),\n      map(() => AuthActions.logoutSuccess())\n    );\n  });\n\n  refreshToken$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.refreshToken),\n      switchMap(() =>\n        this.authService.refreshToken().pipe(\n          map(({ token, refreshToken }) => {\n            localStorage.setItem('token', token);\n            localStorage.setItem('refreshToken', refreshToken);\n            return AuthActions.refreshTokenSuccess({ token, refreshToken });\n          }),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка обновления токена';\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', errorMessage);\n            }\n            return of(AuthActions.refreshTokenFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  });\n\n  forgotPassword$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.forgotPassword),\n      switchMap(({ email }) =>\n        this.authService.forgotPassword(email).pipe(\n          map(() => AuthActions.forgotPasswordSuccess({\n            message: 'Инструкции отправлены на email'\n          })),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка восстановления пароля';\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', errorMessage);\n            }\n            return of(AuthActions.forgotPasswordFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  });\n\n  resetPassword$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.resetPassword),\n      switchMap(({ token, password }) =>\n        this.authService.resetPassword(token, password).pipe(\n          map(() => AuthActions.resetPasswordSuccess({\n            message: 'Пароль успешно изменен'\n          })),\n          catchError((error) => {\n            const errorMessage = error.message ?? 'Ошибка сброса пароля';\n            this.notificationService.error('Ошибка', errorMessage);\n            return of(AuthActions.resetPasswordFailure({ error: errorMessage }));\n          })\n        )\n      )\n    );\n  });\n\n  // Navigation effects\n  loginSuccess$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.loginSuccess),\n      tap(() => {\n        this.router.navigate(['/dashboard']);\n      })\n    );\n  }, { dispatch: false });\n\n  registerSuccess$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.registerSuccess),\n      tap(() => {\n        this.router.navigate(['/dashboard']);\n      })\n    );\n  }, { dispatch: false });\n\n  forgotPasswordSuccess$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.forgotPasswordSuccess),\n      tap(({ message }) => {\n        this.notificationService.success('Успех', message);\n      })\n    );\n  }, { dispatch: false });\n\n  resetPasswordSuccess$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(AuthActions.resetPasswordSuccess),\n      tap(({ message }) => {\n        this.notificationService.success('Успех', message);\n        this.router.navigate(['/auth/login']);\n      })\n    );\n  }, { dispatch: false });\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-ad1cba962d179e71c6d5eecf63d011a66a6b624a0ccaf837f18b1e94cfdf54f92fb0a9d15d6e4b73aad45700ad98beba61ea28ee20843c466ae8a42e83ae1973",
            "file": "src/app/core/services/auth.service.ts",
            "properties": [
                {
                    "name": "apiService",
                    "defaultValue": "inject(ApiService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentUser$",
                    "defaultValue": "this.currentUserSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "currentUserSubject",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "isAuthenticated$",
                    "defaultValue": "this.isAuthenticatedSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "isAuthenticatedSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "checkTokenValidity",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "forgotPassword",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "User | null",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAdmin",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticated",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadUserFromStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "credentials",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LoginResponse>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "credentials",
                            "type": "LoginRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "userData",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<LoginResponse>",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "userData",
                            "type": "RegisterRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "resetPassword",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setUser",
                    "args": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { BehaviorSubject, Observable, map, tap } from 'rxjs';\nimport { ApiService } from '@services';\nimport { User, LoginRequest, LoginResponse, RegisterRequest } from '@models';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly currentUserSubject = new BehaviorSubject<User | null>(null);\n  public readonly currentUser$ = this.currentUserSubject.asObservable();\n  private readonly isAuthenticatedSubject = new BehaviorSubject<boolean>(false);\n  public readonly isAuthenticated$ = this.isAuthenticatedSubject.asObservable();\n  private readonly apiService = inject(ApiService);\n\n  constructor() {\n    this.loadUserFromStorage();\n  }\n\n  private loadUserFromStorage(): void {\n    const userStr = localStorage.getItem('user');\n    const token = localStorage.getItem('token');\n\n    if (userStr && token) {\n      try {\n        const user = JSON.parse(userStr);\n        this.currentUserSubject.next(user);\n        this.isAuthenticatedSubject.next(true);\n      } catch (error) {\n        console.error('Error parsing user from storage:', error);\n        this.logout();\n      }\n    } else {\n      this.isAuthenticatedSubject.next(false);\n    }\n  }\n\n  login(credentials: LoginRequest): Observable<LoginResponse> {\n    return this.apiService.post<LoginResponse>('/auth/login', credentials).pipe(\n      map(response => response.data),\n      tap(response => {\n        this.setUser(response.user, response.token, response.refreshToken);\n      })\n    );\n  }\n\n  register(userData: RegisterRequest): Observable<LoginResponse> {\n    return this.apiService.post<LoginResponse>('/auth/register', userData).pipe(\n      map(response => response.data),\n      tap(response => {\n        this.setUser(response.user, response.token, response.refreshToken);\n      })\n    );\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n    localStorage.removeItem('refreshToken');\n    localStorage.removeItem('user');\n    this.currentUserSubject.next(null);\n    this.isAuthenticatedSubject.next(false);\n  }\n\n  setUser(user: User, token: string, refreshToken?: string): void {\n    localStorage.setItem('user', JSON.stringify(user));\n    localStorage.setItem('token', token);\n    if (refreshToken) {\n      localStorage.setItem('refreshToken', refreshToken);\n    }\n    this.currentUserSubject.next(user);\n    this.isAuthenticatedSubject.next(true);\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  isAuthenticated(): boolean {\n    return this.isAuthenticatedSubject.value;\n  }\n\n  isAdmin(): boolean {\n    const user = this.getCurrentUser();\n    return user?.role === 'admin';\n  }\n\n  refreshToken(): Observable<{ token: string; refreshToken: string }> {\n    const refreshToken = localStorage.getItem('refreshToken');\n    return this.apiService.post<{ token: string; refreshToken: string }>(\n      '/auth/refresh',\n      { refreshToken }\n    ).pipe(\n      map(response => response.data),\n      tap(response => {\n        localStorage.setItem('token', response.token);\n        if (response.refreshToken) {\n          localStorage.setItem('refreshToken', response.refreshToken);\n        }\n      })\n    );\n  }\n\n  forgotPassword(email: string): Observable<{ message: string }> {\n    return this.apiService.post<{ message: string }>('/auth/forgot-password', { email }).pipe(\n      map(response => response.data)\n    );\n  }\n\n  resetPassword(token: string, password: string): Observable<{ message: string }> {\n    return this.apiService.post<{ message: string }>('/auth/reset-password', { token, password }).pipe(\n      map(response => response.data)\n    );\n  }\n\n  // Метод для проверки валидности токена\n  checkTokenValidity(): boolean {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n\n    try {\n      // Простая проверка JWT токена (можно расширить)\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n\n      if (payload.exp < currentTime) {\n        this.logout();\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error('Error checking token validity:', error);\n      this.logout();\n      return false;\n    }\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-b27aa1c975cbfe259616b28f1bcfd7760fd02733d38d3b980391a7cefbadad1fa331f9a7bf5897e1ed665260b0ccd759ebd729f353715f2f9e8205626a021a48",
            "file": "src/app/core/services/notification.service.ts",
            "properties": [
                {
                    "name": "activeNotifications",
                    "defaultValue": "new Set<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "lastNotificationTime",
                    "defaultValue": "new Map<string, number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "notifications$",
                    "defaultValue": "this.notificationsSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "notificationsSubject",
                    "defaultValue": "new BehaviorSubject<Notification[]>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "snackBar",
                    "defaultValue": "inject(MatSnackBar)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNotification",
                    "args": [
                        {
                            "name": "notification",
                            "type": "Omit<Notification | \"id\" | \"timestamp\">",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "notification",
                            "type": "Omit<Notification | \"id\" | \"timestamp\">",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "clearByType",
                    "args": [
                        {
                            "name": "type",
                            "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 172,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОчищает только уведомления определенного типа\n",
                    "description": "<p>Очищает только уведомления определенного типа</p>\n",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "error",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateId",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "generateNotificationKey",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getNotifications",
                    "args": [],
                    "optional": false,
                    "returnType": "Notification[]",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "info",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeNotification",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "retryAction",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nУпрощенный метод для показа ошибок API\n",
                    "description": "<p>Упрощенный метод для показа ошибок API</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "retryAction",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showErrorWithRetry",
                    "args": [
                        {
                            "name": "error",
                            "type": "ErrorNotification",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПоказывает ошибку с кнопкой \"Повторить\"\n",
                    "description": "<p>Показывает ошибку с кнопкой &quot;Повторить&quot;</p>\n",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "ErrorNotification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSnackBar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПоказывает уведомление через MatSnackBar\n",
                    "description": "<p>Показывает уведомление через MatSnackBar</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "\"success\" | \"error\" | \"warning\" | \"info\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "success",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "warning",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "duration",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  timestamp: Date;\n  action?: {\n    label: string;\n    callback: () => void;\n  };\n}\n\nexport interface ErrorNotification {\n  title: string;\n  message: string;\n  retryAction?: () => void;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private readonly snackBar = inject(MatSnackBar);\n  private readonly notificationsSubject = new BehaviorSubject<Notification[]>([]);\n  public notifications$ = this.notificationsSubject.asObservable();\n\n  // Отслеживаем активные уведомления для предотвращения дублирования\n  private readonly activeNotifications = new Set<string>();\n  private readonly lastNotificationTime = new Map<string, number>();\n\n  private generateId(): string {\n    return Date.now().toString(36) + Math.random().toString(36).substr(2);\n  }\n\n  private generateNotificationKey(type: string, title: string, message: string): string {\n    return `${type}:${title}:${message}`;\n  }\n\n  private addNotification(notification: Omit<Notification, 'id' | 'timestamp'>): void {\n    const notificationKey = this.generateNotificationKey(notification.type, notification.title, notification.message);\n    const now = Date.now();\n    const lastTime = this.lastNotificationTime.get(notificationKey) ?? 0;\n\n    // Проверяем, не показываем ли мы уже такое уведомление или не показывали его недавно (в течение 3 секунд)\n    if (this.activeNotifications.has(notificationKey) || (now - lastTime) < 3000) {\n      return; // Пропускаем дублирующееся уведомление\n    }\n\n    const newNotification: Notification = {\n      ...notification,\n      id: this.generateId(),\n      timestamp: new Date()\n    };\n\n    // Добавляем ключ в активные уведомления и запоминаем время\n    this.activeNotifications.add(notificationKey);\n    this.lastNotificationTime.set(notificationKey, now);\n\n    const currentNotifications = this.notificationsSubject.value;\n    this.notificationsSubject.next([...currentNotifications, newNotification]);\n\n    // Автоматическое удаление уведомления\n    if (notification.duration !== 0) {\n      setTimeout(() => {\n        this.removeNotification(newNotification.id);\n        this.activeNotifications.delete(notificationKey);\n      }, notification.duration ?? 5000);\n    }\n  }\n\n  success(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'success', title, message, duration });\n  }\n\n  error(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'error', title, message, duration });\n  }\n\n  warning(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'warning', title, message, duration });\n  }\n\n  info(title: string, message: string, duration?: number): void {\n    this.addNotification({ type: 'info', title, message, duration });\n  }\n\n  /**\n   * Показывает ошибку с кнопкой \"Повторить\"\n   */\n  showErrorWithRetry(error: ErrorNotification): void {\n    const config: MatSnackBarConfig = {\n      duration: 0, // Не закрывается автоматически\n      panelClass: ['error-snackbar'],\n      data: {\n        title: error.title,\n        message: error.message,\n        retryAction: error.retryAction\n      }\n    };\n\n    this.snackBar.open(error.message, 'Повторить', config);\n  }\n\n  /**\n   * Упрощенный метод для показа ошибок API\n   */\n  showError(message: string, retryAction?: () => void): void {\n    if (retryAction) {\n      this.showErrorWithRetry({\n        title: 'Ошибка',\n        message,\n        retryAction\n      });\n    } else {\n      this.error('Ошибка', message);\n    }\n  }\n\n  /**\n   * Показывает уведомление через MatSnackBar\n   */\n  private showSnackBar(message: string, type: 'success' | 'error' | 'warning' | 'info', duration?: number): void {\n    const config: MatSnackBarConfig = {\n      duration: duration ?? 5000,\n      panelClass: [`${type}-snackbar`],\n      horizontalPosition: 'end',\n      verticalPosition: 'top'\n    };\n\n    this.snackBar.open(message, 'Закрыть', config);\n  }\n\n  removeNotification(id: string): void {\n    const currentNotifications = this.notificationsSubject.value;\n    const notificationToRemove = currentNotifications.find(n => n.id === id);\n\n    if (notificationToRemove) {\n      const notificationKey = this.generateNotificationKey(\n        notificationToRemove.type,\n        notificationToRemove.title,\n        notificationToRemove.message\n      );\n      this.activeNotifications.delete(notificationKey);\n      this.lastNotificationTime.delete(notificationKey);\n    }\n\n    const filteredNotifications = currentNotifications.filter(\n      notification => notification.id !== id\n    );\n    this.notificationsSubject.next(filteredNotifications);\n  }\n\n  clearAll(): void {\n    this.notificationsSubject.next([]);\n    this.activeNotifications.clear();\n    this.lastNotificationTime.clear();\n    this.snackBar.dismiss();\n  }\n\n  getNotifications(): Notification[] {\n    return this.notificationsSubject.value;\n  }\n\n  /**\n   * Очищает только уведомления определенного типа\n   */\n  clearByType(type: 'success' | 'error' | 'warning' | 'info'): void {\n    const currentNotifications = this.notificationsSubject.value;\n    const filteredNotifications = currentNotifications.filter(n => n.type !== type);\n\n    // Очищаем активные уведомления этого типа\n    currentNotifications.forEach(notification => {\n      if (notification.type === type) {\n        const notificationKey = this.generateNotificationKey(\n          notification.type,\n          notification.title,\n          notification.message\n        );\n        this.activeNotifications.delete(notificationKey);\n        this.lastNotificationTime.delete(notificationKey);\n      }\n    });\n\n    this.notificationsSubject.next(filteredNotifications);\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProfileService",
            "id": "injectable-ProfileService-81e9018b970111e5151d3e85159b8830ff4db1ca44a1ae94ba8584be852c2bbfc6a9162969b6a57fbcdd14b3a73787663b38ea151f1533109a70437fb7c2ccfd",
            "file": "src/app/features/settings/services/profile.service.ts",
            "properties": [
                {
                    "name": "_error",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_hasError",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_isLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_profile",
                    "defaultValue": "signal<UserProfile | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "apiService",
                    "defaultValue": "inject(ApiService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "this._error.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "hasError",
                    "defaultValue": "this._hasError.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "this._isLoading.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "profile",
                    "defaultValue": "this._profile.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changePassword",
                    "args": [
                        {
                            "name": "currentPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type | null>",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nИзменяет пароль пользователя\n",
                    "description": "<p>Изменяет пароль пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "name": "currentPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "newPassword",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 203,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОчищает ошибку\n",
                    "description": "<p>Очищает ошибку</p>\n"
                },
                {
                    "name": "deleteAvatar",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserProfile | null>",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nУдаляет аватар пользователя\n",
                    "description": "<p>Удаляет аватар пользователя</p>\n"
                },
                {
                    "name": "getCurrentProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "UserProfile | null",
                    "typeParameters": [],
                    "line": 196,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучает текущий профиль из состояния\n",
                    "description": "<p>Получает текущий профиль из состояния</p>\n"
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбрабатывает ошибки и возвращает понятное сообщение\n",
                    "description": "<p>Обрабатывает ошибки и возвращает понятное сообщение</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserProfile | null>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nЗагружает профиль пользователя с сервера\n",
                    "description": "<p>Загружает профиль пользователя с сервера</p>\n"
                },
                {
                    "name": "resetLoading",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 211,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nСбрасывает состояние загрузки\n",
                    "description": "<p>Сбрасывает состояние загрузки</p>\n"
                },
                {
                    "name": "retryLoadProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПовторная попытка загрузки профиля\n",
                    "description": "<p>Повторная попытка загрузки профиля</p>\n"
                },
                {
                    "name": "updateAvatar",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateAvatarRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserProfile | null>",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбновляет аватар пользователя\n",
                    "description": "<p>Обновляет аватар пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "UpdateAvatarRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProfile",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserProfile | null>",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбновляет профиль пользователя\n",
                    "description": "<p>Обновляет профиль пользователя</p>\n",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "UpdateProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject, signal } from '@angular/core';\r\nimport { Observable, catchError, map, of, tap } from 'rxjs';\r\nimport { ApiService, NotificationService } from '@services';\r\nimport { UserProfile, UpdateProfileRequest, UpdateAvatarRequest } from '../models/user-profile.model';\r\n\r\nexport interface ProfileState {\r\n  profile: UserProfile | null;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  hasError: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProfileService {\r\n  private readonly apiService = inject(ApiService);\r\n  private readonly notificationService = inject(NotificationService);\r\n\r\n  // Сигналы для состояния\r\n  private readonly _profile = signal<UserProfile | null>(null);\r\n  private readonly _isLoading = signal(false);\r\n  private readonly _error = signal<string | null>(null);\r\n  private readonly _hasError = signal(false);\r\n\r\n  // Публичные readonly сигналы\r\n  readonly profile = this._profile.asReadonly();\r\n  readonly isLoading = this._isLoading.asReadonly();\r\n  readonly error = this._error.asReadonly();\r\n  readonly hasError = this._hasError.asReadonly();\r\n\r\n  constructor() {\r\n    this.loadProfile();\r\n  }\r\n\r\n  /**\r\n   * Загружает профиль пользователя с сервера\r\n   */\r\n  loadProfile(): Observable<UserProfile | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    return this.apiService.get<UserProfile>('/profile').pipe(\r\n      map(response => response.data),\r\n      tap(profile => {\r\n        this._profile.set(profile);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка загрузки профиля:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        // Показываем уведомление с кнопкой retry\r\n        this.notificationService.showError(\r\n          'Ошибка загрузки профиля',\r\n          () => this.loadProfile()\r\n        );\r\n\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Обновляет профиль пользователя\r\n   */\r\n  updateProfile(request: UpdateProfileRequest): Observable<UserProfile | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    return this.apiService.put<UserProfile>('/profile', request).pipe(\r\n      map(response => response.data),\r\n      tap(profile => {\r\n        this._profile.set(profile);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n        this.notificationService.success('Успех', 'Профиль успешно обновлен');\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка обновления профиля:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        this.notificationService.error('Ошибка обновления профиля', errorMessage);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Обновляет аватар пользователя\r\n   */\r\n  updateAvatar(request: UpdateAvatarRequest): Observable<UserProfile | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    // Создаем FormData для отправки файла\r\n    const formData = new FormData();\r\n    formData.append('avatar', request.avatar);\r\n\r\n    return this.apiService.postFile<UserProfile>('/profile/avatar', formData).pipe(\r\n      map(response => response.data),\r\n      tap(profile => {\r\n        this._profile.set(profile);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n        this.notificationService.success('Успех', 'Аватар успешно обновлен');\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка обновления аватара:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        this.notificationService.error('Ошибка обновления аватара', errorMessage);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Удаляет аватар пользователя\r\n   */\r\n  deleteAvatar(): Observable<UserProfile | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    return this.apiService.delete<UserProfile>('/profile/avatar').pipe(\r\n      map(response => response.data),\r\n      tap(profile => {\r\n        this._profile.set(profile);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n        this.notificationService.success('Успех', 'Аватар успешно удален');\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка удаления аватара:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        this.notificationService.error('Ошибка удаления аватара', errorMessage);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Изменяет пароль пользователя\r\n   */\r\n  changePassword(currentPassword: string, newPassword: string): Observable<{ message: string } | null> {\r\n    this._isLoading.set(true);\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n\r\n    const request = {\r\n      currentPassword,\r\n      newPassword\r\n    };\r\n\r\n    return this.apiService.post<{ message: string }>('/profile/change-password', request).pipe(\r\n      map(response => response.data),\r\n      tap(() => {\r\n        this._isLoading.set(false);\r\n        this._hasError.set(false);\r\n        this.notificationService.success('Успех', 'Пароль успешно изменен');\r\n      }),\r\n      catchError(error => {\r\n        console.error('Ошибка смены пароля:', error);\r\n        const errorMessage = this.getErrorMessage(error);\r\n        this._error.set(errorMessage);\r\n        this._isLoading.set(false);\r\n        this._hasError.set(true);\r\n\r\n        this.notificationService.error('Ошибка смены пароля', errorMessage);\r\n        return of(null);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получает текущий профиль из состояния\r\n   */\r\n  getCurrentProfile(): UserProfile | null {\r\n    return this._profile();\r\n  }\r\n\r\n  /**\r\n   * Очищает ошибку\r\n   */\r\n  clearError(): void {\r\n    this._error.set(null);\r\n    this._hasError.set(false);\r\n  }\r\n\r\n  /**\r\n   * Сбрасывает состояние загрузки\r\n   */\r\n  resetLoading(): void {\r\n    this._isLoading.set(false);\r\n  }\r\n\r\n  /**\r\n   * Повторная попытка загрузки профиля\r\n   */\r\n  retryLoadProfile(): void {\r\n    this.loadProfile().subscribe();\r\n  }\r\n\r\n  /**\r\n   * Обрабатывает ошибки и возвращает понятное сообщение\r\n   */\r\n  private getErrorMessage(error: unknown): string {\r\n    if (error && typeof error === 'object' && 'error' in error && error.error && typeof error.error === 'object' && 'message' in error.error) {\r\n      return String(error.error.message);\r\n    }\r\n\r\n    if (error && typeof error === 'object' && 'message' in error) {\r\n      return String(error.message);\r\n    }\r\n\r\n    if (error && typeof error === 'object' && 'status' in error) {\r\n      const status = Number(error.status);\r\n      switch (status) {\r\n        case 0:\r\n          return 'Сервер недоступен. Проверьте подключение к интернету.';\r\n        case 400:\r\n          return 'Неверные данные запроса';\r\n        case 401:\r\n          return 'Необходима авторизация';\r\n        case 403:\r\n          return 'Доступ запрещен';\r\n        case 404:\r\n          return 'Профиль не найден';\r\n        case 409:\r\n          return 'Пользователь с таким email уже существует';\r\n        case 413:\r\n          return 'Файл слишком большой';\r\n        case 415:\r\n          return 'Неподдерживаемый тип файла';\r\n        case 500:\r\n          return 'Внутренняя ошибка сервера';\r\n        default:\r\n          return 'Произошла ошибка при выполнении запроса';\r\n      }\r\n    }\r\n\r\n    return 'Произошла неизвестная ошибка';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProjectListEffects",
            "id": "injectable-ProjectListEffects-12767f5c3b7b5bc025471386d015a8b6f3f0b28fa46004b21eb9d5ee72e9ed86e3d4a51ad1cdf809567df99db18242255a4e1dcf724d738c40d5a5384112f2b5",
            "file": "src/app/features/projects/store/project-list.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "archiveProject$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.archiveProject),\r\n      mergeMap(({ id }) =>\r\n        this.projectListService.archiveProject(id).pipe(\r\n          map(archivedProject => ProjectListActions.archiveProjectSuccess({\r\n            project: archivedProject\r\n          })),\r\n          catchError(error => of(ProjectListActions.archiveProjectFailure({\r\n            error: error.message ?? 'Ошибка архивирования проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 172
                },
                {
                    "name": "autoPrefetch$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.loadProjectsSuccess),\r\n      withLatestFrom(\r\n        this.store.select(ProjectListSelectors.selectHasMoreProjects),\r\n        this.store.select(ProjectListSelectors.selectProjectListPagination)\r\n      ),\r\n      filter(([_action, hasMore, pagination]) =>\r\n        hasMore && pagination.page === 1\r\n      ),\r\n      debounceTime(1000), // Задержка перед предварительной загрузкой\r\n      map(() => ProjectListActions.prefetchNextPage())\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 296
                },
                {
                    "name": "clearErrorOnSuccess$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(\r\n        ProjectListActions.loadProjectsSuccess,\r\n        ProjectListActions.loadNextPageSuccess,\r\n        ProjectListActions.createProjectSuccess,\r\n        ProjectListActions.updateProjectSuccess,\r\n        ProjectListActions.deleteProjectSuccess,\r\n        ProjectListActions.archiveProjectSuccess,\r\n        ProjectListActions.duplicateProjectSuccess\r\n      ),\r\n      map(() => ProjectListActions.clearError())\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 257
                },
                {
                    "name": "createProject$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.createProject),\r\n      mergeMap(({ project }) =>\r\n        this.projectListService.createProject(project).pipe(\r\n          map(createdProject => ProjectListActions.createProjectSuccess({\r\n            project: createdProject\r\n          })),\r\n          catchError(error => of(ProjectListActions.createProjectFailure({\r\n            error: error.message ?? 'Ошибка создания проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 123
                },
                {
                    "name": "defaultConfig",
                    "defaultValue": "{\r\n    enableSelection: true,\r\n    enableInfiniteScroll: true,\r\n    enableFilters: true,\r\n    enableSorting: true,\r\n    enableSearch: true,\r\n    enableActions: true,\r\n    pageSize: 12,\r\n    debounceTime: 300\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectListConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "deleteProject$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.deleteProject),\r\n      mergeMap(({ id }) =>\r\n        this.projectListService.deleteProject(id).pipe(\r\n          map(() => ProjectListActions.deleteProjectSuccess({ id })),\r\n          catchError(error => of(ProjectListActions.deleteProjectFailure({\r\n            error: error.message ?? 'Ошибка удаления проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "duplicateProject$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.duplicateProject),\r\n      mergeMap(({ id }) =>\r\n        this.projectListService.duplicateProject(id).pipe(\r\n          map(duplicatedProject => ProjectListActions.duplicateProjectSuccess({\r\n            project: duplicatedProject\r\n          })),\r\n          catchError(error => of(ProjectListActions.duplicateProjectFailure({\r\n            error: error.message ?? 'Ошибка дублирования проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 189
                },
                {
                    "name": "handleError$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(\r\n        ProjectListActions.loadProjectsFailure,\r\n        ProjectListActions.loadNextPageFailure,\r\n        ProjectListActions.createProjectFailure,\r\n        ProjectListActions.updateProjectFailure,\r\n        ProjectListActions.deleteProjectFailure,\r\n        ProjectListActions.archiveProjectFailure,\r\n        ProjectListActions.duplicateProjectFailure\r\n      ),\r\n      tap(({ error }) => {\r\n        console.error('Project List Error:', error);\r\n        // Здесь можно добавить логику для показа уведомлений\r\n        // this.notificationService.showError(error);\r\n      })\r\n    ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 236
                },
                {
                    "name": "loadNextPage$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.loadNextPage),\r\n      withLatestFrom(\r\n        this.store.select(ProjectListSelectors.selectProjectListFilters),\r\n        this.store.select(ProjectListSelectors.selectProjectListSort),\r\n        this.store.select(ProjectListSelectors.selectProjectListPagination)\r\n      ),\r\n      filter(([_action, _filters, _sort, pagination]) => pagination.hasMore),\r\n      mergeMap(([_action, filters, sort, pagination]) => {\r\n        const request = {\r\n          filters,\r\n          sort,\r\n          pagination: {\r\n            page: pagination.page + 1,\r\n            pageSize: pagination.pageSize\r\n          }\r\n        };\r\n\r\n        return this.projectListService.getProjects(request).pipe(\r\n          map(response => ProjectListActions.loadNextPageSuccess({ response })),\r\n          catchError(error => of(ProjectListActions.loadNextPageFailure({\r\n            error: error.message ?? 'Ошибка загрузки следующей страницы'\r\n          })))\r\n        );\r\n      })\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "loadProjects$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.loadProjects),\r\n      mergeMap(({ request }) =>\r\n        this.projectListService.getProjects(request).pipe(\r\n          map(response => ProjectListActions.loadProjectsSuccess({\r\n            response,\r\n            append: false\r\n          })),\r\n          catchError(error => of(ProjectListActions.loadProjectsFailure({\r\n            error: error.message ?? 'Ошибка загрузки проектов'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "loadProjectsOnFilterChange$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(\r\n        ProjectListActions.updateFilters,\r\n        ProjectListActions.resetFilters,\r\n        ProjectListActions.updateSort,\r\n        ProjectListActions.resetSort,\r\n        ProjectListActions.updateSearchTerm,\r\n        ProjectListActions.updateStatusFilter,\r\n        ProjectListActions.updateDateRange\r\n      ),\r\n      withLatestFrom(\r\n        this.store.select(ProjectListSelectors.selectProjectListFilters),\r\n        this.store.select(ProjectListSelectors.selectProjectListSort),\r\n        this.store.select(ProjectListSelectors.selectProjectListPagination)\r\n      ),\r\n      debounceTime(this.defaultConfig.debounceTime),\r\n      distinctUntilChanged((prev, curr) =>\r\n        JSON.stringify(prev) === JSON.stringify(curr)\r\n      ),\r\n      mergeMap(([_action, filters, sort, pagination]) => {\r\n        const request = {\r\n          filters,\r\n          sort,\r\n          pagination: {\r\n            page: 1,\r\n            pageSize: pagination.pageSize\r\n          }\r\n        };\r\n\r\n        return of(ProjectListActions.loadProjects({ request }));\r\n      })\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 87
                },
                {
                    "name": "logActions$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(\r\n        ProjectListActions.loadProjects,\r\n        ProjectListActions.loadProjectsSuccess,\r\n        ProjectListActions.loadProjectsFailure,\r\n        ProjectListActions.updateFilters,\r\n        ProjectListActions.updateSort,\r\n        ProjectListActions.selectProject,\r\n        ProjectListActions.deselectProject\r\n      ),\r\n      tap(action => {\r\n        // Проверка на development окружение через Angular\r\n        if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {\r\n          // eslint-disable-next-line no-console\r\n          console.log('Project List Action:', action.type, action);\r\n        }\r\n      })\r\n    ),\r\n    { dispatch: false }\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 273
                },
                {
                    "name": "prefetchNextPage$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.prefetchNextPage),\r\n      withLatestFrom(\r\n        this.store.select(ProjectListSelectors.selectProjectListFilters),\r\n        this.store.select(ProjectListSelectors.selectProjectListSort),\r\n        this.store.select(ProjectListSelectors.selectProjectListPagination)\r\n      ),\r\n      filter(([_action, _filters, _sort, pagination]) => pagination.hasMore),\r\n      mergeMap(([_action, filters, sort, pagination]) => {\r\n        const request = {\r\n          filters,\r\n          sort,\r\n          pagination: {\r\n            page: pagination.page + 1,\r\n            pageSize: pagination.pageSize\r\n          }\r\n        };\r\n\r\n        return this.projectListService.prefetchNextPage(request).pipe(\r\n          map(response => ProjectListActions.prefetchNextPageSuccess({ response })),\r\n          catchError(error => of(ProjectListActions.prefetchNextPageFailure({\r\n            error: error.message ?? 'Ошибка предварительной загрузки'\r\n          })))\r\n        );\r\n      })\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 206
                },
                {
                    "name": "projectListService",
                    "defaultValue": "inject(ProjectListService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "updateProject$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.updateProject),\r\n      mergeMap(({ id, project }) =>\r\n        this.projectListService.updateProject(id, project).pipe(\r\n          map(updatedProject => ProjectListActions.updateProjectSuccess({\r\n            project: updatedProject\r\n          })),\r\n          catchError(error => of(ProjectListActions.updateProjectFailure({\r\n            error: error.message ?? 'Ошибка обновления проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 140
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport { Store } from '@ngrx/store';\r\nimport { of } from 'rxjs';\r\nimport {\r\n  map,\r\n  mergeMap,\r\n  catchError,\r\n  withLatestFrom,\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  filter,\r\n  tap\r\n} from 'rxjs/operators';\r\nimport { ProjectListService } from '../services/project-list.service';\r\nimport * as ProjectListActions from './project-list.actions';\r\nimport * as ProjectListSelectors from './project-list.selectors';\r\nimport { ProjectListConfig } from '../models/project-list.model';\r\n\r\n@Injectable()\r\nexport class ProjectListEffects {\r\n  // Конфигурация по умолчанию\r\n  private readonly defaultConfig: ProjectListConfig = {\r\n    enableSelection: true,\r\n    enableInfiniteScroll: true,\r\n    enableFilters: true,\r\n    enableSorting: true,\r\n    enableSearch: true,\r\n    enableActions: true,\r\n    pageSize: 12,\r\n    debounceTime: 300\r\n  };\r\n\r\n  private readonly actions$ = inject(Actions);\r\n  private readonly store = inject(Store);\r\n  private readonly projectListService = inject(ProjectListService);\r\n\r\n  // Эффект для загрузки проектов\r\n  loadProjects$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.loadProjects),\r\n      mergeMap(({ request }) =>\r\n        this.projectListService.getProjects(request).pipe(\r\n          map(response => ProjectListActions.loadProjectsSuccess({\r\n            response,\r\n            append: false\r\n          })),\r\n          catchError(error => of(ProjectListActions.loadProjectsFailure({\r\n            error: error.message ?? 'Ошибка загрузки проектов'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  // Эффект для загрузки следующей страницы\r\n  loadNextPage$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.loadNextPage),\r\n      withLatestFrom(\r\n        this.store.select(ProjectListSelectors.selectProjectListFilters),\r\n        this.store.select(ProjectListSelectors.selectProjectListSort),\r\n        this.store.select(ProjectListSelectors.selectProjectListPagination)\r\n      ),\r\n      filter(([_action, _filters, _sort, pagination]) => pagination.hasMore),\r\n      mergeMap(([_action, filters, sort, pagination]) => {\r\n        const request = {\r\n          filters,\r\n          sort,\r\n          pagination: {\r\n            page: pagination.page + 1,\r\n            pageSize: pagination.pageSize\r\n          }\r\n        };\r\n\r\n        return this.projectListService.getProjects(request).pipe(\r\n          map(response => ProjectListActions.loadNextPageSuccess({ response })),\r\n          catchError(error => of(ProjectListActions.loadNextPageFailure({\r\n            error: error.message ?? 'Ошибка загрузки следующей страницы'\r\n          })))\r\n        );\r\n      })\r\n    )\r\n  );\r\n\r\n  // Эффект для автоматической загрузки при изменении фильтров\r\n  loadProjectsOnFilterChange$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(\r\n        ProjectListActions.updateFilters,\r\n        ProjectListActions.resetFilters,\r\n        ProjectListActions.updateSort,\r\n        ProjectListActions.resetSort,\r\n        ProjectListActions.updateSearchTerm,\r\n        ProjectListActions.updateStatusFilter,\r\n        ProjectListActions.updateDateRange\r\n      ),\r\n      withLatestFrom(\r\n        this.store.select(ProjectListSelectors.selectProjectListFilters),\r\n        this.store.select(ProjectListSelectors.selectProjectListSort),\r\n        this.store.select(ProjectListSelectors.selectProjectListPagination)\r\n      ),\r\n      debounceTime(this.defaultConfig.debounceTime),\r\n      distinctUntilChanged((prev, curr) =>\r\n        JSON.stringify(prev) === JSON.stringify(curr)\r\n      ),\r\n      mergeMap(([_action, filters, sort, pagination]) => {\r\n        const request = {\r\n          filters,\r\n          sort,\r\n          pagination: {\r\n            page: 1,\r\n            pageSize: pagination.pageSize\r\n          }\r\n        };\r\n\r\n        return of(ProjectListActions.loadProjects({ request }));\r\n      })\r\n    )\r\n  );\r\n\r\n  // Эффект для создания проекта\r\n  createProject$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.createProject),\r\n      mergeMap(({ project }) =>\r\n        this.projectListService.createProject(project).pipe(\r\n          map(createdProject => ProjectListActions.createProjectSuccess({\r\n            project: createdProject\r\n          })),\r\n          catchError(error => of(ProjectListActions.createProjectFailure({\r\n            error: error.message ?? 'Ошибка создания проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  // Эффект для обновления проекта\r\n  updateProject$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.updateProject),\r\n      mergeMap(({ id, project }) =>\r\n        this.projectListService.updateProject(id, project).pipe(\r\n          map(updatedProject => ProjectListActions.updateProjectSuccess({\r\n            project: updatedProject\r\n          })),\r\n          catchError(error => of(ProjectListActions.updateProjectFailure({\r\n            error: error.message ?? 'Ошибка обновления проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  // Эффект для удаления проекта\r\n  deleteProject$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.deleteProject),\r\n      mergeMap(({ id }) =>\r\n        this.projectListService.deleteProject(id).pipe(\r\n          map(() => ProjectListActions.deleteProjectSuccess({ id })),\r\n          catchError(error => of(ProjectListActions.deleteProjectFailure({\r\n            error: error.message ?? 'Ошибка удаления проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  // Эффект для архивирования проекта\r\n  archiveProject$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.archiveProject),\r\n      mergeMap(({ id }) =>\r\n        this.projectListService.archiveProject(id).pipe(\r\n          map(archivedProject => ProjectListActions.archiveProjectSuccess({\r\n            project: archivedProject\r\n          })),\r\n          catchError(error => of(ProjectListActions.archiveProjectFailure({\r\n            error: error.message ?? 'Ошибка архивирования проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  // Эффект для дублирования проекта\r\n  duplicateProject$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.duplicateProject),\r\n      mergeMap(({ id }) =>\r\n        this.projectListService.duplicateProject(id).pipe(\r\n          map(duplicatedProject => ProjectListActions.duplicateProjectSuccess({\r\n            project: duplicatedProject\r\n          })),\r\n          catchError(error => of(ProjectListActions.duplicateProjectFailure({\r\n            error: error.message ?? 'Ошибка дублирования проекта'\r\n          })))\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  // Эффект для предварительной загрузки следующей страницы\r\n  prefetchNextPage$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.prefetchNextPage),\r\n      withLatestFrom(\r\n        this.store.select(ProjectListSelectors.selectProjectListFilters),\r\n        this.store.select(ProjectListSelectors.selectProjectListSort),\r\n        this.store.select(ProjectListSelectors.selectProjectListPagination)\r\n      ),\r\n      filter(([_action, _filters, _sort, pagination]) => pagination.hasMore),\r\n      mergeMap(([_action, filters, sort, pagination]) => {\r\n        const request = {\r\n          filters,\r\n          sort,\r\n          pagination: {\r\n            page: pagination.page + 1,\r\n            pageSize: pagination.pageSize\r\n          }\r\n        };\r\n\r\n        return this.projectListService.prefetchNextPage(request).pipe(\r\n          map(response => ProjectListActions.prefetchNextPageSuccess({ response })),\r\n          catchError(error => of(ProjectListActions.prefetchNextPageFailure({\r\n            error: error.message ?? 'Ошибка предварительной загрузки'\r\n          })))\r\n        );\r\n      })\r\n    )\r\n  );\r\n\r\n  // Эффект для обработки ошибок\r\n  handleError$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(\r\n        ProjectListActions.loadProjectsFailure,\r\n        ProjectListActions.loadNextPageFailure,\r\n        ProjectListActions.createProjectFailure,\r\n        ProjectListActions.updateProjectFailure,\r\n        ProjectListActions.deleteProjectFailure,\r\n        ProjectListActions.archiveProjectFailure,\r\n        ProjectListActions.duplicateProjectFailure\r\n      ),\r\n      tap(({ error }) => {\r\n        console.error('Project List Error:', error);\r\n        // Здесь можно добавить логику для показа уведомлений\r\n        // this.notificationService.showError(error);\r\n      })\r\n    ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  // Эффект для очистки ошибок при успешных операциях\r\n  clearErrorOnSuccess$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(\r\n        ProjectListActions.loadProjectsSuccess,\r\n        ProjectListActions.loadNextPageSuccess,\r\n        ProjectListActions.createProjectSuccess,\r\n        ProjectListActions.updateProjectSuccess,\r\n        ProjectListActions.deleteProjectSuccess,\r\n        ProjectListActions.archiveProjectSuccess,\r\n        ProjectListActions.duplicateProjectSuccess\r\n      ),\r\n      map(() => ProjectListActions.clearError())\r\n    )\r\n  );\r\n\r\n  // Эффект для логирования действий (для отладки)\r\n  logActions$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(\r\n        ProjectListActions.loadProjects,\r\n        ProjectListActions.loadProjectsSuccess,\r\n        ProjectListActions.loadProjectsFailure,\r\n        ProjectListActions.updateFilters,\r\n        ProjectListActions.updateSort,\r\n        ProjectListActions.selectProject,\r\n        ProjectListActions.deselectProject\r\n      ),\r\n      tap(action => {\r\n        // Проверка на development окружение через Angular\r\n        if (typeof window !== 'undefined' && window.location.hostname === 'localhost') {\r\n          // eslint-disable-next-line no-console\r\n          console.log('Project List Action:', action.type, action);\r\n        }\r\n      })\r\n    ),\r\n    { dispatch: false }\r\n  );\r\n\r\n  // Эффект для автоматической предварительной загрузки\r\n  autoPrefetch$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ProjectListActions.loadProjectsSuccess),\r\n      withLatestFrom(\r\n        this.store.select(ProjectListSelectors.selectHasMoreProjects),\r\n        this.store.select(ProjectListSelectors.selectProjectListPagination)\r\n      ),\r\n      filter(([_action, hasMore, pagination]) =>\r\n        hasMore && pagination.page === 1\r\n      ),\r\n      debounceTime(1000), // Задержка перед предварительной загрузкой\r\n      map(() => ProjectListActions.prefetchNextPage())\r\n    )\r\n  );\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProjectListService",
            "id": "injectable-ProjectListService-85120cc5a078c0f7a5c1d292be682bda0427d2da1a81dbf452fd2b83feaf668064b724ae737fec7c68aaf560c83284d4592cce8c8a6489a07b6ee1ec57028502",
            "file": "src/app/features/projects/services/project-list.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'/api/projects'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "cache",
                    "defaultValue": "new Map<string, ProjectListResponse>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "cacheTimeout",
                    "defaultValue": "5 * 60 * 1000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "error$",
                    "defaultValue": "this.errorSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "errorSubject",
                    "defaultValue": "new BehaviorSubject<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "lastRequest",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectListRequest | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.loadingSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "loadingSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "archiveProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Project>",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nАрхивирование проекта\n",
                    "description": "<p>Архивирование проекта</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "buildHttpParams",
                    "args": [
                        {
                            "name": "request",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearCache",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОчистка кэша\n",
                    "description": "<p>Очистка кэша</p>\n"
                },
                {
                    "name": "clearError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 209,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОчистка ошибок\n",
                    "description": "<p>Очистка ошибок</p>\n"
                },
                {
                    "name": "createProject",
                    "args": [
                        {
                            "name": "project",
                            "type": "Partial<Project>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Project>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nСоздание нового проекта\n",
                    "description": "<p>Создание нового проекта</p>\n",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Partial<Project>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<void>",
                    "typeParameters": [],
                    "line": 132,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nУдаление проекта\n",
                    "description": "<p>Удаление проекта</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "duplicateProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Project>",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nДублирование проекта\n",
                    "description": "<p>Дублирование проекта</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateCacheKey",
                    "args": [
                        {
                            "name": "request",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 260,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrentError",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 223,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение текущей ошибки\n",
                    "description": "<p>Получение текущей ошибки</p>\n"
                },
                {
                    "name": "getLoadingState",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 216,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение состояния загрузки\n",
                    "description": "<p>Получение состояния загрузки</p>\n"
                },
                {
                    "name": "getProjectById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Project>",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение проекта по ID\n",
                    "description": "<p>Получение проекта по ID</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjects",
                    "args": [
                        {
                            "name": "request",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProjectListResponse>",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение списка проектов с поддержкой фильтрации, сортировки и пагинации\n",
                    "description": "<p>Получение списка проектов с поддержкой фильтрации, сортировки и пагинации</p>\n",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getProjectsWithDebounce",
                    "args": [
                        {
                            "name": "request",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "ProjectListConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProjectListResponse>",
                    "typeParameters": [],
                    "line": 171,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПолучение проектов с debounce для поиска\n",
                    "description": "<p>Получение проектов с debounce для поиска</p>\n",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "ProjectListConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleError",
                    "args": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isCacheValid",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "prefetchNextPage",
                    "args": [
                        {
                            "name": "currentRequest",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ProjectListResponse>",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nПредварительная загрузка следующей страницы\n",
                    "description": "<p>Предварительная загрузка следующей страницы</p>\n",
                    "jsdoctags": [
                        {
                            "name": "currentRequest",
                            "type": "ProjectListRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setCacheTimestamp",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProject",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "project",
                            "type": "Partial<Project>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Project>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nОбновление проекта\n",
                    "description": "<p>Обновление проекта</p>\n",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "project",
                            "type": "Partial<Project>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, BehaviorSubject, of, throwError } from 'rxjs';\r\nimport {\r\n  catchError,\r\n  shareReplay,\r\n  tap,\r\n  switchMap,\r\n  distinctUntilChanged,\r\n  debounceTime\r\n} from 'rxjs/operators';\r\nimport { Project } from '@models';\r\nimport {\r\n  ProjectListRequest,\r\n  ProjectListResponse,\r\n  ProjectListConfig\r\n} from '../models/project-list.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProjectListService {\r\n  private readonly apiUrl = '/api/projects';\r\n  private readonly cache = new Map<string, ProjectListResponse>();\r\n  private readonly cacheTimeout = 5 * 60 * 1000; // 5 минут\r\n\r\n  // BehaviorSubject для отслеживания состояния загрузки\r\n  private readonly loadingSubject = new BehaviorSubject<boolean>(false);\r\n  public readonly loading$ = this.loadingSubject.asObservable();\r\n\r\n  // BehaviorSubject для отслеживания ошибок\r\n  private readonly errorSubject = new BehaviorSubject<string | null>(null);\r\n  public readonly error$ = this.errorSubject.asObservable();\r\n\r\n  // Кэш для последнего запроса\r\n  private readonly lastRequest: ProjectListRequest | null = null;\r\n\r\n  private readonly http = inject(HttpClient);\r\n\r\n  /**\r\n   * Получение списка проектов с поддержкой фильтрации, сортировки и пагинации\r\n   */\r\n  getProjects(request: ProjectListRequest): Observable<ProjectListResponse> {\r\n    const cacheKey = this.generateCacheKey(request);\r\n\r\n    // Проверяем кэш\r\n    const cached = this.cache.get(cacheKey);\r\n    if (cached && this.isCacheValid(cacheKey)) {\r\n      return of(cached);\r\n    }\r\n\r\n    this.loadingSubject.next(true);\r\n    this.errorSubject.next(null);\r\n\r\n    const params = this.buildHttpParams(request);\r\n\r\n    return this.http.get<ProjectListResponse>(this.apiUrl, { params }).pipe(\r\n      tap(response => {\r\n        // Сохраняем в кэш\r\n        this.cache.set(cacheKey, response);\r\n        this.setCacheTimestamp(cacheKey);\r\n        this.loadingSubject.next(false);\r\n      }),\r\n      catchError(error => {\r\n        this.loadingSubject.next(false);\r\n        this.errorSubject.next(this.handleError(error));\r\n        return throwError(() => error);\r\n      }),\r\n      shareReplay(1) // Кэшируем последний результат для подписчиков\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получение проекта по ID\r\n   */\r\n  getProjectById(id: string): Observable<Project> {\r\n    const cacheKey = `project_${id}`;\r\n    const cached = this.cache.get(cacheKey);\r\n\r\n    if (cached && this.isCacheValid(cacheKey)) {\r\n      return of(cached.projects[0]);\r\n    }\r\n\r\n    return this.http.get<Project>(`${this.apiUrl}/${id}`).pipe(\r\n      tap(project => {\r\n        // Сохраняем в кэш\r\n        const response: ProjectListResponse = {\r\n          projects: [project],\r\n          total: 1,\r\n          hasMore: false\r\n        };\r\n        this.cache.set(cacheKey, response);\r\n        this.setCacheTimestamp(cacheKey);\r\n      }),\r\n      catchError(error => {\r\n        this.errorSubject.next(this.handleError(error));\r\n        return throwError(() => error);\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Создание нового проекта\r\n   */\r\n  createProject(project: Partial<Project>): Observable<Project> {\r\n    return this.http.post<Project>(this.apiUrl, project).pipe(\r\n      tap(() => this.clearCache()), // Очищаем кэш при создании\r\n      catchError(error => {\r\n        this.errorSubject.next(this.handleError(error));\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Обновление проекта\r\n   */\r\n  updateProject(id: string, project: Partial<Project>): Observable<Project> {\r\n    return this.http.put<Project>(`${this.apiUrl}/${id}`, project).pipe(\r\n      tap(() => this.clearCache()), // Очищаем кэш при обновлении\r\n      catchError(error => {\r\n        this.errorSubject.next(this.handleError(error));\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Удаление проекта\r\n   */\r\n  deleteProject(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`).pipe(\r\n      tap(() => this.clearCache()), // Очищаем кэш при удалении\r\n      catchError(error => {\r\n        this.errorSubject.next(this.handleError(error));\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Архивирование проекта\r\n   */\r\n  archiveProject(id: string): Observable<Project> {\r\n    return this.http.patch<Project>(`${this.apiUrl}/${id}/archive`, {}).pipe(\r\n      tap(() => this.clearCache()),\r\n      catchError(error => {\r\n        this.errorSubject.next(this.handleError(error));\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Дублирование проекта\r\n   */\r\n  duplicateProject(id: string): Observable<Project> {\r\n    return this.http.post<Project>(`${this.apiUrl}/${id}/duplicate`, {}).pipe(\r\n      tap(() => this.clearCache()),\r\n      catchError(error => {\r\n        this.errorSubject.next(this.handleError(error));\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Получение проектов с debounce для поиска\r\n   */\r\n  getProjectsWithDebounce(\r\n    request: ProjectListRequest,\r\n    config: ProjectListConfig\r\n  ): Observable<ProjectListResponse> {\r\n    return of(request).pipe(\r\n      debounceTime(config.debounceTime),\r\n      distinctUntilChanged((prev, curr) =>\r\n        JSON.stringify(prev) === JSON.stringify(curr)\r\n      ),\r\n      switchMap(req => this.getProjects(req))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Предварительная загрузка следующей страницы\r\n   */\r\n  prefetchNextPage(currentRequest: ProjectListRequest): Observable<ProjectListResponse> {\r\n    const nextRequest: ProjectListRequest = {\r\n      ...currentRequest,\r\n      pagination: {\r\n        ...currentRequest.pagination,\r\n        page: currentRequest.pagination.page + 1\r\n      }\r\n    };\r\n\r\n    return this.getProjects(nextRequest);\r\n  }\r\n\r\n  /**\r\n   * Очистка кэша\r\n   */\r\n  clearCache(): void {\r\n    this.cache.clear();\r\n  }\r\n\r\n  /**\r\n   * Очистка ошибок\r\n   */\r\n  clearError(): void {\r\n    this.errorSubject.next(null);\r\n  }\r\n\r\n  /**\r\n   * Получение состояния загрузки\r\n   */\r\n  getLoadingState(): boolean {\r\n    return this.loadingSubject.value;\r\n  }\r\n\r\n  /**\r\n   * Получение текущей ошибки\r\n   */\r\n  getCurrentError(): string | null {\r\n    return this.errorSubject.value;\r\n  }\r\n\r\n  // Приватные методы\r\n\r\n  private buildHttpParams(request: ProjectListRequest): HttpParams {\r\n    let params = new HttpParams()\r\n      .set('page', request.pagination.page.toString())\r\n      .set('pageSize', request.pagination.pageSize.toString())\r\n      .set('sortField', request.sort.field)\r\n      .set('sortDirection', request.sort.direction);\r\n\r\n    // Добавляем фильтры\r\n    if (request.filters.searchTerm) {\r\n      params = params.set('search', request.filters.searchTerm);\r\n    }\r\n\r\n    if (request.filters.status && request.filters.status !== 'all') {\r\n      params = params.set('status', request.filters.status);\r\n    }\r\n\r\n    if (request.filters.ownerId) {\r\n      params = params.set('ownerId', request.filters.ownerId);\r\n    }\r\n\r\n    if (request.filters.dateRange.start) {\r\n      params = params.set('startDate', request.filters.dateRange.start.toISOString());\r\n    }\r\n\r\n    if (request.filters.dateRange.end) {\r\n      params = params.set('endDate', request.filters.dateRange.end.toISOString());\r\n    }\r\n\r\n    return params;\r\n  }\r\n\r\n  private generateCacheKey(request: ProjectListRequest): string {\r\n    return `projects_${JSON.stringify(request)}`;\r\n  }\r\n\r\n  private isCacheValid(key: string): boolean {\r\n    const timestamp = this.cache.get(`${key}_timestamp`) as number | undefined;\r\n    if (!timestamp) return false;\r\n\r\n    return Date.now() - timestamp < this.cacheTimeout;\r\n  }\r\n\r\n  private setCacheTimestamp(key: string): void {\r\n    this.cache.set(`${key}_timestamp`, Date.now() as unknown as ProjectListResponse);\r\n  }\r\n\r\n  private handleError(error: unknown): string {\r\n    if (typeof error === 'object' && error !== null && 'status' in error) {\r\n      const status = (error as { status: number }).status;\r\n\r\n      if (status === 404) {\r\n        return 'Проекты не найдены';\r\n      } else if (status === 403) {\r\n        return 'Нет доступа к проектам';\r\n      } else if (status === 500) {\r\n        return 'Ошибка сервера';\r\n      } else if (status === 0) {\r\n        return 'Нет подключения к серверу';\r\n      }\r\n    }\r\n\r\n    if (typeof error === 'object' && error !== null && 'error' in error) {\r\n      const errorObj = (error as { error?: { message?: string } }).error;\r\n      return errorObj?.message ?? 'Произошла неизвестная ошибка';\r\n    }\r\n\r\n    return 'Произошла неизвестная ошибка';\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ProjectsEffects",
            "id": "injectable-ProjectsEffects-5b7c3a5f07ed4456d3b19f6fcd075b021156417c1fd2fa51bf74808e0efbe84f883cb83c1fbf83565132c5bded725c1d27ce5f9e15cc92b48a53eb291dacf07a",
            "file": "src/app/features/projects/store/projects.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "createProject$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProjectsActions.createProject),\n      mergeMap(({ project }) => {\n        // Здесь будет реальный API вызов\n        const newProject: Project = {\n          ...project,\n          id: Date.now().toString(),\n          name: project.name ?? '',\n          description: project.description ?? '',\n          status: project.status ?? 'active',\n          ownerId: project.ownerId ?? '',\n          members: project.members ?? [],\n          settings: project.settings ?? {\n            allowGuestAccess: false,\n            defaultTaskPriority: 'medium',\n            autoAssignTasks: false,\n            requireTimeTracking: false\n          },\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n\n        return of(newProject).pipe(\n          map(createdProject => {\n            this.notificationService.success('Успех', 'Проект создан');\n            return ProjectsActions.createProjectSuccess({ project: createdProject });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось создать проект');\n            }\n            return of(ProjectsActions.createProjectFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "deleteProject$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProjectsActions.deleteProject),\n      mergeMap(({ projectId }) => {\n        // Здесь будет реальный API вызов\n        return of(projectId).pipe(\n          map(id => {\n            this.notificationService.success('Успех', 'Проект удален');\n            return ProjectsActions.deleteProjectSuccess({ projectId: id });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось удалить проект');\n            }\n            return of(ProjectsActions.deleteProjectFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 157
                },
                {
                    "name": "loadProjects$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProjectsActions.loadProjects),\n      mergeMap(() => {\n        // Здесь будет реальный API вызов\n        // Пока используем моковые данные\n        const mockProjects = [\n          {\n            id: '1',\n            name: 'Веб-сайт компании',\n            description: 'Разработка корпоративного сайта',\n            status: 'active' as const,\n            ownerId: 'user1',\n            members: ['user1', 'user2'],\n            settings: {\n              allowGuestAccess: false,\n              defaultTaskPriority: 'medium' as const,\n              autoAssignTasks: true,\n              requireTimeTracking: true\n            },\n            createdAt: new Date(),\n            updatedAt: new Date()\n          },\n          {\n            id: '2',\n            name: 'Мобильное приложение',\n            description: 'iOS и Android приложение',\n            status: 'active' as const,\n            ownerId: 'user1',\n            members: ['user1', 'user3'],\n            settings: {\n              allowGuestAccess: true,\n              defaultTaskPriority: 'high' as const,\n              autoAssignTasks: false,\n              requireTimeTracking: true\n            },\n            createdAt: new Date(),\n            updatedAt: new Date()\n          }\n        ];\n\n        return of(mockProjects).pipe(\n          map(projects => ProjectsActions.loadProjectsSuccess({ projects })),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось загрузить проекты');\n            }\n            return of(ProjectsActions.loadProjectsFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "updateProject$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProjectsActions.updateProject),\n      mergeMap(({ project }) => {\n        // Здесь будет реальный API вызов\n        const updatedProject: Project = {\n          ...project,\n          name: project.name ?? '',\n          description: project.description ?? '',\n          status: project.status ?? 'active',\n          ownerId: project.ownerId ?? '',\n          members: project.members ?? [],\n          settings: project.settings ?? {\n            allowGuestAccess: false,\n            defaultTaskPriority: 'medium',\n            autoAssignTasks: false,\n            requireTimeTracking: false\n          },\n          createdAt: project.createdAt ?? new Date(),\n          updatedAt: new Date()\n        };\n\n        return of(updatedProject).pipe(\n          map(project => {\n            this.notificationService.success('Успех', 'Проект обновлен');\n            return ProjectsActions.updateProjectSuccess({ project });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось обновить проект');\n            }\n            return of(ProjectsActions.updateProjectFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { Store } from '@ngrx/store';\nimport { of } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\n\nimport * as ProjectsActions from './projects.actions';\nimport { NotificationService } from '@services';\nimport { Project } from '@models';\n\n\n\n@Injectable()\nexport class ProjectsEffects {\n  private readonly actions$ = inject(Actions);\n  private readonly store = inject(Store);\n  private readonly notificationService = inject(NotificationService);\n\n  // Загрузка проектов\n  loadProjects$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProjectsActions.loadProjects),\n      mergeMap(() => {\n        // Здесь будет реальный API вызов\n        // Пока используем моковые данные\n        const mockProjects = [\n          {\n            id: '1',\n            name: 'Веб-сайт компании',\n            description: 'Разработка корпоративного сайта',\n            status: 'active' as const,\n            ownerId: 'user1',\n            members: ['user1', 'user2'],\n            settings: {\n              allowGuestAccess: false,\n              defaultTaskPriority: 'medium' as const,\n              autoAssignTasks: true,\n              requireTimeTracking: true\n            },\n            createdAt: new Date(),\n            updatedAt: new Date()\n          },\n          {\n            id: '2',\n            name: 'Мобильное приложение',\n            description: 'iOS и Android приложение',\n            status: 'active' as const,\n            ownerId: 'user1',\n            members: ['user1', 'user3'],\n            settings: {\n              allowGuestAccess: true,\n              defaultTaskPriority: 'high' as const,\n              autoAssignTasks: false,\n              requireTimeTracking: true\n            },\n            createdAt: new Date(),\n            updatedAt: new Date()\n          }\n        ];\n\n        return of(mockProjects).pipe(\n          map(projects => ProjectsActions.loadProjectsSuccess({ projects })),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось загрузить проекты');\n            }\n            return of(ProjectsActions.loadProjectsFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Создание проекта\n  createProject$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProjectsActions.createProject),\n      mergeMap(({ project }) => {\n        // Здесь будет реальный API вызов\n        const newProject: Project = {\n          ...project,\n          id: Date.now().toString(),\n          name: project.name ?? '',\n          description: project.description ?? '',\n          status: project.status ?? 'active',\n          ownerId: project.ownerId ?? '',\n          members: project.members ?? [],\n          settings: project.settings ?? {\n            allowGuestAccess: false,\n            defaultTaskPriority: 'medium',\n            autoAssignTasks: false,\n            requireTimeTracking: false\n          },\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n\n        return of(newProject).pipe(\n          map(createdProject => {\n            this.notificationService.success('Успех', 'Проект создан');\n            return ProjectsActions.createProjectSuccess({ project: createdProject });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось создать проект');\n            }\n            return of(ProjectsActions.createProjectFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Обновление проекта\n  updateProject$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProjectsActions.updateProject),\n      mergeMap(({ project }) => {\n        // Здесь будет реальный API вызов\n        const updatedProject: Project = {\n          ...project,\n          name: project.name ?? '',\n          description: project.description ?? '',\n          status: project.status ?? 'active',\n          ownerId: project.ownerId ?? '',\n          members: project.members ?? [],\n          settings: project.settings ?? {\n            allowGuestAccess: false,\n            defaultTaskPriority: 'medium',\n            autoAssignTasks: false,\n            requireTimeTracking: false\n          },\n          createdAt: project.createdAt ?? new Date(),\n          updatedAt: new Date()\n        };\n\n        return of(updatedProject).pipe(\n          map(project => {\n            this.notificationService.success('Успех', 'Проект обновлен');\n            return ProjectsActions.updateProjectSuccess({ project });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось обновить проект');\n            }\n            return of(ProjectsActions.updateProjectFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Удаление проекта\n  deleteProject$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(ProjectsActions.deleteProject),\n      mergeMap(({ projectId }) => {\n        // Здесь будет реальный API вызов\n        return of(projectId).pipe(\n          map(id => {\n            this.notificationService.success('Успех', 'Проект удален');\n            return ProjectsActions.deleteProjectSuccess({ projectId: id });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось удалить проект');\n            }\n            return of(ProjectsActions.deleteProjectFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SettingsService",
            "id": "injectable-SettingsService-f29cda4ec047f5f24616fe530a90c14e5f929409d61a3f3dc6cc1110b6b2abf487af9d1a8325c2a51eb355e18d29eecdd558cc60d64248ac26ddc654e5d083e0",
            "file": "src/app/features/settings/services/settings.service.ts",
            "properties": [
                {
                    "name": "_error",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_isLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_profile",
                    "defaultValue": "signal<UserProfile | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "this._error.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "this._isLoading.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "profile",
                    "defaultValue": "this._profile.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clearError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<UserProfile>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "updateAvatar",
                    "args": [
                        {
                            "name": "_request",
                            "type": "UpdateAvatarRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<literal type>",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_request",
                            "type": "UpdateAvatarRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateAvatarInState",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateAvatarRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "UpdateAvatarRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProfile",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<UserProfile | null>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "UpdateProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateProfileInState",
                    "args": [
                        {
                            "name": "request",
                            "type": "UpdateProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "UpdateProfileRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\nimport { Observable, of, delay } from 'rxjs';\nimport { UserProfile, UpdateProfileRequest, UpdateAvatarRequest } from '../models/user-profile.model';\n\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SettingsService {\n  // Signal-based state для профиля\n  private readonly _profile = signal<UserProfile | null>(null);\n  private readonly _isLoading = signal(false);\n  private readonly _error = signal<string | null>(null);\n\n  // Public signals\n  readonly profile = this._profile.asReadonly();\n  readonly isLoading = this._isLoading.asReadonly();\n  readonly error = this._error.asReadonly();\n\n  constructor() {\n    // Инициализация с моковыми данными\n    this.loadProfile();\n  }\n\n  // Получить профиль пользователя\n  getProfile(): Observable<UserProfile> {\n    this._isLoading.set(true);\n    this._error.set(null);\n\n    // Моковые данные для демонстрации\n    const mockProfile: UserProfile = {\n      id: '1',\n      username: 'john_doe',\n      email: 'john.doe@example.com',\n      firstName: 'John',\n      lastName: 'Doe',\n      avatar: 'https://via.placeholder.com/150/3498db/ffffff?text=JD',\n      lastLogin: new Date('2024-01-15T10:30:00Z'),\n      createdAt: new Date('2023-01-01T00:00:00Z'),\n      updatedAt: new Date('2024-01-10T15:45:00Z')\n    };\n\n    return of(mockProfile).pipe(\n      delay(800) // Имитация задержки сети\n    );\n  }\n\n  // Обновить профиль\n  updateProfile(request: UpdateProfileRequest): Observable<UserProfile | null> {\n    this._isLoading.set(true);\n    this._error.set(null);\n\n    const currentProfile = this._profile();\n    if (!currentProfile) {\n      this._error.set('Профиль не найден');\n      this._isLoading.set(false);\n      return of(null);\n    }\n\n    const updatedProfile: UserProfile = {\n      ...currentProfile,\n      ...request,\n      updatedAt: new Date()\n    };\n\n    return of(updatedProfile).pipe(\n      delay(1000) // Имитация задержки сети\n    );\n  }\n\n  // Обновить аватар\n  updateAvatar(_request: UpdateAvatarRequest): Observable<{ avatarUrl: string }> {\n    this._isLoading.set(true);\n    this._error.set(null);\n\n    // Имитация загрузки файла\n    return of({ avatarUrl: 'https://via.placeholder.com/150/27ae60/ffffff?text=NEW' }).pipe(\n      delay(1500)\n    );\n  }\n\n  // Загрузить профиль в state\n  private loadProfile(): void {\n    this.getProfile().subscribe({\n      next: (profile) => {\n        this._profile.set(profile);\n        this._isLoading.set(false);\n      },\n      error: (error) => {\n        this._error.set(error.message ?? 'Ошибка загрузки профиля');\n        this._isLoading.set(false);\n      }\n    });\n  }\n\n  // Обновить профиль в state\n  updateProfileInState(request: UpdateProfileRequest): void {\n    this.updateProfile(request).subscribe({\n      next: (profile) => {\n        this._profile.set(profile);\n        this._isLoading.set(false);\n      },\n      error: (error) => {\n        this._error.set(error.message ?? 'Ошибка обновления профиля');\n        this._isLoading.set(false);\n      }\n    });\n  }\n\n  // Обновить аватар в state\n  updateAvatarInState(request: UpdateAvatarRequest): void {\n    this.updateAvatar(request).subscribe({\n      next: (result) => {\n        const currentProfile = this._profile();\n        if (currentProfile) {\n          this._profile.set({\n            ...currentProfile,\n            avatar: result.avatarUrl,\n            updatedAt: new Date()\n          });\n        }\n        this._isLoading.set(false);\n      },\n      error: (error) => {\n        this._error.set(error.message ?? 'Ошибка обновления аватара');\n        this._isLoading.set(false);\n      }\n    });\n  }\n\n  // Очистить ошибки\n  clearError(): void {\n    this._error.set(null);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 19
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TasksEffects",
            "id": "injectable-TasksEffects-de31e7a02c64fb43915efcfff4449bc7256c620c6ea8954b1a24cdf2a031c4eb7818e33f2cd6a692b45b129300caa531501155162e41689dcc87dbba854cd871",
            "file": "src/app/features/tasks/store/tasks.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "createTask$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.createTask),\n      mergeMap(({ task }) => {\n        // Здесь будет реальный API вызов\n        const newTask: Task = {\n          ...task,\n          id: Date.now().toString(),\n          title: task.title ?? '',\n          description: task.description ?? '',\n          status: task.status ?? 'backlog',\n          priority: task.priority ?? 'medium',\n          projectId: task.projectId ?? '',\n          assigneeId: task.assigneeId,\n          creatorId: task.creatorId ?? '',\n          labels: task.labels ?? [],\n          subtasks: task.subtasks ?? [],\n          timeSpent: task.timeSpent ?? 0,\n          estimatedTime: task.estimatedTime,\n          dueDate: task.dueDate,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n\n        return of(newTask).pipe(\n          map(createdTask => {\n            this.notificationService.success('Успех', 'Задача создана');\n            return TasksActions.createTaskSuccess({ task: createdTask });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось создать задачу');\n            }\n            return of(TasksActions.createTaskFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "deleteTask$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.deleteTask),\n      mergeMap(({ taskId }) => {\n        // Здесь будет реальный API вызов\n        return of(taskId).pipe(\n          map(id => {\n            this.notificationService.success('Успех', 'Задача удалена');\n            return TasksActions.deleteTaskSuccess({ taskId: id });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось удалить задачу');\n            }\n            return of(TasksActions.deleteTaskFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 159
                },
                {
                    "name": "loadTasks$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.loadTasks),\n      mergeMap(() => {\n        // Здесь будет реальный API вызов\n        // Пока используем моковые данные\n        const mockTasks: Task[] = [\n          {\n            id: '1',\n            title: 'Создать дизайн',\n            description: 'Разработать макет главной страницы',\n            status: 'in-progress',\n            priority: 'high',\n            projectId: '1',\n            assigneeId: 'user1',\n            creatorId: 'user1',\n            labels: ['design', 'frontend'],\n            subtasks: [],\n            timeSpent: 120,\n            estimatedTime: 240,\n            dueDate: new Date('2024-02-15'),\n            createdAt: new Date(),\n            updatedAt: new Date()\n          },\n          {\n            id: '2',\n            title: 'Настроить API',\n            description: 'Создать REST API endpoints',\n            status: 'backlog',\n            priority: 'medium',\n            projectId: '1',\n            assigneeId: 'user2',\n            creatorId: 'user1',\n            labels: ['backend', 'api'],\n            subtasks: [],\n            timeSpent: 0,\n            estimatedTime: 480,\n            dueDate: new Date('2024-02-20'),\n            createdAt: new Date(),\n            updatedAt: new Date()\n          }\n        ];\n\n        return of(mockTasks).pipe(\n          map(tasks => TasksActions.loadTasksSuccess({ tasks })),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось загрузить задачи');\n            }\n            return of(TasksActions.loadTasksFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "updateTask$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.updateTask),\n      mergeMap(({ task }) => {\n        // Здесь будет реальный API вызов\n        const updatedTask: Task = {\n          ...task,\n          title: task.title ?? '',\n          description: task.description ?? '',\n          status: task.status ?? 'backlog',\n          priority: task.priority ?? 'medium',\n          projectId: task.projectId ?? '',\n          assigneeId: task.assigneeId,\n          creatorId: task.creatorId ?? '',\n          labels: task.labels ?? [],\n          subtasks: task.subtasks ?? [],\n          timeSpent: task.timeSpent ?? 0,\n          estimatedTime: task.estimatedTime,\n          dueDate: task.dueDate,\n          createdAt: task.createdAt ?? new Date(),\n          updatedAt: new Date()\n        };\n\n        return of(updatedTask).pipe(\n          map(task => {\n            this.notificationService.success('Успех', 'Задача обновлена');\n            return TasksActions.updateTaskSuccess({ task });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось обновить задачу');\n            }\n            return of(TasksActions.updateTaskFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\n\nimport * as TasksActions from './tasks.actions';\nimport { NotificationService } from '@services';\nimport { Task } from '@models';\n\n\n\n@Injectable()\nexport class TasksEffects {\n  private readonly actions$ = inject(Actions);\n  private readonly notificationService = inject(NotificationService);\n\n  // Загрузка задач\n  loadTasks$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.loadTasks),\n      mergeMap(() => {\n        // Здесь будет реальный API вызов\n        // Пока используем моковые данные\n        const mockTasks: Task[] = [\n          {\n            id: '1',\n            title: 'Создать дизайн',\n            description: 'Разработать макет главной страницы',\n            status: 'in-progress',\n            priority: 'high',\n            projectId: '1',\n            assigneeId: 'user1',\n            creatorId: 'user1',\n            labels: ['design', 'frontend'],\n            subtasks: [],\n            timeSpent: 120,\n            estimatedTime: 240,\n            dueDate: new Date('2024-02-15'),\n            createdAt: new Date(),\n            updatedAt: new Date()\n          },\n          {\n            id: '2',\n            title: 'Настроить API',\n            description: 'Создать REST API endpoints',\n            status: 'backlog',\n            priority: 'medium',\n            projectId: '1',\n            assigneeId: 'user2',\n            creatorId: 'user1',\n            labels: ['backend', 'api'],\n            subtasks: [],\n            timeSpent: 0,\n            estimatedTime: 480,\n            dueDate: new Date('2024-02-20'),\n            createdAt: new Date(),\n            updatedAt: new Date()\n          }\n        ];\n\n        return of(mockTasks).pipe(\n          map(tasks => TasksActions.loadTasksSuccess({ tasks })),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось загрузить задачи');\n            }\n            return of(TasksActions.loadTasksFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Создание задачи\n  createTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.createTask),\n      mergeMap(({ task }) => {\n        // Здесь будет реальный API вызов\n        const newTask: Task = {\n          ...task,\n          id: Date.now().toString(),\n          title: task.title ?? '',\n          description: task.description ?? '',\n          status: task.status ?? 'backlog',\n          priority: task.priority ?? 'medium',\n          projectId: task.projectId ?? '',\n          assigneeId: task.assigneeId,\n          creatorId: task.creatorId ?? '',\n          labels: task.labels ?? [],\n          subtasks: task.subtasks ?? [],\n          timeSpent: task.timeSpent ?? 0,\n          estimatedTime: task.estimatedTime,\n          dueDate: task.dueDate,\n          createdAt: new Date(),\n          updatedAt: new Date()\n        };\n\n        return of(newTask).pipe(\n          map(createdTask => {\n            this.notificationService.success('Успех', 'Задача создана');\n            return TasksActions.createTaskSuccess({ task: createdTask });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось создать задачу');\n            }\n            return of(TasksActions.createTaskFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Обновление задачи\n  updateTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.updateTask),\n      mergeMap(({ task }) => {\n        // Здесь будет реальный API вызов\n        const updatedTask: Task = {\n          ...task,\n          title: task.title ?? '',\n          description: task.description ?? '',\n          status: task.status ?? 'backlog',\n          priority: task.priority ?? 'medium',\n          projectId: task.projectId ?? '',\n          assigneeId: task.assigneeId,\n          creatorId: task.creatorId ?? '',\n          labels: task.labels ?? [],\n          subtasks: task.subtasks ?? [],\n          timeSpent: task.timeSpent ?? 0,\n          estimatedTime: task.estimatedTime,\n          dueDate: task.dueDate,\n          createdAt: task.createdAt ?? new Date(),\n          updatedAt: new Date()\n        };\n\n        return of(updatedTask).pipe(\n          map(task => {\n            this.notificationService.success('Успех', 'Задача обновлена');\n            return TasksActions.updateTaskSuccess({ task });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось обновить задачу');\n            }\n            return of(TasksActions.updateTaskFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Удаление задачи\n  deleteTask$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TasksActions.deleteTask),\n      mergeMap(({ taskId }) => {\n        // Здесь будет реальный API вызов\n        return of(taskId).pipe(\n          map(id => {\n            this.notificationService.success('Успех', 'Задача удалена');\n            return TasksActions.deleteTaskSuccess({ taskId: id });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось удалить задачу');\n            }\n            return of(TasksActions.deleteTaskFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TimeTrackingEffects",
            "id": "injectable-TimeTrackingEffects-9ea0f7f7916d5545d27d48daf2036a752f0e3a5cb45fcdf3093507fc9b23064c954ae7f1d4c79278ee12912045e7e20ebb9879a2054a8d57c36021407a298ce7",
            "file": "src/app/features/time-tracking/store/time-tracking.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "createTimeEntry$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(TimeTrackingActions.createTimeEntry),\n      mergeMap(({ timeEntry }) => {\n        // Здесь будет реальный API вызов\n        const newTimeEntry: TimeEntry = {\n          ...timeEntry,\n          id: Date.now().toString(),\n          taskId: timeEntry.taskId ?? '',\n          userId: timeEntry.userId ?? '',\n          startTime: timeEntry.startTime ?? new Date(),\n          endTime: timeEntry.endTime,\n          duration: timeEntry.duration ?? 0,\n          description: timeEntry.description\n        };\n\n        return of(newTimeEntry).pipe(\n          map(createdEntry => {\n            this.notificationService.success('Успех', 'Запись времени создана');\n            return TimeTrackingActions.createTimeEntrySuccess({ timeEntry: createdEntry });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось создать запись времени');\n            }\n            return of(TimeTrackingActions.createTimeEntryFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "deleteTimeEntry$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(TimeTrackingActions.deleteTimeEntry),\n      mergeMap(({ timeEntryId }) => {\n        // Здесь будет реальный API вызов\n        return of(timeEntryId).pipe(\n          map(id => {\n            this.notificationService.success('Успех', 'Запись времени удалена');\n            return TimeTrackingActions.deleteTimeEntrySuccess({ timeEntryId: id });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось удалить запись времени');\n            }\n            return of(TimeTrackingActions.deleteTimeEntryFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "loadTimeEntries$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(TimeTrackingActions.loadTimeEntries),\n      mergeMap(() => {\n        // Здесь будет реальный API вызов\n        // Пока используем моковые данные\n        const mockTimeEntries: TimeEntry[] = [\n          {\n            id: '1',\n            taskId: '1',\n            userId: 'user1',\n            startTime: new Date('2024-02-10T09:00:00'),\n            endTime: new Date('2024-02-10T11:00:00'),\n            duration: 120,\n            description: 'Работа над дизайном'\n          },\n          {\n            id: '2',\n            taskId: '1',\n            userId: 'user1',\n            startTime: new Date('2024-02-11T14:00:00'),\n            endTime: new Date('2024-02-11T16:30:00'),\n            duration: 150,\n            description: 'Доработка макета'\n          }\n        ];\n\n        return of(mockTimeEntries).pipe(\n          map(timeEntries => TimeTrackingActions.loadTimeEntriesSuccess({ timeEntries })),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось загрузить записи времени');\n            }\n            return of(TimeTrackingActions.loadTimeEntriesFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "updateTimeEntry$",
                    "defaultValue": "createEffect(() =>\n    this.actions$.pipe(\n      ofType(TimeTrackingActions.updateTimeEntry),\n      mergeMap(({ timeEntry }) => {\n        // Здесь будет реальный API вызов\n        const updatedTimeEntry: TimeEntry = {\n          ...timeEntry,\n          taskId: timeEntry.taskId ?? '',\n          userId: timeEntry.userId ?? '',\n          startTime: timeEntry.startTime ?? new Date(),\n          endTime: timeEntry.endTime,\n          duration: timeEntry.duration ?? 0,\n          description: timeEntry.description\n        };\n\n        return of(updatedTimeEntry).pipe(\n          map(entry => {\n            this.notificationService.success('Успех', 'Запись времени обновлена');\n            return TimeTrackingActions.updateTimeEntrySuccess({ timeEntry: entry });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось обновить запись времени');\n            }\n            return of(TimeTrackingActions.updateTimeEntryFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 94
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { of } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\n\nimport * as TimeTrackingActions from './time-tracking.actions';\nimport { NotificationService } from '@services';\nimport { TimeEntry } from '@models';\n\n\n\n@Injectable()\nexport class TimeTrackingEffects {\n  private readonly actions$ = inject(Actions);\n  private readonly notificationService = inject(NotificationService);\n\n  // Загрузка записей времени\n  loadTimeEntries$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TimeTrackingActions.loadTimeEntries),\n      mergeMap(() => {\n        // Здесь будет реальный API вызов\n        // Пока используем моковые данные\n        const mockTimeEntries: TimeEntry[] = [\n          {\n            id: '1',\n            taskId: '1',\n            userId: 'user1',\n            startTime: new Date('2024-02-10T09:00:00'),\n            endTime: new Date('2024-02-10T11:00:00'),\n            duration: 120,\n            description: 'Работа над дизайном'\n          },\n          {\n            id: '2',\n            taskId: '1',\n            userId: 'user1',\n            startTime: new Date('2024-02-11T14:00:00'),\n            endTime: new Date('2024-02-11T16:30:00'),\n            duration: 150,\n            description: 'Доработка макета'\n          }\n        ];\n\n        return of(mockTimeEntries).pipe(\n          map(timeEntries => TimeTrackingActions.loadTimeEntriesSuccess({ timeEntries })),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось загрузить записи времени');\n            }\n            return of(TimeTrackingActions.loadTimeEntriesFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Создание записи времени\n  createTimeEntry$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TimeTrackingActions.createTimeEntry),\n      mergeMap(({ timeEntry }) => {\n        // Здесь будет реальный API вызов\n        const newTimeEntry: TimeEntry = {\n          ...timeEntry,\n          id: Date.now().toString(),\n          taskId: timeEntry.taskId ?? '',\n          userId: timeEntry.userId ?? '',\n          startTime: timeEntry.startTime ?? new Date(),\n          endTime: timeEntry.endTime,\n          duration: timeEntry.duration ?? 0,\n          description: timeEntry.description\n        };\n\n        return of(newTimeEntry).pipe(\n          map(createdEntry => {\n            this.notificationService.success('Успех', 'Запись времени создана');\n            return TimeTrackingActions.createTimeEntrySuccess({ timeEntry: createdEntry });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось создать запись времени');\n            }\n            return of(TimeTrackingActions.createTimeEntryFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Обновление записи времени\n  updateTimeEntry$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TimeTrackingActions.updateTimeEntry),\n      mergeMap(({ timeEntry }) => {\n        // Здесь будет реальный API вызов\n        const updatedTimeEntry: TimeEntry = {\n          ...timeEntry,\n          taskId: timeEntry.taskId ?? '',\n          userId: timeEntry.userId ?? '',\n          startTime: timeEntry.startTime ?? new Date(),\n          endTime: timeEntry.endTime,\n          duration: timeEntry.duration ?? 0,\n          description: timeEntry.description\n        };\n\n        return of(updatedTimeEntry).pipe(\n          map(entry => {\n            this.notificationService.success('Успех', 'Запись времени обновлена');\n            return TimeTrackingActions.updateTimeEntrySuccess({ timeEntry: entry });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось обновить запись времени');\n            }\n            return of(TimeTrackingActions.updateTimeEntryFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n\n  // Удаление записи времени\n  deleteTimeEntry$ = createEffect(() =>\n    this.actions$.pipe(\n      ofType(TimeTrackingActions.deleteTimeEntry),\n      mergeMap(({ timeEntryId }) => {\n        // Здесь будет реальный API вызов\n        return of(timeEntryId).pipe(\n          map(id => {\n            this.notificationService.success('Успех', 'Запись времени удалена');\n            return TimeTrackingActions.deleteTimeEntrySuccess({ timeEntryId: id });\n          }),\n          catchError(error => {\n            // Показываем уведомление только для 4xx ошибок (кроме 0 и 5xx)\n            if (error.status && error.status >= 400 && error.status < 500) {\n              this.notificationService.error('Ошибка', 'Не удалось удалить запись времени');\n            }\n            return of(TimeTrackingActions.deleteTimeEntryFailure({ error: error.message }));\n          })\n        );\n      })\n    )\n  );\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AdminGuard",
            "id": "injectable-AdminGuard-a2dac73cbb7b3cb965017c3ca7dff41986964cbf403f47ab2e32412c8cf85b0d1cbda1b30e4c341a2016104171e81956992d5a94f482f2731c510a889ebe6f0a",
            "file": "src/app/core/guards/admin.guard.ts",
            "properties": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '@services';\n\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AdminGuard implements CanActivate {\n  private readonly authService = inject(AuthService);\n  private readonly router = inject(Router);\n\n  canActivate(): boolean {\n    if (this.authService.isAdmin()) {\n      return true;\n    }\n\n    this.router.navigate(['/dashboard']);\n    return false;\n  }\n}\n",
            "extends": [],
            "type": "guard"
        },
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-90aca751fabab9e2d3a3daac6b11f7e4ec41bd5c3a3310331a6127e780c9ef9a7925ffb51a4be29ab72a4b8ce56eeac56e884ce6e8c97e5e7270e0e7a863a71e",
            "file": "src/app/core/guards/auth.guard.ts",
            "properties": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '@services';\n\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  private readonly authService = inject(AuthService);\n  private readonly router = inject(Router);\n\n  canActivate(): boolean {\n    // Проверяем валидность токена\n    if (!this.authService.checkTokenValidity()) {\n      this.router.navigate(['/auth/login']);\n      return false;\n    }\n\n    // Проверяем аутентификацию\n    if (this.authService.isAuthenticated()) {\n      return true;\n    }\n\n    this.router.navigate(['/auth/login']);\n    return false;\n  }\n}\n",
            "extends": [],
            "type": "guard"
        },
        {
            "name": "GuestGuard",
            "id": "injectable-GuestGuard-2f3205700ff3e945629b4af6738956910d96a324298b69b2cb8bcbe4d25b0ff11749b1b92e98740a3e053a2e983b854c5406c62e2001b4385a58aa0da9cb472a",
            "file": "src/app/core/guards/guest.guard.ts",
            "properties": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from '@services';\n\n\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GuestGuard implements CanActivate {\n  private readonly authService = inject(AuthService);\n  private readonly router = inject(Router);\n\n  canActivate(): boolean {\n    // Если пользователь аутентифицирован, перенаправляем на dashboard\n    if (this.authService.isAuthenticated() && this.authService.checkTokenValidity()) {\n      this.router.navigate(['/dashboard']);\n      return false;\n    }\n\n    return true;\n  }\n}\n",
            "extends": [],
            "type": "guard"
        },
        {
            "name": "RoleGuard",
            "id": "injectable-RoleGuard-3d4996cbeb30738bc8d94e9dbb054283c90fb5fc0ae6b85fd05bb88fefe2b26c345f28e8a23cceebe035b752b2801f6af36b773b0d96db8beebea759e94719a9",
            "file": "src/app/core/guards/role.guard.ts",
            "properties": [
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<boolean | UrlTree>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { CanActivate, Router, UrlTree, ActivatedRouteSnapshot } from '@angular/router';\nimport { Store } from '@ngrx/store';\nimport { Observable, map, first } from 'rxjs';\n\nimport * as AuthSelectors from '@features/auth/store/auth.selectors';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class RoleGuard implements CanActivate {\n  private readonly store = inject(Store);\n  private readonly router = inject(Router);\n\n  canActivate(route: ActivatedRouteSnapshot): Observable<boolean | UrlTree> {\n    const requiredRoles = route.data['roles'] as string[];\n\n    return this.store.select(AuthSelectors.selectUserRole).pipe(\n      first(),\n      map(userRole => {\n        if (!userRole) {\n          return this.router.createUrlTree(['/auth/login']);\n        }\n\n        if (requiredRoles && requiredRoles.length > 0) {\n          if (requiredRoles.includes(userRole)) {\n            return true;\n          } else {\n            // Если у пользователя нет нужной роли, перенаправляем на главную\n            return this.router.createUrlTree(['/dashboard']);\n          }\n        }\n\n        return true;\n      })\n    );\n  }\n}\n",
            "extends": [],
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "DateUtils",
            "id": "class-DateUtils-808ddc87d8e130fcbe9b3d4f1d447207ace98c093bbc853a8f832f359fd2ac7a228fe2738f62d2f9f782b3b687a98e7698bf54e0c61c60eb2b84771cd887e913",
            "file": "src/app/core/utils/date.utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DateUtils {\r\n  static formatDate(date: Date): string {\r\n    return date.toLocaleDateString('ru-RU');\r\n  }\r\n\r\n  static formatDateTime(date: Date): string {\r\n    return date.toLocaleString('ru-RU');\r\n  }\r\n\r\n  static formatTime(minutes: number): string {\r\n    const hours = Math.floor(minutes / 60);\r\n    const mins = minutes % 60;\r\n    return `${hours.toString().padStart(2, '0')}:${mins.toString().padStart(2, '0')}`;\r\n  }\r\n\r\n  static getTimeSpent(startTime: Date, endTime?: Date): number {\r\n    const end = endTime ?? new Date();\r\n    return Math.floor((end.getTime() - startTime.getTime()) / (1000 * 60));\r\n  }\r\n\r\n  static isOverdue(dueDate: Date): boolean {\r\n    return new Date() > dueDate;\r\n  }\r\n\r\n  static getDaysUntil(dueDate: Date): number {\r\n    const now = new Date();\r\n    const diffTime = dueDate.getTime() - now.getTime();\r\n    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDateTime",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 6,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatTime",
                    "args": [
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "minutes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDaysUntil",
                    "args": [
                        {
                            "name": "dueDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "dueDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimeSpent",
                    "args": [
                        {
                            "name": "startTime",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endTime",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "startTime",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endTime",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isOverdue",
                    "args": [
                        {
                            "name": "dueDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "dueDate",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "DateUtils",
            "id": "class-DateUtils-34f81b1c21df6f95170a0b5732964b8420a18a293367acebe16117c252b04f8360e496e58beaa69174daf85f7fc65de7d427e377f9337da7059a81e107fe5d95-1",
            "file": "src/app/features/settings/utils/date.utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class DateUtils {\r\n  // Форматирование даты для отображения\r\n  static formatDate(date: Date | string): string {\r\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n\r\n    if (isNaN(dateObj.getTime())) {\r\n      return 'Неизвестно';\r\n    }\r\n\r\n    const now = new Date();\r\n    const diffInMs = now.getTime() - dateObj.getTime();\r\n    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));\r\n    const diffInHours = Math.floor(diffInMs / (1000 * 60 * 60));\r\n    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\r\n\r\n    // Сегодня\r\n    if (diffInDays === 0) {\r\n      if (diffInHours === 0) {\r\n        if (diffInMinutes < 1) {\r\n          return 'Только что';\r\n        }\r\n        return `${diffInMinutes} мин. назад`;\r\n      }\r\n      return `${diffInHours} ч. назад`;\r\n    }\r\n\r\n    // Вчера\r\n    if (diffInDays === 1) {\r\n      return 'Вчера';\r\n    }\r\n\r\n    // Неделя назад\r\n    if (diffInDays < 7) {\r\n      return `${diffInDays} дн. назад`;\r\n    }\r\n\r\n    // Форматирование полной даты\r\n    return dateObj.toLocaleDateString('ru-RU', {\r\n      year: 'numeric',\r\n      month: 'long',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  }\r\n\r\n  // Форматирование времени\r\n  static formatTime(date: Date | string): string {\r\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n\r\n    if (isNaN(dateObj.getTime())) {\r\n      return '--:--';\r\n    }\r\n\r\n    return dateObj.toLocaleTimeString('ru-RU', {\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  }\r\n\r\n  // Форматирование даты и времени\r\n  static formatDateTime(date: Date | string): string {\r\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n\r\n    if (isNaN(dateObj.getTime())) {\r\n      return 'Неизвестно';\r\n    }\r\n\r\n    return dateObj.toLocaleString('ru-RU', {\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n      hour: '2-digit',\r\n      minute: '2-digit'\r\n    });\r\n  }\r\n\r\n  // Проверка, является ли дата сегодняшней\r\n  static isToday(date: Date | string): boolean {\r\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n    const today = new Date();\r\n\r\n    return dateObj.toDateString() === today.toDateString();\r\n  }\r\n\r\n  // Получить относительное время\r\n  static getRelativeTime(date: Date | string): string {\r\n    const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n\r\n    if (isNaN(dateObj.getTime())) {\r\n      return 'Неизвестно';\r\n    }\r\n\r\n    const now = new Date();\r\n    const diffInMs = now.getTime() - dateObj.getTime();\r\n    const diffInSeconds = Math.floor(diffInMs / 1000);\r\n    const diffInMinutes = Math.floor(diffInSeconds / 60);\r\n    const diffInHours = Math.floor(diffInMinutes / 60);\r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n\r\n    if (diffInSeconds < 60) {\r\n      return 'только что';\r\n    } else if (diffInMinutes < 60) {\r\n      return `${diffInMinutes} мин. назад`;\r\n    } else if (diffInHours < 24) {\r\n      return `${diffInHours} ч. назад`;\r\n    } else if (diffInDays < 7) {\r\n      return `${diffInDays} дн. назад`;\r\n    } else {\r\n      return this.formatDate(dateObj);\r\n    }\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "formatDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 3,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDateTime",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatTime",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRelativeTime",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isToday",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "DateUtils-1"
        },
        {
            "name": "ProfileValidators",
            "id": "class-ProfileValidators-90dfc604269adbb1bd02198898627f6a7765147b994e156bc4aae4da1729170132f6809aeaf0e8322690200c3928923570bd5458490775efadb098b1908f6cbd",
            "file": "src/app/features/settings/validators/profile.validators.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\r\n\r\nexport class ProfileValidators {\r\n  // Валидатор для username\r\n  static username(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const value = control.value;\r\n\r\n      if (!value) {\r\n        return { required: 'Имя пользователя обязательно' };\r\n      }\r\n\r\n      if (value.length < 3) {\r\n        return { minlength: 'Имя пользователя должно содержать минимум 3 символа' };\r\n      }\r\n\r\n      if (value.length > 20) {\r\n        return { maxlength: 'Имя пользователя не должно превышать 20 символов' };\r\n      }\r\n\r\n      // Только буквы, цифры и подчеркивания\r\n      const usernameRegex = /^[a-zA-Z0-9_]+$/;\r\n      if (!usernameRegex.test(value)) {\r\n        return { pattern: 'Имя пользователя может содержать только буквы, цифры и подчеркивания' };\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n\r\n  // Валидатор для email\r\n  static email(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const value = control.value;\r\n\r\n      if (!value) {\r\n        return { required: 'Email обязателен' };\r\n      }\r\n\r\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n      if (!emailRegex.test(value)) {\r\n        return { email: 'Введите корректный email адрес' };\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n\r\n  // Валидатор для имени\r\n  static firstName(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const value = control.value;\r\n\r\n      if (!value) {\r\n        return null; // Имя не обязательно\r\n      }\r\n\r\n      if (value.length < 2) {\r\n        return { minlength: 'Имя должно содержать минимум 2 символа' };\r\n      }\r\n\r\n      if (value.length > 50) {\r\n        return { maxlength: 'Имя не должно превышать 50 символов' };\r\n      }\r\n\r\n      // Только буквы, пробелы и дефисы\r\n      const nameRegex = /^[a-zA-Zа-яА-Я\\s-]+$/;\r\n      if (!nameRegex.test(value)) {\r\n        return { pattern: 'Имя может содержать только буквы, пробелы и дефисы' };\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n\r\n  // Валидатор для фамилии\r\n  static lastName(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const value = control.value;\r\n\r\n      if (!value) {\r\n        return null; // Фамилия не обязательна\r\n      }\r\n\r\n      if (value.length < 2) {\r\n        return { minlength: 'Фамилия должна содержать минимум 2 символа' };\r\n      }\r\n\r\n      if (value.length > 50) {\r\n        return { maxlength: 'Фамилия не должна превышать 50 символов' };\r\n      }\r\n\r\n      // Только буквы, пробелы и дефисы\r\n      const nameRegex = /^[a-zA-Zа-яА-Я\\s-]+$/;\r\n      if (!nameRegex.test(value)) {\r\n        return { pattern: 'Фамилия может содержать только буквы, пробелы и дефисы' };\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n\r\n  // Общий валидатор для имени и фамилии\r\n  static name(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const value = control.value;\r\n\r\n      if (!value) {\r\n        return null; // Не обязательно\r\n      }\r\n\r\n      if (value.length < 2) {\r\n        return { minlength: 'Минимум 2 символа' };\r\n      }\r\n\r\n      if (value.length > 50) {\r\n        return { maxlength: 'Максимум 50 символов' };\r\n      }\r\n\r\n      // Только буквы, пробелы и дефисы\r\n      const nameRegex = /^[a-zA-Zа-яА-Я\\s-]+$/;\r\n      if (!nameRegex.test(value)) {\r\n        return { pattern: 'Только буквы, пробелы и дефисы' };\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n\r\n  // Валидатор для аватара\r\n  static avatar(): ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n      const file = control.value;\r\n\r\n      if (!file) {\r\n        return null; // Аватар не обязателен\r\n      }\r\n\r\n      // Проверяем, что это файл\r\n      if (!(file instanceof File)) {\r\n        return { invalidFile: 'Выберите файл' };\r\n      }\r\n\r\n      // Проверяем тип файла\r\n      const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];\r\n      if (!allowedTypes.includes(file.type)) {\r\n        return { fileType: 'Поддерживаются только изображения (JPEG, PNG, GIF, WebP)' };\r\n      }\r\n\r\n      // Проверяем размер файла (максимум 5MB)\r\n      const maxSize = 5 * 1024 * 1024; // 5MB\r\n      if (file.size > maxSize) {\r\n        return { fileSize: 'Размер файла не должен превышать 5MB' };\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n}\r\n",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "avatar",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "email",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "firstName",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "lastName",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "name",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "username",
                    "args": [],
                    "optional": false,
                    "returnType": "ValidatorFn",
                    "typeParameters": [],
                    "line": 5,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "ValidationUtils",
            "id": "class-ValidationUtils-a1ab6c1bd84bd50c97dc5100cf3dc78f5a6fe8c2871ff091ee7d7581fe695f11b59e8ee003c2fc34851689653dc8ac62d991f35bc78c82b1096ba14dec122187",
            "file": "src/app/core/utils/validation.utils.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export class ValidationUtils {\r\n  static isValidEmail(email: string): boolean {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  static isValidPassword(password: string): boolean {\r\n    // Минимум 8 символов, хотя бы одна буква и цифра\r\n    const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/;\r\n    return passwordRegex.test(password);\r\n  }\r\n\r\n  static isValidUsername(username: string): boolean {\r\n    // 3-20 символов, только буквы, цифры и подчеркивания\r\n    const usernameRegex = /^[a-zA-Z0-9_]{3,20}$/;\r\n    return usernameRegex.test(username);\r\n  }\r\n\r\n  static getPasswordStrength(password: string): 'weak' | 'medium' | 'strong' {\r\n    if (password.length < 6) return 'weak';\r\n    if (password.length < 10) return 'medium';\r\n    return 'strong';\r\n  }\r\n\r\n  static validateTaskTitle(title: string): string | null {\r\n    if (!title || title.trim().length === 0) {\r\n      return 'Название задачи обязательно';\r\n    }\r\n    if (title.trim().length < 3) {\r\n      return 'Название должно содержать минимум 3 символа';\r\n    }\r\n    if (title.trim().length > 100) {\r\n      return 'Название не должно превышать 100 символов';\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static validateProjectName(name: string): string | null {\r\n    if (!name || name.trim().length === 0) {\r\n      return 'Название проекта обязательно';\r\n    }\r\n    if (name.trim().length < 2) {\r\n      return 'Название должно содержать минимум 2 символа';\r\n    }\r\n    if (name.trim().length > 50) {\r\n      return 'Название не должно превышать 50 символов';\r\n    }\r\n    return null;\r\n  }\r\n} ",
            "inputsClass": [],
            "outputsClass": [],
            "properties": [],
            "methods": [
                {
                    "name": "getPasswordStrength",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "\"weak\" | \"medium\" | \"strong\"",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidEmail",
                    "args": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 2,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "email",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidPassword",
                    "args": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "password",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isValidUsername",
                    "args": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateProjectName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateTaskTitle",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AdvancedSettingsComponent",
            "id": "component-AdvancedSettingsComponent-c55f422a3d978543d50e6f39725aed294ee32c964645881d0901f57a540f029d2a5b03e822b4e220a5ccf0474c0aeee16847b200456df8fd8680b6bbdb6ca2a8",
            "file": "src/app/features/settings/components/advanced-settings/advanced-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-advanced-settings",
            "styleUrls": [],
            "styles": [
                "\n    .advanced-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"advanced-settings\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <i-lucide [img]=\"SettingsIcon\" [size]=\"24\"></i-lucide>\n        Дополнительные настройки\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Здесь будут дополнительные настройки и управление данными</p>\n      <p>Этап 8: Дополнительно - в разработке</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "SettingsIcon",
                    "defaultValue": "Settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { LucideAngularModule, Settings } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-advanced-settings',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, LucideAngularModule],\r\n  template: `\r\n    <div class=\"advanced-settings\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            <i-lucide [img]=\"SettingsIcon\" [size]=\"24\"></i-lucide>\r\n            Дополнительные настройки\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <p>Здесь будут дополнительные настройки и управление данными</p>\r\n          <p>Этап 8: Дополнительно - в разработке</p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .advanced-settings {\r\n      padding: 1rem 0;\r\n    }\r\n\r\n    mat-card {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-header {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-title {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.75rem;\r\n      font-size: 1.25rem;\r\n      color: #2c3e50;\r\n      margin: 0;\r\n\r\n      i-lucide {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-shrink: 0;\r\n      }\r\n    }\r\n\r\n    p {\r\n      color: #6c757d;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class AdvancedSettingsComponent {\r\n  // Icons\r\n  readonly SettingsIcon = Settings;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .advanced-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "AnalyticsComponent",
            "id": "component-AnalyticsComponent-a4d543d75f050b58accbfa20272ed7870c0685bc872cc9da2d8e541b632dc1606817cee070ab16832e799788eba0c27a9b7197dd88680eb487c2f7e6d4c0f9a9",
            "file": "src/app/features/analytics/components/analytics/analytics.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-analytics",
            "styleUrls": [
                "./analytics.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./analytics.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ChartColumn",
                    "defaultValue": "ChartColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "FileText",
                    "defaultValue": "FileText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isMobileMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "Target",
                    "defaultValue": "Target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "TrendingUp",
                    "defaultValue": "TrendingUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject, OnDestroy, HostListener } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '@services';\r\nimport { User } from '@models';\r\nimport { Subscription } from 'rxjs';\r\nimport { LayoutComponent } from '../../../../shared/components/layout';\r\nimport { LucideAngularModule, TrendingUp, ChartColumn, FileText, Target } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-analytics',\r\n  templateUrl: './analytics.component.html',\r\n  styleUrls: ['./analytics.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, LayoutComponent, LucideAngularModule]\r\n})\r\nexport class AnalyticsComponent implements OnInit, OnDestroy {\r\n  private readonly authService = inject(AuthService);\r\n  private readonly router = inject(Router);\r\n\r\n  isAuthenticated = false;\r\n  currentUser: User | null = null;\r\n  private authSubscription?: Subscription;\r\n  private userSubscription?: Subscription;\r\n\r\n\r\n\r\n  // Mobile menu state\r\n  isMobileMenuOpen = false;\r\n\r\n  // Lucide icons\r\n  readonly TrendingUp = TrendingUp;\r\n  readonly ChartColumn = ChartColumn;\r\n  readonly FileText = FileText;\r\n  readonly Target = Target;\r\n\r\n  ngOnInit(): void {\r\n    this.authSubscription = this.authService.isAuthenticated$.subscribe(isAuth => {\r\n      this.isAuthenticated = isAuth;\r\n    });\r\n\r\n    this.userSubscription = this.authService.currentUser$.subscribe(user => {\r\n      this.currentUser = user;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.authSubscription?.unsubscribe();\r\n    this.userSubscription?.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  changePassword(): void {\r\n    // TODO: Implement change password functionality\r\n  }\r\n\r\n  toggleMobileMenu(): void {\r\n    this.isMobileMenuOpen = !this.isMobileMenuOpen;\r\n  }\r\n\r\n  closeMobileMenu(): void {\r\n    this.isMobileMenuOpen = false;\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n    if (!target.closest('.nav') && this.isMobileMenuOpen) {\r\n      this.isMobileMenuOpen = false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".analytics-container {\r\n  padding: 24px;\r\n}\r\n\r\n// Header styles\r\n.dashboard-header {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: white;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.header-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 1rem 2rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.logo h1 {\r\n  font-size: 1.5rem;\r\n  color: #2c3e50;\r\n  margin: 0;\r\n  font-weight: 600;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  position: relative;\r\n}\r\n\r\n.nav-desktop {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.nav-link {\r\n  text-decoration: none;\r\n  color: #6c757d;\r\n  font-weight: 500;\r\n  transition: color 0.3s ease;\r\n  padding: 0.5rem 0;\r\n  position: relative;\r\n}\r\n\r\n.nav-link:hover,\r\n.nav-link.active {\r\n  color: #3498db;\r\n}\r\n\r\n.nav-link.active::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -1rem;\r\n  left: 0;\r\n  right: 0;\r\n  height: 2px;\r\n  background: #3498db;\r\n}\r\n\r\n// Mobile menu toggle\r\n.mobile-menu-toggle {\r\n  display: none;\r\n  background: none;\r\n  border: none;\r\n  color: #6c757d;\r\n  cursor: pointer;\r\n  padding: 0.5rem;\r\n  border-radius: 6px;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.mobile-menu-toggle:hover {\r\n  background: rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n// Mobile menu\r\n.mobile-menu {\r\n  display: none;\r\n  position: absolute;\r\n  top: 100%;\r\n  right: 0;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  min-width: 200px;\r\n  z-index: 1000;\r\n  margin-top: 8px;\r\n  border: 1px solid rgba(0, 0, 0, 0.08);\r\n  overflow: hidden;\r\n  opacity: 0;\r\n  transform: translateY(-10px);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.mobile-menu.open {\r\n  opacity: 1;\r\n  transform: translateY(0);\r\n}\r\n\r\n.mobile-nav-link {\r\n  display: block;\r\n  padding: 1rem 1.5rem;\r\n  color: #6c757d;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n  transition: background 0.3s ease;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.mobile-nav-link:hover,\r\n.mobile-nav-link.active {\r\n  background: #f8f9fa;\r\n  color: #3498db;\r\n}\r\n\r\n.mobile-nav-link:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n// Main content\r\n.dashboard-main {\r\n  margin-top: 80px;\r\n  min-height: calc(100vh - 80px - 300px);\r\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  padding: 2rem;\r\n}\r\n\r\n.welcome-section {\r\n  max-width: 1200px;\r\n  margin: 0 auto 3rem;\r\n  text-align: center;\r\n}\r\n\r\n.welcome-title {\r\n  font-size: 3rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.welcome-subtitle {\r\n  font-size: 1.2rem;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n// Placeholder content\r\n.placeholder-content {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.placeholder-card {\r\n  background: white;\r\n  border-radius: 16px;\r\n  padding: 3rem;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n.placeholder-icon {\r\n  width: 120px;\r\n  height: 120px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto 2rem;\r\n  color: white;\r\n  position: relative;\r\n}\r\n\r\n.placeholder-icon i-lucide {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 64px;\r\n  height: 64px;\r\n}\r\n\r\n.placeholder-card h2 {\r\n  font-size: 2rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.placeholder-card p {\r\n  font-size: 1.1rem;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n  line-height: 1.6;\r\n}\r\n\r\n.placeholder-features {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 1.5rem;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.feature-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n  padding: 1rem;\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.feature-item:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.feature-item i-lucide {\r\n  color: #3498db;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n\r\n.feature-item span {\r\n  font-weight: 500;\r\n  color: #2c3e50;\r\n}\r\n\r\n// Footer styles\r\n.footer {\r\n  background: #2c3e50;\r\n  color: white;\r\n  padding: 3rem 0 1rem;\r\n  margin-top: auto;\r\n}\r\n\r\n.footer-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 2rem;\r\n}\r\n\r\n.footer-section h4 {\r\n  margin-bottom: 1rem;\r\n  color: #3498db;\r\n}\r\n\r\n.footer-section p {\r\n  color: rgba(255, 255, 255, 0.8);\r\n  line-height: 1.6;\r\n}\r\n\r\n.footer-section a {\r\n  display: block;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  text-decoration: none;\r\n  margin-bottom: 0.5rem;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.footer-section a:hover {\r\n  color: white;\r\n}\r\n\r\n.footer-bottom {\r\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n  padding-top: 1rem;\r\n  text-align: center;\r\n  opacity: 0.8;\r\n  margin-top: 2rem;\r\n}\r\n\r\n// Animations\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(30px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n// Responsive\r\n@media (max-width: 768px) {\r\n  .header-content {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .nav-desktop {\r\n    display: none;\r\n  }\r\n\r\n  .mobile-menu-toggle {\r\n    display: block;\r\n  }\r\n\r\n  .mobile-menu {\r\n    display: block;\r\n  }\r\n\r\n  .dashboard-main {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2.5rem;\r\n  }\r\n\r\n  .placeholder-card {\r\n    padding: 2rem;\r\n  }\r\n\r\n  .placeholder-features {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .footer-content {\r\n    grid-template-columns: 1fr;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .header-content {\r\n    padding: 0.75rem;\r\n  }\r\n\r\n  .logo h1 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .placeholder-card {\r\n    padding: 1.5rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./analytics.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout [showHeader]=\"true\" [showFooter]=\"true\">\r\n\r\n<!-- Main Content -->\r\n<main class=\"dashboard-main\">\r\n  <div class=\"welcome-section\">\r\n    <h1 class=\"welcome-title\">Аналитика</h1>\r\n    <p class=\"welcome-subtitle\">Реализуем в следующей версии</p>\r\n  </div>\r\n\r\n  <div class=\"placeholder-content\">\r\n    <div class=\"placeholder-card\">\r\n      <div class=\"placeholder-icon\">\r\n        <i-lucide [img]=\"TrendingUp\" [size]=\"64\"></i-lucide>\r\n      </div>\r\n      <h2>Отчеты и метрики</h2>\r\n      <p>Здесь будет функционал для анализа производительности и создания отчетов</p>\r\n      <div class=\"placeholder-features\">\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"ChartColumn\" [size]=\"20\"></i-lucide>\r\n          <span>Графики и диаграммы</span>\r\n        </div>\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"FileText\" [size]=\"20\"></i-lucide>\r\n          <span>Экспорт отчетов</span>\r\n        </div>\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"Target\" [size]=\"20\"></i-lucide>\r\n          <span>KPI метрики</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</main>\r\n\r\n</app-layout>\r\n"
        },
        {
            "name": "App",
            "id": "component-App-9c6ef6b1ddfc072e28b77f71732c7a10ac4e178315fe2cac3b6bceaec0a49726f43b2f5962ecc6c49f04912f95b70bebc57416a436936f60fad82e150cd11f6a",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'taskboard-pro'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "SharedModule",
                    "type": "module"
                },
                {
                    "name": "NotificationToastComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { SharedModule } from './shared/shared.module';\nimport { NotificationToastComponent } from './shared/components/notification-toast/notification-toast.component';\n\n\n\n@Component({\n  selector: 'app-root',\n  imports: [RouterOutlet, SharedModule, NotificationToastComponent],\n  templateUrl: './app.html',\n  styleUrl: './app.scss'\n})\nexport class App {\n  protected readonly title = 'taskboard-pro';\n}\n",
            "styleUrl": "./app.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"app-container\">\r\n  <main class=\"app-main\">\r\n    <router-outlet />\r\n  </main>\r\n  <app-notification-toast />\r\n</div>\r\n"
        },
        {
            "name": "AppearanceSettingsComponent",
            "id": "component-AppearanceSettingsComponent-b91f02ac70db37911756e040c755b950a764a1f54fcfd5943508ab79ede3bd56eaea497883d6edc6f392806a0a8a469ab3ba0abe7b0e7744e28499cdf9dafcde",
            "file": "src/app/features/settings/components/appearance-settings/appearance-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-appearance-settings",
            "styleUrls": [],
            "styles": [
                "\n    .appearance-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"appearance-settings\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <i-lucide [img]=\"PaletteIcon\" [size]=\"24\"></i-lucide>\n        Настройки внешнего вида\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Здесь будут настройки темы, языка и отображения</p>\n      <p>Этап 3: Внешний вид - в разработке</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "PaletteIcon",
                    "defaultValue": "Palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { LucideAngularModule, Palette } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-appearance-settings',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, LucideAngularModule],\r\n  template: `\r\n    <div class=\"appearance-settings\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            <i-lucide [img]=\"PaletteIcon\" [size]=\"24\"></i-lucide>\r\n            Настройки внешнего вида\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <p>Здесь будут настройки темы, языка и отображения</p>\r\n          <p>Этап 3: Внешний вид - в разработке</p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .appearance-settings {\r\n      padding: 1rem 0;\r\n    }\r\n\r\n    mat-card {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-header {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-title {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.75rem;\r\n      font-size: 1.25rem;\r\n      color: #2c3e50;\r\n      margin: 0;\r\n\r\n      i-lucide {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-shrink: 0;\r\n      }\r\n    }\r\n\r\n    p {\r\n      color: #6c757d;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class AppearanceSettingsComponent {\r\n  // Icons\r\n  readonly PaletteIcon = Palette;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .appearance-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-11f10a51e2b349cbd2d41fbed808ca05578c6c26df2d66a9f91e5c216245af28a3fb269fe8907cba36b753f3405364fd9c1ab1982a7dba74d53764e1b407d508",
            "file": "src/app/features/dashboard/components/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [
                "./dashboard.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ChartColumn",
                    "defaultValue": "ChartColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "CheckCircle",
                    "defaultValue": "CheckCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "CheckSquare",
                    "defaultValue": "CheckSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "ClipboardList",
                    "defaultValue": "ClipboardList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Clock",
                    "defaultValue": "Clock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "FileText",
                    "defaultValue": "FileText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "PartyPopper",
                    "defaultValue": "PartyPopper",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Play",
                    "defaultValue": "Play",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Plus",
                    "defaultValue": "Plus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "TrendingUp",
                    "defaultValue": "TrendingUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "userSubscription",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject, OnDestroy } from '@angular/core';\r\nimport { RouterLink, Router } from '@angular/router';\r\nimport { AuthService } from '@services';\r\nimport { User } from '@models';\r\nimport { Subscription } from 'rxjs';\r\nimport { LayoutComponent } from '../../../../shared/components/layout';\r\nimport { LucideAngularModule, ChartColumn, CheckSquare, Clock, CheckCircle, Plus, FileText, Play, TrendingUp, PartyPopper, ClipboardList } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrls: ['./dashboard.component.scss'],\r\n  standalone: true,\r\n  imports: [RouterLink, LayoutComponent, LucideAngularModule]\r\n})\r\nexport class DashboardComponent implements OnInit, OnDestroy {\r\n  private readonly authService = inject(AuthService);\r\n  private readonly router = inject(Router);\r\n\r\n  currentUser: User | null = null;\r\n  private userSubscription: Subscription | null = null;\r\n\r\n  // Lucide icons\r\n  readonly ChartColumn = ChartColumn;\r\n  readonly CheckSquare = CheckSquare;\r\n  readonly Clock = Clock;\r\n  readonly CheckCircle = CheckCircle;\r\n  readonly Plus = Plus;\r\n  readonly FileText = FileText;\r\n  readonly Play = Play;\r\n  readonly TrendingUp = TrendingUp;\r\n  readonly PartyPopper = PartyPopper;\r\n  readonly ClipboardList = ClipboardList;\r\n\r\n\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    this.userSubscription = this.authService.currentUser$.subscribe(\r\n      user => this.currentUser = user\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.userSubscription) {\r\n      this.userSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  changePassword(): void {\r\n    // TODO: Implement change password functionality\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".dashboard-container {\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n}\r\n\r\n\r\n\r\n// Main content\r\n.dashboard-main {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n}\r\n\r\n// Welcome section\r\n.welcome-section {\r\n  text-align: center;\r\n  margin-bottom: 3rem;\r\n  padding: 2rem 0;\r\n}\r\n\r\n.welcome-title {\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n  line-height: 1.2;\r\n}\r\n\r\n.welcome-subtitle {\r\n  font-size: 1.1rem;\r\n  color: #6c757d;\r\n  margin: 0;\r\n}\r\n\r\n// Stats - стиль как feature-card на главной\r\n.dashboard-stats {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n  gap: 2rem;\r\n  margin-bottom: 3rem;\r\n}\r\n\r\n// Добавляем анимацию появления карточек\r\n.stat-card {\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n.stat-card:nth-child(1) { animation-delay: 0.1s; }\r\n.stat-card:nth-child(2) { animation-delay: 0.2s; }\r\n.stat-card:nth-child(3) { animation-delay: 0.3s; }\r\n.stat-card:nth-child(4) { animation-delay: 0.4s; }\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(30px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.stat-card {\r\n  padding: 2rem;\r\n  border-radius: 12px;\r\n  background: #f8f9fa;\r\n  text-align: center;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-card:hover {\r\n  transform: translateY(-5px);\r\n  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.stat-icon {\r\n  width: 64px;\r\n  height: 64px;\r\n  background: #3498db;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto 1.5rem;\r\n  color: white;\r\n  position: relative;\r\n\r\n  // Центрирование SVG иконок\r\n  i-lucide {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 32px;\r\n    height: 32px;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n}\r\n\r\n.stat-card h3 {\r\n  font-size: 1.5rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.stat-number {\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n  color: #2c3e50;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.stat-change {\r\n  font-size: 0.875rem;\r\n  font-weight: 500;\r\n\r\n  &.positive {\r\n    color: #27ae60;\r\n  }\r\n\r\n  &.negative {\r\n    color: #e74c3c;\r\n  }\r\n\r\n  &.neutral {\r\n    color: #6c757d;\r\n  }\r\n}\r\n\r\n// Content sections\r\n.dashboard-content {\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 2rem;\r\n  margin-bottom: 2rem;\r\n\r\n  @media (max-width: 768px) {\r\n    grid-template-columns: 1fr;\r\n  }\r\n}\r\n\r\n.quick-actions, .recent-activity {\r\n  background: white;\r\n  border-radius: 12px;\r\n  padding: 2rem;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n\r\n  h2 {\r\n    margin: 0 0 1.5rem 0;\r\n    color: #2c3e50;\r\n    font-size: 1.5rem;\r\n    font-weight: 600;\r\n  }\r\n}\r\n\r\n.action-buttons {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n.action-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n  padding: 1rem 1.5rem;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  text-decoration: none;\r\n\r\n  // Центрирование SVG иконок в кнопках\r\n  i-lucide {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n\r\n  &.primary {\r\n    background: #2ecc71;\r\n    color: white;\r\n\r\n    &:hover {\r\n      background: #27ae60;\r\n      transform: translateY(-2px);\r\n      box-shadow: 0 4px 12px rgba(46, 204, 113, 0.3);\r\n    }\r\n  }\r\n\r\n  &.secondary {\r\n    background: #f8f9fa;\r\n    color: #2c3e50;\r\n    border: 1px solid #e9ecef;\r\n\r\n    &:hover {\r\n      background: #e9ecef;\r\n      transform: translateY(-2px);\r\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n    }\r\n  }\r\n}\r\n\r\n.activity-list {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n.activity-item {\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 1rem;\r\n  padding: 1rem;\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n\r\n  .activity-icon {\r\n    width: 40px;\r\n    height: 40px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background: #3498db;\r\n    border-radius: 50%;\r\n    color: white;\r\n    position: relative;\r\n\r\n    // Центрирование SVG иконок\r\n    i-lucide {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      width: 20px;\r\n      height: 20px;\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n    }\r\n  }\r\n\r\n  .activity-content {\r\n    flex: 1;\r\n\r\n    p {\r\n      margin: 0 0 0.25rem 0;\r\n      font-weight: 500;\r\n      color: #2c3e50;\r\n    }\r\n\r\n    .activity-time {\r\n      font-size: 0.875rem;\r\n      color: #6c757d;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n\r\n// Responsive design\r\n@media (max-width: 768px) {\r\n  .dashboard-main {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .stat-card {\r\n    padding: 1.5rem;\r\n  }\r\n\r\n  .stat-number {\r\n    font-size: 2rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .dashboard-main {\r\n    padding: 0.75rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 1.75rem;\r\n  }\r\n\r\n  .stat-card {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .stat-number {\r\n    font-size: 1.75rem;\r\n  }\r\n\r\n  .dashboard-stats {\r\n    grid-template-columns: 1fr;\r\n    gap: 1rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./dashboard.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout [showHeader]=\"true\" [showFooter]=\"true\">\r\n  <div class=\"dashboard-container\">\r\n\r\n  <!-- Основной контент -->\r\n  <main class=\"dashboard-main\">\r\n    <!-- Приветствие -->\r\n    <section class=\"welcome-section\">\r\n      <div class=\"welcome-content\">\r\n        <h1 class=\"welcome-title\">Добро пожаловать, {{ currentUser?.username || 'Пользователь' }}!</h1>\r\n        <p class=\"welcome-subtitle\">Управляйте своими проектами и задачами эффективно</p>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- Статистика в стиле feature-card -->\r\n    <section class=\"dashboard-stats\">\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i-lucide [img]=\"ChartColumn\" [size]=\"32\"></i-lucide>\r\n        </div>\r\n        <h3>Всего проектов</h3>\r\n        <p class=\"stat-number\">0</p>\r\n        <span class=\"stat-change positive\">+0% с прошлой недели</span>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i-lucide [img]=\"CheckSquare\" [size]=\"32\"></i-lucide>\r\n        </div>\r\n        <h3>Активные задачи</h3>\r\n        <p class=\"stat-number\">0</p>\r\n        <span class=\"stat-change neutral\">Без изменений</span>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i-lucide [img]=\"Clock\" [size]=\"32\"></i-lucide>\r\n        </div>\r\n        <h3>Отслежено времени</h3>\r\n        <p class=\"stat-number\">0ч</p>\r\n        <span class=\"stat-change positive\">+0% с прошлой недели</span>\r\n      </div>\r\n\r\n      <div class=\"stat-card\">\r\n        <div class=\"stat-icon\">\r\n          <i-lucide [img]=\"CheckCircle\" [size]=\"32\"></i-lucide>\r\n        </div>\r\n        <h3>Завершено</h3>\r\n        <p class=\"stat-number\">0</p>\r\n        <span class=\"stat-change positive\">+0% с прошлой недели</span>\r\n      </div>\r\n    </section>\r\n\r\n    <!-- Быстрые действия и активность -->\r\n    <section class=\"dashboard-content\">\r\n      <div class=\"quick-actions\">\r\n        <h2>Быстрые действия</h2>\r\n        <div class=\"action-buttons\">\r\n          <a routerLink=\"/projects\" class=\"action-btn primary\">\r\n            <i-lucide [img]=\"Plus\" [size]=\"20\"></i-lucide>\r\n            Создать проект\r\n          </a>\r\n          <a routerLink=\"/tasks\" class=\"action-btn secondary\">\r\n            <i-lucide [img]=\"FileText\" [size]=\"20\"></i-lucide>\r\n            Добавить задачу\r\n          </a>\r\n          <a routerLink=\"/time-tracking\" class=\"action-btn secondary\">\r\n            <i-lucide [img]=\"Play\" [size]=\"20\"></i-lucide>\r\n            Запустить таймер\r\n          </a>\r\n          <a routerLink=\"/analytics\" class=\"action-btn secondary\">\r\n            <i-lucide [img]=\"TrendingUp\" [size]=\"20\"></i-lucide>\r\n            Посмотреть отчеты\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"recent-activity\">\r\n        <h2>Последняя активность</h2>\r\n        <div class=\"activity-list\">\r\n          <div class=\"activity-item\">\r\n            <div class=\"activity-icon\">\r\n              <i-lucide [img]=\"PartyPopper\" [size]=\"20\"></i-lucide>\r\n            </div>\r\n            <div class=\"activity-content\">\r\n              <p>Добро пожаловать в TaskBoard Pro!</p>\r\n              <span class=\"activity-time\">Начните работу, создав свой первый проект</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"activity-item\">\r\n            <div class=\"activity-icon\">\r\n              <i-lucide [img]=\"ClipboardList\" [size]=\"20\"></i-lucide>\r\n            </div>\r\n            <div class=\"activity-content\">\r\n              <p>Нет недавней активности</p>\r\n              <span class=\"activity-time\">Ваши действия появятся здесь</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </section>\r\n\r\n  </main>\r\n</div>\r\n</app-layout>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-c2483148436c49750c72e4871fe0f6154aaa707f696a4a7d2dc781ce80fe1c0bf984ff1807de8f9343ff30084bbee0298d7ab2be441d1af96f7d228e1935fb96",
            "file": "src/app/shared/components/layout/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [
                "\n    /* Footer */\n    .footer {\n      background: #2c3e50;\n      color: white;\n      padding: 3rem 2rem 1rem;\n      margin-top: auto;\n    }\n\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    .footer-content {\n      display: grid;\n      grid-template-columns: 1fr 2fr;\n      gap: 3rem;\n      margin-bottom: 2rem;\n    }\n\n    .footer-logo h3 {\n      font-size: 1.5rem;\n      margin-bottom: 0.5rem;\n    }\n\n    .footer-logo p {\n      opacity: 0.8;\n    }\n\n    .footer-links {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: 2rem;\n    }\n\n    .footer-section h4 {\n      margin-bottom: 1rem;\n      color: #3498db;\n    }\n\n    .footer-section a {\n      display: block;\n      color: rgba(255, 255, 255, 0.8);\n      text-decoration: none;\n      margin-bottom: 0.5rem;\n      transition: color 0.3s ease;\n    }\n\n    .footer-section a:hover {\n      color: white;\n    }\n\n    .footer-bottom {\n      border-top: 1px solid rgba(255, 255, 255, 0.1);\n      padding-top: 1rem;\n      text-align: center;\n      opacity: 0.8;\n    }\n\n    /* Responsive */\n    @media (max-width: 768px) {\n      .footer-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n      }\n\n      .footer-links {\n        grid-template-columns: 1fr;\n      }\n    }\n  "
            ],
            "template": "<footer class=\"footer\">\n  <div class=\"container\">\n    <div class=\"footer-content\">\n      <div class=\"footer-logo\">\n        <h3>TaskBoard Pro</h3>\n        <p>Управление проектами стало проще</p>\n      </div>\n      <div class=\"footer-links\">\n        <div class=\"footer-section\">\n          <h4>Продукт</h4>\n          <a href=\"#\">Возможности</a>\n          <a href=\"#\">Цены</a>\n          <a href=\"#\">Интеграции</a>\n        </div>\n        <div class=\"footer-section\">\n          <h4>Поддержка</h4>\n          <a href=\"#\">Документация</a>\n          <a href=\"#\">FAQ</a>\n          <a href=\"#\">Контакты</a>\n        </div>\n        <div class=\"footer-section\">\n          <h4>Компания</h4>\n          <a href=\"#\">О нас</a>\n          <a href=\"#\">Блог</a>\n          <a href=\"#\">Карьера</a>\n        </div>\n      </div>\n    </div>\n    <div class=\"footer-bottom\">\n      <p>&copy; 2024 TaskBoard Pro. Все права защищены.</p>\n    </div>\n  </div>\n</footer>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n\n\n@Component({\n  selector: 'app-footer',\n  standalone: true,\n  imports: [],\n  template: `\n    <footer class=\"footer\">\n      <div class=\"container\">\n        <div class=\"footer-content\">\n          <div class=\"footer-logo\">\n            <h3>TaskBoard Pro</h3>\n            <p>Управление проектами стало проще</p>\n          </div>\n          <div class=\"footer-links\">\n            <div class=\"footer-section\">\n              <h4>Продукт</h4>\n              <a href=\"#\">Возможности</a>\n              <a href=\"#\">Цены</a>\n              <a href=\"#\">Интеграции</a>\n            </div>\n            <div class=\"footer-section\">\n              <h4>Поддержка</h4>\n              <a href=\"#\">Документация</a>\n              <a href=\"#\">FAQ</a>\n              <a href=\"#\">Контакты</a>\n            </div>\n            <div class=\"footer-section\">\n              <h4>Компания</h4>\n              <a href=\"#\">О нас</a>\n              <a href=\"#\">Блог</a>\n              <a href=\"#\">Карьера</a>\n            </div>\n          </div>\n        </div>\n        <div class=\"footer-bottom\">\n          <p>&copy; 2024 TaskBoard Pro. Все права защищены.</p>\n        </div>\n      </div>\n    </footer>\n  `,\n  styles: [`\n    /* Footer */\n    .footer {\n      background: #2c3e50;\n      color: white;\n      padding: 3rem 2rem 1rem;\n      margin-top: auto;\n    }\n\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    .footer-content {\n      display: grid;\n      grid-template-columns: 1fr 2fr;\n      gap: 3rem;\n      margin-bottom: 2rem;\n    }\n\n    .footer-logo h3 {\n      font-size: 1.5rem;\n      margin-bottom: 0.5rem;\n    }\n\n    .footer-logo p {\n      opacity: 0.8;\n    }\n\n    .footer-links {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: 2rem;\n    }\n\n    .footer-section h4 {\n      margin-bottom: 1rem;\n      color: #3498db;\n    }\n\n    .footer-section a {\n      display: block;\n      color: rgba(255, 255, 255, 0.8);\n      text-decoration: none;\n      margin-bottom: 0.5rem;\n      transition: color 0.3s ease;\n    }\n\n    .footer-section a:hover {\n      color: white;\n    }\n\n    .footer-bottom {\n      border-top: 1px solid rgba(255, 255, 255, 0.1);\n      padding-top: 1rem;\n      text-align: center;\n      opacity: 0.8;\n    }\n\n    /* Responsive */\n    @media (max-width: 768px) {\n      .footer-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n      }\n\n      .footer-links {\n        grid-template-columns: 1fr;\n      }\n    }\n  `]\n})\nexport class FooterComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    /* Footer */\n    .footer {\n      background: #2c3e50;\n      color: white;\n      padding: 3rem 2rem 1rem;\n      margin-top: auto;\n    }\n\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    .footer-content {\n      display: grid;\n      grid-template-columns: 1fr 2fr;\n      gap: 3rem;\n      margin-bottom: 2rem;\n    }\n\n    .footer-logo h3 {\n      font-size: 1.5rem;\n      margin-bottom: 0.5rem;\n    }\n\n    .footer-logo p {\n      opacity: 0.8;\n    }\n\n    .footer-links {\n      display: grid;\n      grid-template-columns: repeat(3, 1fr);\n      gap: 2rem;\n    }\n\n    .footer-section h4 {\n      margin-bottom: 1rem;\n      color: #3498db;\n    }\n\n    .footer-section a {\n      display: block;\n      color: rgba(255, 255, 255, 0.8);\n      text-decoration: none;\n      margin-bottom: 0.5rem;\n      transition: color 0.3s ease;\n    }\n\n    .footer-section a:hover {\n      color: white;\n    }\n\n    .footer-bottom {\n      border-top: 1px solid rgba(255, 255, 255, 0.1);\n      padding-top: 1rem;\n      text-align: center;\n      opacity: 0.8;\n    }\n\n    /* Responsive */\n    @media (max-width: 768px) {\n      .footer-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n      }\n\n      .footer-links {\n        grid-template-columns: 1fr;\n      }\n    }\n  \n",
            "extends": []
        },
        {
            "name": "ForgotPasswordComponent",
            "id": "component-ForgotPasswordComponent-4f2d924f9f8e5f0bf6e5ac98dd155d7f207cc34cf34574863461365a991b0802e3a42d226c8102f6d1851fecc842e54a5c510f82e8596809c9deeabf8c649e48",
            "file": "src/app/features/auth/components/forgot-password/forgot-password.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forgot-password",
            "styleUrls": [
                "./forgot-password.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forgot-password.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "CheckCircle",
                    "defaultValue": "CheckCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "emailSent",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "forgotPasswordForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "Loader2",
                    "defaultValue": "Loader2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "Mail",
                    "defaultValue": "Mail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "success$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "clearError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFieldInvalid",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markFormGroupTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subject } from 'rxjs';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { LucideAngularModule, Mail, CheckCircle, Loader2 } from 'lucide-angular';\n\nimport * as AuthActions from '../../store/auth.actions';\nimport * as AuthSelectors from '../../store/auth.selectors';\n@Component({\n  selector: 'app-forgot-password',\n  templateUrl: './forgot-password.component.html',\n  styleUrls: ['./forgot-password.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    LucideAngularModule\n  ]\n})\nexport class ForgotPasswordComponent implements OnInit, OnDestroy {\n  private readonly fb = inject(FormBuilder);\n  private readonly store = inject(Store);\n\n  forgotPasswordForm!: FormGroup;\n  loading$!: Observable<boolean>;\n  error$!: Observable<string | null>;\n  success$!: Observable<string | null>;\n  emailSent = false;\n  private readonly destroy$ = new Subject<void>();\n\n  // Lucide icons\n  readonly Mail = Mail;\n  readonly CheckCircle = CheckCircle;\n  readonly Loader2 = Loader2;\n\n\n\n  constructor() {\n    this.loading$ = this.store.select(AuthSelectors.selectIsLoading);\n    this.error$ = this.store.select(AuthSelectors.selectError);\n    this.success$ = this.store.select(AuthSelectors.selectSuccess);\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    this.clearError();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initForm(): void {\n    this.forgotPasswordForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n    });\n  }\n\n  onSubmit(): void {\n    if (this.forgotPasswordForm.valid) {\n      const email = this.forgotPasswordForm.value.email;\n      this.store.dispatch(AuthActions.forgotPassword({ email }));\n      this.emailSent = true;\n    } else {\n      this.markFormGroupTouched();\n    }\n  }\n\n  private markFormGroupTouched(): void {\n    Object.keys(this.forgotPasswordForm.controls).forEach((key) => {\n      const control = this.forgotPasswordForm.get(key);\n      control?.markAsTouched();\n    });\n  }\n\n  private clearError(): void {\n    this.store.dispatch(AuthActions.clearAuthError());\n  }\n\n  getErrorMessage(controlName: string): string {\n    const control = this.forgotPasswordForm.get(controlName);\n\n    if (control?.hasError('required')) {\n      return 'Это поле обязательно';\n    }\n\n    if (controlName === 'email' && control?.hasError('email')) {\n      return 'Введите корректный email';\n    }\n\n    return '';\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.forgotPasswordForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n\n  resetForm(): void {\n    this.emailSent = false;\n    this.forgotPasswordForm.reset();\n    this.clearError();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".forgot-password-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  padding: 20px;\r\n}\r\n\r\n.forgot-password-card {\r\n  max-width: 400px;\r\n  width: 100%;\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n\r\n.forgot-password-card mat-card-header {\r\n  text-align: center;\r\n  padding: 24px 24px 0;\r\n}\r\n\r\n.forgot-password-card mat-card-title {\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  color: #333;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.forgot-password-card mat-card-subtitle {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.forgot-password-card mat-card-content {\r\n  padding: 24px;\r\n}\r\n\r\n.forgot-password-card p {\r\n  text-align: center;\r\n  color: #666;\r\n  margin-bottom: 24px;\r\n  line-height: 1.5;\r\n}\r\n\r\n.success-message {\r\n  color: #4caf50 !important;\r\n  font-weight: 500;\r\n}\r\n\r\n.forgot-password-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n.error-message {\r\n  margin-top: 8px;\r\n  text-align: center;\r\n}\r\n\r\n.submit-button {\r\n  margin-top: 16px;\r\n  height: 48px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n}\r\n\r\n.submit-button mat-spinner {\r\n  margin-right: 8px;\r\n}\r\n\r\n.success-content {\r\n  text-align: center;\r\n  padding: 24px 0;\r\n}\r\n\r\n.success-content mat-icon {\r\n  font-size: 48px;\r\n  width: 48px;\r\n  height: 48px;\r\n  color: #4caf50;\r\n  margin-bottom: 16px;\r\n}\r\n\r\n.success-content p {\r\n  color: #666;\r\n  margin-bottom: 24px;\r\n}\r\n\r\n.back-button {\r\n  margin-top: 16px;\r\n}\r\n\r\n.forgot-password-card mat-card-actions {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 16px 24px 24px;\r\n  margin: 0;\r\n}\r\n\r\n.forgot-password-card mat-card-actions a {\r\n  color: #667eea;\r\n  text-decoration: none;\r\n  font-size: 14px;\r\n}\r\n\r\n.forgot-password-card mat-card-actions a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n// Responsive design\r\n@media (max-width: 480px) {\r\n  .forgot-password-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .forgot-password-card {\r\n    max-width: 100%;\r\n  }\r\n  \r\n  .forgot-password-card mat-card-content {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .forgot-password-card mat-card-actions {\r\n    padding: 12px 16px 16px;\r\n  }\r\n}\r\n\r\n// Material form field customizations\r\n::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {\r\n  color: #ddd;\r\n}\r\n\r\n::ng-deep .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {\r\n  color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-form-field.mat-focused .mat-form-field-label {\r\n  color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-raised-button.mat-primary {\r\n  background-color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-raised-button.mat-primary:hover {\r\n  background-color: #5a6fd8;\r\n}\r\n\r\n::ng-deep .mat-stroked-button {\r\n  border-color: #667eea;\r\n  color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-stroked-button:hover {\r\n  background-color: #667eea;\r\n  color: white;\r\n} ",
                    "styleUrl": "./forgot-password.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 43
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"forgot-password-container\">\n  <mat-card class=\"forgot-password-card\">\n    <mat-card-header>\n      <mat-card-title>Восстановление пароля</mat-card-title>\n      <mat-card-subtitle>TaskBoard Pro</mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <p *ngIf=\"!emailSent\">\n        Введите ваш email, и мы отправим инструкции по восстановлению пароля\n      </p>\n\n      <p *ngIf=\"emailSent\" class=\"success-message\">\n        Инструкции отправлены на ваш email\n      </p>\n\n      <div *ngIf=\"!emailSent\">\n        <form [formGroup]=\"forgotPasswordForm\" (ngSubmit)=\"onSubmit()\" class=\"forgot-password-form\">\n          <mat-form-field appearance=\"outline\" class=\"full-width\">\n            <mat-label>Email</mat-label>\n            <input\n              matInput\n              type=\"email\"\n              formControlName=\"email\"\n              placeholder=\"Введите ваш email\"\n              autocomplete=\"email\">\n            <i-lucide class=\"icon-center\" [img]=\"Mail\"></i-lucide>\n            <mat-error *ngIf=\"isFieldInvalid('email')\">\n              {{ getErrorMessage('email') }}\n            </mat-error>\n          </mat-form-field>\n\n          <div class=\"error-message\" *ngIf=\"error$ | async as error\">\n            <mat-error>{{ error }}</mat-error>\n          </div>\n\n          <button\n            mat-raised-button\n            color=\"primary\"\n            type=\"submit\"\n            class=\"submit-button\"\n            [disabled]=\"forgotPasswordForm.invalid || (loading$ | async)\">\n            <i-lucide\n              class=\"icon-center\"\n              [img]=\"Loader2\"\n              [size]=\"20\"\n              *ngIf=\"loading$ | async\">\n            </i-lucide>\n            <span *ngIf=\"(loading$ | async) === false\">Отправить инструкции</span>\n          </button>\n        </form>\n      </div>\n\n      <div *ngIf=\"emailSent\" class=\"success-content\">\n        <i-lucide class=\"icon-center\" [img]=\"CheckCircle\"></i-lucide>\n        <p>Проверьте ваш email и следуйте инструкциям для восстановления пароля</p>\n        <button mat-button (click)=\"resetForm()\" class=\"back-button\">\n          Вернуться к форме\n        </button>\n      </div>\n    </mat-card-content>\n\n    <mat-card-actions>\n      <a mat-button routerLink=\"/auth/login\">Вернуться к входу</a>\n    </mat-card-actions>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-2e401a516ac6a408db31c111ade15bb5a4e7462073f58f305125bf2611db8525946737ee94e0f18e2504937ea839b9505004fa61702ac0a488b7ea724b06fa70-1",
            "file": "src/app/shared/components/layout/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [
                "\n    /* Header */\n    .header {\n      background: rgba(255, 255, 255, 0.95);\n      backdrop-filter: blur(10px);\n      border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      z-index: 1000;\n    }\n\n    .header-content {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem 2rem;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .logo h1 {\n      font-size: 1.5rem;\n      font-weight: 700;\n      color: #2c3e50;\n      margin: 0;\n    }\n\n    .nav {\n      display: flex;\n      align-items: center;\n      gap: 2rem;\n      position: relative;\n    }\n\n    .nav-desktop {\n      display: flex;\n      align-items: center;\n      gap: 2rem;\n    }\n\n    .nav-link {\n      text-decoration: none;\n      color: #6c757d;\n      font-weight: 500;\n      transition: color 0.3s ease;\n      padding: 0.5rem 0;\n      position: relative;\n    }\n\n    .nav-link:hover,\n    .nav-link.active {\n      color: #3498db;\n    }\n\n    .nav-link.active::after {\n      content: '';\n      position: absolute;\n      bottom: -1rem;\n      left: 0;\n      right: 0;\n      height: 2px;\n      background: #3498db;\n    }\n\n    .nav-btn {\n      background: #3498db;\n      color: white;\n      padding: 0.5rem 1.5rem;\n      border-radius: 6px;\n      text-decoration: none;\n      font-weight: 500;\n      transition: background 0.3s ease;\n      border: none;\n      cursor: pointer;\n    }\n\n    .nav-btn:hover {\n      background: #2980b9;\n    }\n\n    // Mobile menu toggle\n    .mobile-menu-toggle {\n      display: none;\n      background: none;\n      border: none;\n      color: #6c757d;\n      cursor: pointer;\n      padding: 0.5rem;\n      border-radius: 6px;\n      transition: background 0.3s ease;\n    }\n\n    .mobile-menu-toggle:hover {\n      background: rgba(0, 0, 0, 0.05);\n    }\n\n    // Mobile menu\n    .mobile-menu {\n      display: none;\n      position: absolute;\n      top: 100%;\n      right: 0;\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n      min-width: 200px;\n      z-index: 1000;\n      margin-top: 8px;\n      border: 1px solid rgba(0, 0, 0, 0.08);\n      overflow: hidden;\n      opacity: 0;\n      transform: translateY(-10px);\n      transition: all 0.3s ease;\n    }\n\n    .mobile-menu.open {\n      opacity: 1;\n      transform: translateY(0);\n    }\n\n    .mobile-nav-link {\n      display: block;\n      padding: 1rem 1.5rem;\n      color: #6c757d;\n      text-decoration: none;\n      font-weight: 500;\n      transition: background 0.3s ease;\n      border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n    }\n\n    .mobile-nav-link:hover,\n    .mobile-nav-link.active {\n      background: #f8f9fa;\n      color: #3498db;\n    }\n\n    .mobile-nav-link:last-child {\n      border-bottom: none;\n    }\n\n    /* User menu styles */\n    app-user-menu {\n      display: inline-block;\n    }\n\n    app-user-menu .user-button {\n      background: #3498db;\n      color: white;\n      padding: 0.5rem 1rem;\n      border-radius: 6px;\n      transition: background 0.3s ease;\n    }\n\n    app-user-menu .user-button:hover {\n      background: #2980b9;\n    }\n\n    app-user-menu .user-name {\n      color: white;\n    }\n\n    app-user-menu .menu-arrow {\n      color: rgba(255, 255, 255, 0.8);\n    }\n\n    app-user-menu .dropdown-menu {\n      margin-top: 8px;\n    }\n\n    /* Responsive */\n    @media (max-width: 768px) {\n      .nav {\n        gap: 1rem;\n      }\n\n      .nav-desktop {\n        display: none;\n      }\n\n      .mobile-menu-toggle {\n        display: block;\n      }\n\n      .mobile-menu {\n        display: block;\n      }\n    }\n\n    @media (max-width: 480px) {\n      .header-content {\n        padding: 0.75rem;\n      }\n\n      .logo h1 {\n        font-size: 1.25rem;\n      }\n    }\n  "
            ],
            "template": "<header class=\"header\">\n  <div class=\"header-content\">\n    <div class=\"logo\">\n      <h1>TaskBoard Pro</h1>\n    </div>\n    <nav class=\"nav\">\n      <div class=\"nav-desktop\">\n        <a routerLink=\"/\" class=\"nav-link\" [class.active]=\"isActiveRoute('/')\">Главная</a>\n        <ng-container *ngIf=\"isAuthenticated\">\n          <a routerLink=\"/dashboard\" class=\"nav-link\" [class.active]=\"isActiveRoute('/dashboard')\">Дашборд</a>\n          <a routerLink=\"/projects\" class=\"nav-link\" [class.active]=\"isActiveRoute('/projects')\">Проекты</a>\n          <a routerLink=\"/tasks\" class=\"nav-link\" [class.active]=\"isActiveRoute('/tasks')\">Задачи</a>\n          <a routerLink=\"/time-tracking\" class=\"nav-link\" [class.active]=\"isActiveRoute('/time-tracking')\">Время</a>\n          <a routerLink=\"/analytics\" class=\"nav-link\" [class.active]=\"isActiveRoute('/analytics')\">Аналитика</a>\n        </ng-container>\n      </div>\n\n      <!-- Мобильное меню -->\n      <button class=\"mobile-menu-toggle\" (click)=\"toggleMobileMenu()\" type=\"button\" *ngIf=\"isAuthenticated\">\n        <i-lucide [img]=\"Menu\" [size]=\"24\"></i-lucide>\n      </button>\n\n      <div class=\"mobile-menu\" [class.open]=\"isMobileMenuOpen\" *ngIf=\"isAuthenticated\">\n        <a routerLink=\"/\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/')\" (click)=\"closeMobileMenu()\">Главная</a>\n        <a routerLink=\"/dashboard\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/dashboard')\" (click)=\"closeMobileMenu()\">Дашборд</a>\n        <a routerLink=\"/projects\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/projects')\" (click)=\"closeMobileMenu()\">Проекты</a>\n        <a routerLink=\"/tasks\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/tasks')\" (click)=\"closeMobileMenu()\">Задачи</a>\n        <a routerLink=\"/time-tracking\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/time-tracking')\" (click)=\"closeMobileMenu()\">Время</a>\n        <a routerLink=\"/analytics\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/analytics')\" (click)=\"closeMobileMenu()\">Аналитика</a>\n      </div>\n\n      <ng-container *ngIf=\"!isAuthenticated; else authenticatedNav\">\n        <a routerLink=\"/auth/login\" class=\"nav-link\">Войти</a>\n        <a routerLink=\"/auth/register\" class=\"nav-btn\">Регистрация</a>\n      </ng-container>\n      <ng-template #authenticatedNav>\n        <app-user-menu\n          [user]=\"currentUser\"\n          (logoutClick)=\"logout()\"\n          (changePasswordClick)=\"changePassword()\">\n        </app-user-menu>\n      </ng-template>\n    </nav>\n  </div>\n</header>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 262,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 266
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 265
                },
                {
                    "name": "isMobileMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 267
                },
                {
                    "name": "Menu",
                    "defaultValue": "Menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 270,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 263,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 301,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isActiveRoute",
                    "args": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 284,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 288,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 272,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 297,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "UserMenuComponent",
                    "type": "component"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\r\nimport { RouterLink, Router } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '@services';\r\nimport { User } from '@models';\r\nimport { UserMenuComponent } from '../user-menu/user-menu.component';\r\nimport { LucideAngularModule, Menu } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  standalone: true,\r\n  imports: [RouterLink, CommonModule, UserMenuComponent, LucideAngularModule],\r\n  template: `\r\n    <header class=\"header\">\r\n      <div class=\"header-content\">\r\n        <div class=\"logo\">\r\n          <h1>TaskBoard Pro</h1>\r\n        </div>\r\n        <nav class=\"nav\">\r\n          <div class=\"nav-desktop\">\r\n            <a routerLink=\"/\" class=\"nav-link\" [class.active]=\"isActiveRoute('/')\">Главная</a>\r\n            <ng-container *ngIf=\"isAuthenticated\">\r\n              <a routerLink=\"/dashboard\" class=\"nav-link\" [class.active]=\"isActiveRoute('/dashboard')\">Дашборд</a>\r\n              <a routerLink=\"/projects\" class=\"nav-link\" [class.active]=\"isActiveRoute('/projects')\">Проекты</a>\r\n              <a routerLink=\"/tasks\" class=\"nav-link\" [class.active]=\"isActiveRoute('/tasks')\">Задачи</a>\r\n              <a routerLink=\"/time-tracking\" class=\"nav-link\" [class.active]=\"isActiveRoute('/time-tracking')\">Время</a>\r\n              <a routerLink=\"/analytics\" class=\"nav-link\" [class.active]=\"isActiveRoute('/analytics')\">Аналитика</a>\r\n            </ng-container>\r\n          </div>\r\n\r\n          <!-- Мобильное меню -->\r\n          <button class=\"mobile-menu-toggle\" (click)=\"toggleMobileMenu()\" type=\"button\" *ngIf=\"isAuthenticated\">\r\n            <i-lucide [img]=\"Menu\" [size]=\"24\"></i-lucide>\r\n          </button>\r\n\r\n          <div class=\"mobile-menu\" [class.open]=\"isMobileMenuOpen\" *ngIf=\"isAuthenticated\">\r\n            <a routerLink=\"/\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/')\" (click)=\"closeMobileMenu()\">Главная</a>\r\n            <a routerLink=\"/dashboard\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/dashboard')\" (click)=\"closeMobileMenu()\">Дашборд</a>\r\n            <a routerLink=\"/projects\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/projects')\" (click)=\"closeMobileMenu()\">Проекты</a>\r\n            <a routerLink=\"/tasks\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/tasks')\" (click)=\"closeMobileMenu()\">Задачи</a>\r\n            <a routerLink=\"/time-tracking\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/time-tracking')\" (click)=\"closeMobileMenu()\">Время</a>\r\n            <a routerLink=\"/analytics\" class=\"mobile-nav-link\" [class.active]=\"isActiveRoute('/analytics')\" (click)=\"closeMobileMenu()\">Аналитика</a>\r\n          </div>\r\n\r\n          <ng-container *ngIf=\"!isAuthenticated; else authenticatedNav\">\r\n            <a routerLink=\"/auth/login\" class=\"nav-link\">Войти</a>\r\n            <a routerLink=\"/auth/register\" class=\"nav-btn\">Регистрация</a>\r\n          </ng-container>\r\n          <ng-template #authenticatedNav>\r\n            <app-user-menu\r\n              [user]=\"currentUser\"\r\n              (logoutClick)=\"logout()\"\r\n              (changePasswordClick)=\"changePassword()\">\r\n            </app-user-menu>\r\n          </ng-template>\r\n        </nav>\r\n      </div>\r\n    </header>\r\n  `,\r\n  styles: [`\r\n    /* Header */\r\n    .header {\r\n      background: rgba(255, 255, 255, 0.95);\r\n      backdrop-filter: blur(10px);\r\n      border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      z-index: 1000;\r\n    }\r\n\r\n    .header-content {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 1rem 2rem;\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n    }\r\n\r\n    .logo h1 {\r\n      font-size: 1.5rem;\r\n      font-weight: 700;\r\n      color: #2c3e50;\r\n      margin: 0;\r\n    }\r\n\r\n    .nav {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 2rem;\r\n      position: relative;\r\n    }\r\n\r\n    .nav-desktop {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 2rem;\r\n    }\r\n\r\n    .nav-link {\r\n      text-decoration: none;\r\n      color: #6c757d;\r\n      font-weight: 500;\r\n      transition: color 0.3s ease;\r\n      padding: 0.5rem 0;\r\n      position: relative;\r\n    }\r\n\r\n    .nav-link:hover,\r\n    .nav-link.active {\r\n      color: #3498db;\r\n    }\r\n\r\n    .nav-link.active::after {\r\n      content: '';\r\n      position: absolute;\r\n      bottom: -1rem;\r\n      left: 0;\r\n      right: 0;\r\n      height: 2px;\r\n      background: #3498db;\r\n    }\r\n\r\n    .nav-btn {\r\n      background: #3498db;\r\n      color: white;\r\n      padding: 0.5rem 1.5rem;\r\n      border-radius: 6px;\r\n      text-decoration: none;\r\n      font-weight: 500;\r\n      transition: background 0.3s ease;\r\n      border: none;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .nav-btn:hover {\r\n      background: #2980b9;\r\n    }\r\n\r\n    // Mobile menu toggle\r\n    .mobile-menu-toggle {\r\n      display: none;\r\n      background: none;\r\n      border: none;\r\n      color: #6c757d;\r\n      cursor: pointer;\r\n      padding: 0.5rem;\r\n      border-radius: 6px;\r\n      transition: background 0.3s ease;\r\n    }\r\n\r\n    .mobile-menu-toggle:hover {\r\n      background: rgba(0, 0, 0, 0.05);\r\n    }\r\n\r\n    // Mobile menu\r\n    .mobile-menu {\r\n      display: none;\r\n      position: absolute;\r\n      top: 100%;\r\n      right: 0;\r\n      background: white;\r\n      border-radius: 12px;\r\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n      min-width: 200px;\r\n      z-index: 1000;\r\n      margin-top: 8px;\r\n      border: 1px solid rgba(0, 0, 0, 0.08);\r\n      overflow: hidden;\r\n      opacity: 0;\r\n      transform: translateY(-10px);\r\n      transition: all 0.3s ease;\r\n    }\r\n\r\n    .mobile-menu.open {\r\n      opacity: 1;\r\n      transform: translateY(0);\r\n    }\r\n\r\n    .mobile-nav-link {\r\n      display: block;\r\n      padding: 1rem 1.5rem;\r\n      color: #6c757d;\r\n      text-decoration: none;\r\n      font-weight: 500;\r\n      transition: background 0.3s ease;\r\n      border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n    }\r\n\r\n    .mobile-nav-link:hover,\r\n    .mobile-nav-link.active {\r\n      background: #f8f9fa;\r\n      color: #3498db;\r\n    }\r\n\r\n    .mobile-nav-link:last-child {\r\n      border-bottom: none;\r\n    }\r\n\r\n    /* User menu styles */\r\n    app-user-menu {\r\n      display: inline-block;\r\n    }\r\n\r\n    app-user-menu .user-button {\r\n      background: #3498db;\r\n      color: white;\r\n      padding: 0.5rem 1rem;\r\n      border-radius: 6px;\r\n      transition: background 0.3s ease;\r\n    }\r\n\r\n    app-user-menu .user-button:hover {\r\n      background: #2980b9;\r\n    }\r\n\r\n    app-user-menu .user-name {\r\n      color: white;\r\n    }\r\n\r\n    app-user-menu .menu-arrow {\r\n      color: rgba(255, 255, 255, 0.8);\r\n    }\r\n\r\n    app-user-menu .dropdown-menu {\r\n      margin-top: 8px;\r\n    }\r\n\r\n    /* Responsive */\r\n    @media (max-width: 768px) {\r\n      .nav {\r\n        gap: 1rem;\r\n      }\r\n\r\n      .nav-desktop {\r\n        display: none;\r\n      }\r\n\r\n      .mobile-menu-toggle {\r\n        display: block;\r\n      }\r\n\r\n      .mobile-menu {\r\n        display: block;\r\n      }\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n      .header-content {\r\n        padding: 0.75rem;\r\n      }\r\n\r\n      .logo h1 {\r\n        font-size: 1.25rem;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  private readonly authService = inject(AuthService);\r\n  private readonly router = inject(Router);\r\n\r\n  isAuthenticated = false;\r\n  currentUser: User | null = null;\r\n  isMobileMenuOpen = false;\r\n\r\n  // Lucide icons\r\n  readonly Menu = Menu;\r\n\r\n  ngOnInit(): void {\r\n    // Подписываемся на изменения состояния аутентификации\r\n    this.authService.isAuthenticated$.subscribe(isAuth => {\r\n      this.isAuthenticated = isAuth;\r\n    });\r\n\r\n    // Подписываемся на изменения пользователя\r\n    this.authService.currentUser$.subscribe(user => {\r\n      this.currentUser = user;\r\n    });\r\n  }\r\n\r\n  isActiveRoute(route: string): boolean {\r\n    return this.router.url === route;\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n  }\r\n\r\n  changePassword(): void {\r\n    // TODO: Реализовать смену пароля\r\n    // Пока просто заглушка\r\n  }\r\n\r\n  toggleMobileMenu(): void {\r\n    this.isMobileMenuOpen = !this.isMobileMenuOpen;\r\n  }\r\n\r\n  closeMobileMenu(): void {\r\n    this.isMobileMenuOpen = false;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    /* Header */\n    .header {\n      background: rgba(255, 255, 255, 0.95);\n      backdrop-filter: blur(10px);\n      border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n      position: fixed;\n      top: 0;\n      left: 0;\n      right: 0;\n      z-index: 1000;\n    }\n\n    .header-content {\n      max-width: 1200px;\n      margin: 0 auto;\n      padding: 1rem 2rem;\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n    }\n\n    .logo h1 {\n      font-size: 1.5rem;\n      font-weight: 700;\n      color: #2c3e50;\n      margin: 0;\n    }\n\n    .nav {\n      display: flex;\n      align-items: center;\n      gap: 2rem;\n      position: relative;\n    }\n\n    .nav-desktop {\n      display: flex;\n      align-items: center;\n      gap: 2rem;\n    }\n\n    .nav-link {\n      text-decoration: none;\n      color: #6c757d;\n      font-weight: 500;\n      transition: color 0.3s ease;\n      padding: 0.5rem 0;\n      position: relative;\n    }\n\n    .nav-link:hover,\n    .nav-link.active {\n      color: #3498db;\n    }\n\n    .nav-link.active::after {\n      content: '';\n      position: absolute;\n      bottom: -1rem;\n      left: 0;\n      right: 0;\n      height: 2px;\n      background: #3498db;\n    }\n\n    .nav-btn {\n      background: #3498db;\n      color: white;\n      padding: 0.5rem 1.5rem;\n      border-radius: 6px;\n      text-decoration: none;\n      font-weight: 500;\n      transition: background 0.3s ease;\n      border: none;\n      cursor: pointer;\n    }\n\n    .nav-btn:hover {\n      background: #2980b9;\n    }\n\n    // Mobile menu toggle\n    .mobile-menu-toggle {\n      display: none;\n      background: none;\n      border: none;\n      color: #6c757d;\n      cursor: pointer;\n      padding: 0.5rem;\n      border-radius: 6px;\n      transition: background 0.3s ease;\n    }\n\n    .mobile-menu-toggle:hover {\n      background: rgba(0, 0, 0, 0.05);\n    }\n\n    // Mobile menu\n    .mobile-menu {\n      display: none;\n      position: absolute;\n      top: 100%;\n      right: 0;\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n      min-width: 200px;\n      z-index: 1000;\n      margin-top: 8px;\n      border: 1px solid rgba(0, 0, 0, 0.08);\n      overflow: hidden;\n      opacity: 0;\n      transform: translateY(-10px);\n      transition: all 0.3s ease;\n    }\n\n    .mobile-menu.open {\n      opacity: 1;\n      transform: translateY(0);\n    }\n\n    .mobile-nav-link {\n      display: block;\n      padding: 1rem 1.5rem;\n      color: #6c757d;\n      text-decoration: none;\n      font-weight: 500;\n      transition: background 0.3s ease;\n      border-bottom: 1px solid rgba(0, 0, 0, 0.05);\n    }\n\n    .mobile-nav-link:hover,\n    .mobile-nav-link.active {\n      background: #f8f9fa;\n      color: #3498db;\n    }\n\n    .mobile-nav-link:last-child {\n      border-bottom: none;\n    }\n\n    /* User menu styles */\n    app-user-menu {\n      display: inline-block;\n    }\n\n    app-user-menu .user-button {\n      background: #3498db;\n      color: white;\n      padding: 0.5rem 1rem;\n      border-radius: 6px;\n      transition: background 0.3s ease;\n    }\n\n    app-user-menu .user-button:hover {\n      background: #2980b9;\n    }\n\n    app-user-menu .user-name {\n      color: white;\n    }\n\n    app-user-menu .menu-arrow {\n      color: rgba(255, 255, 255, 0.8);\n    }\n\n    app-user-menu .dropdown-menu {\n      margin-top: 8px;\n    }\n\n    /* Responsive */\n    @media (max-width: 768px) {\n      .nav {\n        gap: 1rem;\n      }\n\n      .nav-desktop {\n        display: none;\n      }\n\n      .mobile-menu-toggle {\n        display: block;\n      }\n\n      .mobile-menu {\n        display: block;\n      }\n    }\n\n    @media (max-width: 480px) {\n      .header-content {\n        padding: 0.75rem;\n      }\n\n      .logo h1 {\n        font-size: 1.25rem;\n      }\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-abde322e1f581d187bcb4d02f1571349eb2d6bdb79237c461f652f0b1931d1c951b2b11fdb606121afbebdf5cb8887cdcacd6ae8a6b02f45f542c6db3bd982fb",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [
                "\n    .home-container {\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n    }\n\n    /* Hero Section */\n    .hero {\n      padding: 8rem 2rem 4rem;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n    }\n\n    .hero-content {\n      max-width: 1200px;\n      margin: 0 auto;\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 4rem;\n      align-items: center;\n    }\n\n    .hero-title {\n      font-size: 3.5rem;\n      font-weight: 700;\n      margin-bottom: 1.5rem;\n      line-height: 1.2;\n    }\n\n    .hero-subtitle {\n      font-size: 1.25rem;\n      margin-bottom: 2rem;\n      opacity: 0.9;\n      line-height: 1.6;\n    }\n\n    .hero-buttons {\n      display: flex;\n      gap: 1rem;\n      flex-wrap: wrap;\n    }\n\n    .btn {\n      padding: 1rem 2rem;\n      border-radius: 8px;\n      text-decoration: none;\n      font-weight: 600;\n      transition: all 0.3s ease;\n      display: inline-block;\n      border: none;\n      cursor: pointer;\n    }\n\n    .btn-primary {\n      background: #2ecc71;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #27ae60;\n      transform: translateY(-2px);\n    }\n\n    .btn-outline {\n      background: transparent;\n      color: white;\n      border: 2px solid white;\n    }\n\n    .btn-outline:hover {\n      background: white;\n      color: #667eea;\n    }\n\n    .btn-large {\n      padding: 1.25rem 2.5rem;\n      font-size: 1.1rem;\n    }\n\n    /* Mockup */\n    .hero-image {\n      display: flex;\n      justify-content: center;\n    }\n\n    .mockup {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n      overflow: hidden;\n      width: 100%;\n      max-width: 400px;\n    }\n\n    .mockup-header {\n      background: #f8f9fa;\n      padding: 1rem;\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .mockup-dot {\n      width: 12px;\n      height: 12px;\n      border-radius: 50%;\n    }\n\n    .mockup-dot.red { background: #ff5f56; }\n    .mockup-dot.yellow { background: #ffbd2e; }\n    .mockup-dot.green { background: #27ca3f; }\n\n    .mockup-content {\n      padding: 1.5rem;\n    }\n\n    .mockup-card {\n      background: #f8f9fa;\n      border-radius: 8px;\n      padding: 1rem;\n      margin-bottom: 1rem;\n    }\n\n    .mockup-card-header {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n    }\n\n    .mockup-avatar {\n      width: 32px;\n      height: 32px;\n      background: #3498db;\n      border-radius: 50%;\n    }\n\n    .mockup-text {\n      flex: 1;\n    }\n\n    .mockup-line {\n      background: #dee2e6;\n      border-radius: 2px;\n      margin-bottom: 0.25rem;\n    }\n\n    .mockup-line.short {\n      height: 8px;\n      width: 60%;\n    }\n\n    .mockup-line.long {\n      height: 8px;\n      width: 100%;\n    }\n\n    /* Features Section */\n    .features {\n      padding: 5rem 2rem;\n      background: white;\n    }\n\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    .section-header {\n      text-align: center;\n      margin-bottom: 4rem;\n    }\n\n    .section-header h2 {\n      font-size: 2.5rem;\n      color: #2c3e50;\n      margin-bottom: 1rem;\n    }\n\n    .section-header p {\n      font-size: 1.1rem;\n      color: #6c757d;\n    }\n\n    .features-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n      gap: 2rem;\n    }\n\n    .feature-card {\n      padding: 2rem;\n      border-radius: 12px;\n      background: #f8f9fa;\n      text-align: center;\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n    }\n\n    .feature-card:hover {\n      transform: translateY(-5px);\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    }\n\n    .feature-icon {\n      width: 64px;\n      height: 64px;\n      background: #3498db;\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto 1.5rem;\n      color: white;\n      position: relative;\n    }\n\n    .feature-icon i-lucide {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      color: white;\n    }\n\n    .feature-card h3 {\n      font-size: 1.5rem;\n      color: #2c3e50;\n      margin-bottom: 1rem;\n    }\n\n    .feature-card p {\n      color: #6c757d;\n      line-height: 1.6;\n    }\n\n    /* CTA Section */\n    .cta {\n      padding: 5rem 2rem;\n      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n      color: white;\n      text-align: center;\n    }\n\n    .cta-content h2 {\n      font-size: 2.5rem;\n      margin-bottom: 1rem;\n    }\n\n    .cta-content p {\n      font-size: 1.1rem;\n      margin-bottom: 2rem;\n      opacity: 0.9;\n    }\n\n\n\n    /* Responsive */\n    @media (max-width: 768px) {\n      .hero-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n      }\n\n      .hero-title {\n        font-size: 2.5rem;\n      }\n\n      .hero-buttons {\n        justify-content: center;\n      }\n\n      .features-grid {\n        grid-template-columns: 1fr;\n      }\n\n      .footer-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n      }\n\n      .footer-links {\n        grid-template-columns: 1fr;\n      }\n\n      .nav {\n        gap: 1rem;\n      }\n\n      .nav-desktop {\n        display: none;\n      }\n\n      .mobile-menu-toggle {\n        display: block;\n      }\n\n      .mobile-menu {\n        display: block;\n      }\n    }\n\n    @media (max-width: 480px) {\n      .header-content {\n        padding: 0.75rem;\n      }\n\n      .logo h1 {\n        font-size: 1.25rem;\n      }\n\n      .hero-title {\n        font-size: 2rem;\n      }\n    }\n  "
            ],
            "template": "<app-layout [showHeader]=\"true\" [showFooter]=\"true\">\n  <div class=\"home-container\">\n\n  <!-- Hero Section -->\n  <section class=\"hero\">\n    <div class=\"hero-content\">\n      <div class=\"hero-text\">\n        <h1 class=\"hero-title\">Управляйте проектами эффективно</h1>\n        <p class=\"hero-subtitle\">\n          Мощная платформа для командной работы, управления задачами и отслеживания прогресса\n        </p>\n        <div class=\"hero-buttons\">\n          <ng-container *ngIf=\"!isAuthenticated; else dashboardButton\">\n            <a routerLink=\"/auth/register\" class=\"btn btn-primary\">Начать бесплатно</a>\n            <a routerLink=\"/auth/login\" class=\"btn btn-outline\">Войти в систему</a>\n          </ng-container>\n          <ng-template #dashboardButton>\n            <a routerLink=\"/dashboard\" class=\"btn btn-primary\">Перейти к дашборду</a>\n            <button (click)=\"logout()\" class=\"btn btn-outline\">Выйти</button>\n          </ng-template>\n        </div>\n      </div>\n      <div class=\"hero-image\">\n        <div class=\"mockup\">\n          <div class=\"mockup-header\">\n            <div class=\"mockup-dot red\"></div>\n            <div class=\"mockup-dot yellow\"></div>\n            <div class=\"mockup-dot green\"></div>\n          </div>\n          <div class=\"mockup-content\">\n            <div class=\"mockup-card\">\n              <div class=\"mockup-card-header\">\n                <div class=\"mockup-avatar\"></div>\n                <div class=\"mockup-text\">\n                  <div class=\"mockup-line short\"></div>\n                  <div class=\"mockup-line long\"></div>\n                </div>\n              </div>\n            </div>\n            <div class=\"mockup-card\">\n              <div class=\"mockup-card-header\">\n                <div class=\"mockup-avatar\"></div>\n                <div class=\"mockup-text\">\n                  <div class=\"mockup-line short\"></div>\n                  <div class=\"mockup-line long\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- Features Section -->\n  <section class=\"features\">\n    <div class=\"container\">\n      <div class=\"section-header\">\n        <h2>Все что нужно для управления проектами</h2>\n        <p>Полный набор инструментов для эффективной работы команды</p>\n      </div>\n\n      <div class=\"features-grid\">\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">\n            <i-lucide [img]=\"ChartColumn\" [size]=\"32\"></i-lucide>\n          </div>\n          <h3>Управление проектами</h3>\n          <p>Создавайте проекты, добавляйте участников и отслеживайте прогресс в реальном времени</p>\n        </div>\n\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">\n            <i-lucide [img]=\"CheckSquare\" [size]=\"32\"></i-lucide>\n          </div>\n          <h3>Kanban доска</h3>\n          <p>Визуальное управление задачами с drag-and-drop функционалом</p>\n        </div>\n\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">\n            <i-lucide [img]=\"Clock\" [size]=\"32\"></i-lucide>\n          </div>\n          <h3>Отслеживание времени</h3>\n          <p>Встроенный таймер и детальная аналитика времени работы</p>\n        </div>\n\n        <div class=\"feature-card\">\n          <div class=\"feature-icon\">\n            <i-lucide [img]=\"TrendingUp\" [size]=\"32\"></i-lucide>\n          </div>\n          <h3>Аналитика и отчеты</h3>\n          <p>Подробная статистика производительности и автоматические отчеты</p>\n        </div>\n      </div>\n    </div>\n  </section>\n\n  <!-- CTA Section -->\n  <section class=\"cta\">\n    <div class=\"container\">\n      <div class=\"cta-content\">\n        <h2>Готовы начать?</h2>\n        <p>Присоединяйтесь к тысячам команд, которые уже используют TaskBoard Pro</p>\n        <ng-container *ngIf=\"!isAuthenticated; else dashboardCta\">\n          <a routerLink=\"/auth/register\" class=\"btn btn-primary btn-large\">Создать аккаунт</a>\n        </ng-container>\n        <ng-template #dashboardCta>\n          <a routerLink=\"/dashboard\" class=\"btn btn-primary btn-large\">Перейти к дашборду</a>\n        </ng-template>\n      </div>\n    </div>\n  </section>\n\n  </div>\n</app-layout>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 445,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ChartColumn",
                    "defaultValue": "ChartColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 451,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "CheckSquare",
                    "defaultValue": "CheckSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 452,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Clock",
                    "defaultValue": "Clock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 453,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 448
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 447
                },
                {
                    "name": "Menu",
                    "defaultValue": "Menu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 455,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "TrendingUp",
                    "defaultValue": "TrendingUp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 454,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 475,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 471,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 459,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\r\nimport { RouterLink } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from '@services';\r\nimport { User } from '@models';\r\nimport { LayoutComponent } from '../shared/components/layout';\r\nimport { LucideAngularModule, ChartColumn, CheckSquare, Clock, TrendingUp, Menu } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  imports: [RouterLink, CommonModule, LayoutComponent, LucideAngularModule],\r\n  template: `\r\n    <app-layout [showHeader]=\"true\" [showFooter]=\"true\">\r\n      <div class=\"home-container\">\r\n\r\n      <!-- Hero Section -->\r\n      <section class=\"hero\">\r\n        <div class=\"hero-content\">\r\n          <div class=\"hero-text\">\r\n            <h1 class=\"hero-title\">Управляйте проектами эффективно</h1>\r\n            <p class=\"hero-subtitle\">\r\n              Мощная платформа для командной работы, управления задачами и отслеживания прогресса\r\n            </p>\r\n            <div class=\"hero-buttons\">\r\n              <ng-container *ngIf=\"!isAuthenticated; else dashboardButton\">\r\n                <a routerLink=\"/auth/register\" class=\"btn btn-primary\">Начать бесплатно</a>\r\n                <a routerLink=\"/auth/login\" class=\"btn btn-outline\">Войти в систему</a>\r\n              </ng-container>\r\n              <ng-template #dashboardButton>\r\n                <a routerLink=\"/dashboard\" class=\"btn btn-primary\">Перейти к дашборду</a>\r\n                <button (click)=\"logout()\" class=\"btn btn-outline\">Выйти</button>\r\n              </ng-template>\r\n            </div>\r\n          </div>\r\n          <div class=\"hero-image\">\r\n            <div class=\"mockup\">\r\n              <div class=\"mockup-header\">\r\n                <div class=\"mockup-dot red\"></div>\r\n                <div class=\"mockup-dot yellow\"></div>\r\n                <div class=\"mockup-dot green\"></div>\r\n              </div>\r\n              <div class=\"mockup-content\">\r\n                <div class=\"mockup-card\">\r\n                  <div class=\"mockup-card-header\">\r\n                    <div class=\"mockup-avatar\"></div>\r\n                    <div class=\"mockup-text\">\r\n                      <div class=\"mockup-line short\"></div>\r\n                      <div class=\"mockup-line long\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"mockup-card\">\r\n                  <div class=\"mockup-card-header\">\r\n                    <div class=\"mockup-avatar\"></div>\r\n                    <div class=\"mockup-text\">\r\n                      <div class=\"mockup-line short\"></div>\r\n                      <div class=\"mockup-line long\"></div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- Features Section -->\r\n      <section class=\"features\">\r\n        <div class=\"container\">\r\n          <div class=\"section-header\">\r\n            <h2>Все что нужно для управления проектами</h2>\r\n            <p>Полный набор инструментов для эффективной работы команды</p>\r\n          </div>\r\n\r\n          <div class=\"features-grid\">\r\n            <div class=\"feature-card\">\r\n              <div class=\"feature-icon\">\r\n                <i-lucide [img]=\"ChartColumn\" [size]=\"32\"></i-lucide>\r\n              </div>\r\n              <h3>Управление проектами</h3>\r\n              <p>Создавайте проекты, добавляйте участников и отслеживайте прогресс в реальном времени</p>\r\n            </div>\r\n\r\n            <div class=\"feature-card\">\r\n              <div class=\"feature-icon\">\r\n                <i-lucide [img]=\"CheckSquare\" [size]=\"32\"></i-lucide>\r\n              </div>\r\n              <h3>Kanban доска</h3>\r\n              <p>Визуальное управление задачами с drag-and-drop функционалом</p>\r\n            </div>\r\n\r\n            <div class=\"feature-card\">\r\n              <div class=\"feature-icon\">\r\n                <i-lucide [img]=\"Clock\" [size]=\"32\"></i-lucide>\r\n              </div>\r\n              <h3>Отслеживание времени</h3>\r\n              <p>Встроенный таймер и детальная аналитика времени работы</p>\r\n            </div>\r\n\r\n            <div class=\"feature-card\">\r\n              <div class=\"feature-icon\">\r\n                <i-lucide [img]=\"TrendingUp\" [size]=\"32\"></i-lucide>\r\n              </div>\r\n              <h3>Аналитика и отчеты</h3>\r\n              <p>Подробная статистика производительности и автоматические отчеты</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <!-- CTA Section -->\r\n      <section class=\"cta\">\r\n        <div class=\"container\">\r\n          <div class=\"cta-content\">\r\n            <h2>Готовы начать?</h2>\r\n            <p>Присоединяйтесь к тысячам команд, которые уже используют TaskBoard Pro</p>\r\n            <ng-container *ngIf=\"!isAuthenticated; else dashboardCta\">\r\n              <a routerLink=\"/auth/register\" class=\"btn btn-primary btn-large\">Создать аккаунт</a>\r\n            </ng-container>\r\n            <ng-template #dashboardCta>\r\n              <a routerLink=\"/dashboard\" class=\"btn btn-primary btn-large\">Перейти к дашборду</a>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      </div>\r\n    </app-layout>\r\n  `,\r\n  styles: [`\r\n    .home-container {\r\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n    }\r\n\r\n    /* Hero Section */\r\n    .hero {\r\n      padding: 8rem 2rem 4rem;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      color: white;\r\n    }\r\n\r\n    .hero-content {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      display: grid;\r\n      grid-template-columns: 1fr 1fr;\r\n      gap: 4rem;\r\n      align-items: center;\r\n    }\r\n\r\n    .hero-title {\r\n      font-size: 3.5rem;\r\n      font-weight: 700;\r\n      margin-bottom: 1.5rem;\r\n      line-height: 1.2;\r\n    }\r\n\r\n    .hero-subtitle {\r\n      font-size: 1.25rem;\r\n      margin-bottom: 2rem;\r\n      opacity: 0.9;\r\n      line-height: 1.6;\r\n    }\r\n\r\n    .hero-buttons {\r\n      display: flex;\r\n      gap: 1rem;\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n    .btn {\r\n      padding: 1rem 2rem;\r\n      border-radius: 8px;\r\n      text-decoration: none;\r\n      font-weight: 600;\r\n      transition: all 0.3s ease;\r\n      display: inline-block;\r\n      border: none;\r\n      cursor: pointer;\r\n    }\r\n\r\n    .btn-primary {\r\n      background: #2ecc71;\r\n      color: white;\r\n    }\r\n\r\n    .btn-primary:hover {\r\n      background: #27ae60;\r\n      transform: translateY(-2px);\r\n    }\r\n\r\n    .btn-outline {\r\n      background: transparent;\r\n      color: white;\r\n      border: 2px solid white;\r\n    }\r\n\r\n    .btn-outline:hover {\r\n      background: white;\r\n      color: #667eea;\r\n    }\r\n\r\n    .btn-large {\r\n      padding: 1.25rem 2.5rem;\r\n      font-size: 1.1rem;\r\n    }\r\n\r\n    /* Mockup */\r\n    .hero-image {\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n\r\n    .mockup {\r\n      background: white;\r\n      border-radius: 12px;\r\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\r\n      overflow: hidden;\r\n      width: 100%;\r\n      max-width: 400px;\r\n    }\r\n\r\n    .mockup-header {\r\n      background: #f8f9fa;\r\n      padding: 1rem;\r\n      display: flex;\r\n      gap: 0.5rem;\r\n    }\r\n\r\n    .mockup-dot {\r\n      width: 12px;\r\n      height: 12px;\r\n      border-radius: 50%;\r\n    }\r\n\r\n    .mockup-dot.red { background: #ff5f56; }\r\n    .mockup-dot.yellow { background: #ffbd2e; }\r\n    .mockup-dot.green { background: #27ca3f; }\r\n\r\n    .mockup-content {\r\n      padding: 1.5rem;\r\n    }\r\n\r\n    .mockup-card {\r\n      background: #f8f9fa;\r\n      border-radius: 8px;\r\n      padding: 1rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .mockup-card-header {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.75rem;\r\n    }\r\n\r\n    .mockup-avatar {\r\n      width: 32px;\r\n      height: 32px;\r\n      background: #3498db;\r\n      border-radius: 50%;\r\n    }\r\n\r\n    .mockup-text {\r\n      flex: 1;\r\n    }\r\n\r\n    .mockup-line {\r\n      background: #dee2e6;\r\n      border-radius: 2px;\r\n      margin-bottom: 0.25rem;\r\n    }\r\n\r\n    .mockup-line.short {\r\n      height: 8px;\r\n      width: 60%;\r\n    }\r\n\r\n    .mockup-line.long {\r\n      height: 8px;\r\n      width: 100%;\r\n    }\r\n\r\n    /* Features Section */\r\n    .features {\r\n      padding: 5rem 2rem;\r\n      background: white;\r\n    }\r\n\r\n    .container {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    .section-header {\r\n      text-align: center;\r\n      margin-bottom: 4rem;\r\n    }\r\n\r\n    .section-header h2 {\r\n      font-size: 2.5rem;\r\n      color: #2c3e50;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .section-header p {\r\n      font-size: 1.1rem;\r\n      color: #6c757d;\r\n    }\r\n\r\n    .features-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\r\n      gap: 2rem;\r\n    }\r\n\r\n    .feature-card {\r\n      padding: 2rem;\r\n      border-radius: 12px;\r\n      background: #f8f9fa;\r\n      text-align: center;\r\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n    }\r\n\r\n    .feature-card:hover {\r\n      transform: translateY(-5px);\r\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\r\n    }\r\n\r\n    .feature-icon {\r\n      width: 64px;\r\n      height: 64px;\r\n      background: #3498db;\r\n      border-radius: 50%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      margin: 0 auto 1.5rem;\r\n      color: white;\r\n      position: relative;\r\n    }\r\n\r\n    .feature-icon i-lucide {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      transform: translate(-50%, -50%);\r\n      color: white;\r\n    }\r\n\r\n    .feature-card h3 {\r\n      font-size: 1.5rem;\r\n      color: #2c3e50;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .feature-card p {\r\n      color: #6c757d;\r\n      line-height: 1.6;\r\n    }\r\n\r\n    /* CTA Section */\r\n    .cta {\r\n      padding: 5rem 2rem;\r\n      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\r\n      color: white;\r\n      text-align: center;\r\n    }\r\n\r\n    .cta-content h2 {\r\n      font-size: 2.5rem;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .cta-content p {\r\n      font-size: 1.1rem;\r\n      margin-bottom: 2rem;\r\n      opacity: 0.9;\r\n    }\r\n\r\n\r\n\r\n    /* Responsive */\r\n    @media (max-width: 768px) {\r\n      .hero-content {\r\n        grid-template-columns: 1fr;\r\n        text-align: center;\r\n      }\r\n\r\n      .hero-title {\r\n        font-size: 2.5rem;\r\n      }\r\n\r\n      .hero-buttons {\r\n        justify-content: center;\r\n      }\r\n\r\n      .features-grid {\r\n        grid-template-columns: 1fr;\r\n      }\r\n\r\n      .footer-content {\r\n        grid-template-columns: 1fr;\r\n        text-align: center;\r\n      }\r\n\r\n      .footer-links {\r\n        grid-template-columns: 1fr;\r\n      }\r\n\r\n      .nav {\r\n        gap: 1rem;\r\n      }\r\n\r\n      .nav-desktop {\r\n        display: none;\r\n      }\r\n\r\n      .mobile-menu-toggle {\r\n        display: block;\r\n      }\r\n\r\n      .mobile-menu {\r\n        display: block;\r\n      }\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n      .header-content {\r\n        padding: 0.75rem;\r\n      }\r\n\r\n      .logo h1 {\r\n        font-size: 1.25rem;\r\n      }\r\n\r\n      .hero-title {\r\n        font-size: 2rem;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  private readonly authService = inject(AuthService);\r\n\r\n  isAuthenticated = false;\r\n  currentUser: User | null = null;\r\n\r\n  // Lucide icons\r\n  readonly ChartColumn = ChartColumn;\r\n  readonly CheckSquare = CheckSquare;\r\n  readonly Clock = Clock;\r\n  readonly TrendingUp = TrendingUp;\r\n  readonly Menu = Menu;\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    // Подписываемся на изменения состояния аутентификации\r\n    this.authService.isAuthenticated$.subscribe(isAuth => {\r\n      this.isAuthenticated = isAuth;\r\n    });\r\n\r\n    // Подписываемся на изменения пользователя\r\n    this.authService.currentUser$.subscribe(user => {\r\n      this.currentUser = user;\r\n    });\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n  }\r\n\r\n  changePassword(): void {\r\n    // TODO: Реализовать смену пароля\r\n    // Пока просто заглушка\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .home-container {\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n    }\n\n    /* Hero Section */\n    .hero {\n      padding: 8rem 2rem 4rem;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      color: white;\n    }\n\n    .hero-content {\n      max-width: 1200px;\n      margin: 0 auto;\n      display: grid;\n      grid-template-columns: 1fr 1fr;\n      gap: 4rem;\n      align-items: center;\n    }\n\n    .hero-title {\n      font-size: 3.5rem;\n      font-weight: 700;\n      margin-bottom: 1.5rem;\n      line-height: 1.2;\n    }\n\n    .hero-subtitle {\n      font-size: 1.25rem;\n      margin-bottom: 2rem;\n      opacity: 0.9;\n      line-height: 1.6;\n    }\n\n    .hero-buttons {\n      display: flex;\n      gap: 1rem;\n      flex-wrap: wrap;\n    }\n\n    .btn {\n      padding: 1rem 2rem;\n      border-radius: 8px;\n      text-decoration: none;\n      font-weight: 600;\n      transition: all 0.3s ease;\n      display: inline-block;\n      border: none;\n      cursor: pointer;\n    }\n\n    .btn-primary {\n      background: #2ecc71;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #27ae60;\n      transform: translateY(-2px);\n    }\n\n    .btn-outline {\n      background: transparent;\n      color: white;\n      border: 2px solid white;\n    }\n\n    .btn-outline:hover {\n      background: white;\n      color: #667eea;\n    }\n\n    .btn-large {\n      padding: 1.25rem 2.5rem;\n      font-size: 1.1rem;\n    }\n\n    /* Mockup */\n    .hero-image {\n      display: flex;\n      justify-content: center;\n    }\n\n    .mockup {\n      background: white;\n      border-radius: 12px;\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n      overflow: hidden;\n      width: 100%;\n      max-width: 400px;\n    }\n\n    .mockup-header {\n      background: #f8f9fa;\n      padding: 1rem;\n      display: flex;\n      gap: 0.5rem;\n    }\n\n    .mockup-dot {\n      width: 12px;\n      height: 12px;\n      border-radius: 50%;\n    }\n\n    .mockup-dot.red { background: #ff5f56; }\n    .mockup-dot.yellow { background: #ffbd2e; }\n    .mockup-dot.green { background: #27ca3f; }\n\n    .mockup-content {\n      padding: 1.5rem;\n    }\n\n    .mockup-card {\n      background: #f8f9fa;\n      border-radius: 8px;\n      padding: 1rem;\n      margin-bottom: 1rem;\n    }\n\n    .mockup-card-header {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n    }\n\n    .mockup-avatar {\n      width: 32px;\n      height: 32px;\n      background: #3498db;\n      border-radius: 50%;\n    }\n\n    .mockup-text {\n      flex: 1;\n    }\n\n    .mockup-line {\n      background: #dee2e6;\n      border-radius: 2px;\n      margin-bottom: 0.25rem;\n    }\n\n    .mockup-line.short {\n      height: 8px;\n      width: 60%;\n    }\n\n    .mockup-line.long {\n      height: 8px;\n      width: 100%;\n    }\n\n    /* Features Section */\n    .features {\n      padding: 5rem 2rem;\n      background: white;\n    }\n\n    .container {\n      max-width: 1200px;\n      margin: 0 auto;\n    }\n\n    .section-header {\n      text-align: center;\n      margin-bottom: 4rem;\n    }\n\n    .section-header h2 {\n      font-size: 2.5rem;\n      color: #2c3e50;\n      margin-bottom: 1rem;\n    }\n\n    .section-header p {\n      font-size: 1.1rem;\n      color: #6c757d;\n    }\n\n    .features-grid {\n      display: grid;\n      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n      gap: 2rem;\n    }\n\n    .feature-card {\n      padding: 2rem;\n      border-radius: 12px;\n      background: #f8f9fa;\n      text-align: center;\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n    }\n\n    .feature-card:hover {\n      transform: translateY(-5px);\n      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);\n    }\n\n    .feature-icon {\n      width: 64px;\n      height: 64px;\n      background: #3498db;\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      margin: 0 auto 1.5rem;\n      color: white;\n      position: relative;\n    }\n\n    .feature-icon i-lucide {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      color: white;\n    }\n\n    .feature-card h3 {\n      font-size: 1.5rem;\n      color: #2c3e50;\n      margin-bottom: 1rem;\n    }\n\n    .feature-card p {\n      color: #6c757d;\n      line-height: 1.6;\n    }\n\n    /* CTA Section */\n    .cta {\n      padding: 5rem 2rem;\n      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);\n      color: white;\n      text-align: center;\n    }\n\n    .cta-content h2 {\n      font-size: 2.5rem;\n      margin-bottom: 1rem;\n    }\n\n    .cta-content p {\n      font-size: 1.1rem;\n      margin-bottom: 2rem;\n      opacity: 0.9;\n    }\n\n\n\n    /* Responsive */\n    @media (max-width: 768px) {\n      .hero-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n      }\n\n      .hero-title {\n        font-size: 2.5rem;\n      }\n\n      .hero-buttons {\n        justify-content: center;\n      }\n\n      .features-grid {\n        grid-template-columns: 1fr;\n      }\n\n      .footer-content {\n        grid-template-columns: 1fr;\n        text-align: center;\n      }\n\n      .footer-links {\n        grid-template-columns: 1fr;\n      }\n\n      .nav {\n        gap: 1rem;\n      }\n\n      .nav-desktop {\n        display: none;\n      }\n\n      .mobile-menu-toggle {\n        display: block;\n      }\n\n      .mobile-menu {\n        display: block;\n      }\n    }\n\n    @media (max-width: 480px) {\n      .header-content {\n        padding: 0.75rem;\n      }\n\n      .logo h1 {\n        font-size: 1.25rem;\n      }\n\n      .hero-title {\n        font-size: 2rem;\n      }\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "IntegrationsSettingsComponent",
            "id": "component-IntegrationsSettingsComponent-ceb821f5be9887682a41ac70f0469f4cfe70a2d126100af5e28ee67cc18be4c4f8208308e03e4d9661189935f934fa66df7ee1d11bae9248cbc36808b61d050f",
            "file": "src/app/features/settings/components/integrations-settings/integrations-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-integrations-settings",
            "styleUrls": [],
            "styles": [
                "\n    .integrations-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"integrations-settings\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <i-lucide [img]=\"LinkIcon\" [size]=\"24\"></i-lucide>\n        Настройки интеграций\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Здесь будут настройки подключения внешних сервисов и API</p>\n      <p>Этап 7: Интеграции - в разработке</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "LinkIcon",
                    "defaultValue": "Link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { LucideAngularModule, Link } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-integrations-settings',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, LucideAngularModule],\r\n  template: `\r\n    <div class=\"integrations-settings\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            <i-lucide [img]=\"LinkIcon\" [size]=\"24\"></i-lucide>\r\n            Настройки интеграций\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <p>Здесь будут настройки подключения внешних сервисов и API</p>\r\n          <p>Этап 7: Интеграции - в разработке</p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .integrations-settings {\r\n      padding: 1rem 0;\r\n    }\r\n\r\n    mat-card {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-header {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-title {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.75rem;\r\n      font-size: 1.25rem;\r\n      color: #2c3e50;\r\n      margin: 0;\r\n\r\n      i-lucide {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-shrink: 0;\r\n      }\r\n    }\r\n\r\n    p {\r\n      color: #6c757d;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class IntegrationsSettingsComponent {\r\n  // Icons\r\n  readonly LinkIcon = Link;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .integrations-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-39520716b1de6c9e77d5c6391bd59e8fa522b47716d3ee3b369ba54e3e70d4a0240c05bd0342f79735ea49f74da9a789176cb5d3ebdff5763f75cd281c451fa2",
            "file": "src/app/shared/components/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [],
            "styles": [
                "\n    .layout-container {\n      min-height: 100vh;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .main-content {\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .main-content.with-header {\n      padding-top: 80px; /* Высота header */\n    }\n\n    .main-content.with-footer {\n      min-height: calc(100vh - 80px); /* 100vh минус высота header */\n    }\n\n    /* Для страниц без header (например, главная) */\n    .layout-container:not(.with-header) .main-content {\n      padding-top: 0;\n    }\n\n    /* Для страниц без footer */\n    .layout-container:not(.with-footer) .main-content {\n      min-height: 100vh;\n    }\n  "
            ],
            "template": "<div class=\"layout-container\" [class.with-header]=\"showHeader\" [class.with-footer]=\"showFooter\">\n  <app-header *ngIf=\"showHeader\"></app-header>\n\n  <main class=\"main-content\" [class.with-header]=\"showHeader\" [class.with-footer]=\"showFooter\">\n    <ng-content></ng-content>\n  </main>\n\n  <app-footer *ngIf=\"showFooter\"></app-footer>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "showFooter",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HeaderComponent } from './header.component';\nimport { FooterComponent } from './footer.component';\n\n\n\n@Component({\n  selector: 'app-layout',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent, FooterComponent],\n  template: `\n    <div class=\"layout-container\" [class.with-header]=\"showHeader\" [class.with-footer]=\"showFooter\">\n      <app-header *ngIf=\"showHeader\"></app-header>\n\n      <main class=\"main-content\" [class.with-header]=\"showHeader\" [class.with-footer]=\"showFooter\">\n        <ng-content></ng-content>\n      </main>\n\n      <app-footer *ngIf=\"showFooter\"></app-footer>\n    </div>\n  `,\n  styles: [`\n    .layout-container {\n      min-height: 100vh;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .main-content {\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .main-content.with-header {\n      padding-top: 80px; /* Высота header */\n    }\n\n    .main-content.with-footer {\n      min-height: calc(100vh - 80px); /* 100vh минус высота header */\n    }\n\n    /* Для страниц без header (например, главная) */\n    .layout-container:not(.with-header) .main-content {\n      padding-top: 0;\n    }\n\n    /* Для страниц без footer */\n    .layout-container:not(.with-footer) .main-content {\n      min-height: 100vh;\n    }\n  `]\n})\nexport class LayoutComponent {\n  @Input() showHeader = true;\n  @Input() showFooter = true;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .layout-container {\n      min-height: 100vh;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .main-content {\n      flex: 1;\n      display: flex;\n      flex-direction: column;\n    }\n\n    .main-content.with-header {\n      padding-top: 80px; /* Высота header */\n    }\n\n    .main-content.with-footer {\n      min-height: calc(100vh - 80px); /* 100vh минус высота header */\n    }\n\n    /* Для страниц без header (например, главная) */\n    .layout-container:not(.with-header) .main-content {\n      padding-top: 0;\n    }\n\n    /* Для страниц без footer */\n    .layout-container:not(.with-footer) .main-content {\n      min-height: 100vh;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-7dbd9bc7d3510045d5bb00ab5d8462a593de0ad0630385f9572f6c73af93a583b065af025ecd8af7cc6069bde5eddec3014a6f4d168ffc459a456e26a360b50b",
            "file": "src/app/features/auth/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "error$",
                    "defaultValue": "this.store.select(AuthSelectors.selectError)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "Eye",
                    "defaultValue": "Eye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "EyeOff",
                    "defaultValue": "EyeOff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "Loader2",
                    "defaultValue": "Loader2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "loading$",
                    "defaultValue": "this.store.select(AuthSelectors.selectIsLoading)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "subscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFieldInvalid",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "subscribeToAuthState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\nimport { Router, RouterLink } from '@angular/router';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { LucideAngularModule, Loader2, Eye, EyeOff } from 'lucide-angular';\nimport { Store } from '@ngrx/store';\n\nimport { AuthService } from '@services';\nimport { Subscription } from 'rxjs';\nimport * as AuthActions from '../../store/auth.actions';\nimport * as AuthSelectors from '../../store/auth.selectors';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterLink,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatProgressSpinnerModule,\n    LucideAngularModule\n  ],\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  private readonly authService = inject(AuthService);\n  private readonly router = inject(Router);\n  private readonly fb = inject(FormBuilder);\n  private readonly store = inject(Store);\n\n  // Lucide icons для standalone компонентов\n  readonly Loader2 = Loader2;\n  readonly Eye = Eye;\n  readonly EyeOff = EyeOff;\n\n  loginForm!: FormGroup;\n  loading$ = this.store.select(AuthSelectors.selectIsLoading);\n  error$ = this.store.select(AuthSelectors.selectError);\n  hidePassword = true;\n  private readonly subscription = new Subscription();\n\n  ngOnInit(): void {\n    this.initForm();\n    this.subscribeToAuthState();\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n\n  private initForm(): void {\n    this.loginForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      rememberMe: [false]\n    });\n  }\n\n  private subscribeToAuthState(): void {\n    this.subscription.add(\n      this.authService.currentUser$.subscribe(user => {\n        if (user) {\n          this.router.navigate(['/dashboard']);\n        }\n      })\n    );\n  }\n\n  onSubmit(): void {\n    if (this.loginForm.valid) {\n      const { email, password, rememberMe } = this.loginForm.value;\n      // Отправляем только email и password, rememberMe обрабатываем отдельно\n      this.store.dispatch(AuthActions.login({ credentials: { email, password } }));\n\n      // Обработка rememberMe (можно сохранить в localStorage)\n      if (rememberMe) {\n        localStorage.setItem('rememberMe', 'true');\n      } else {\n        localStorage.removeItem('rememberMe');\n      }\n    }\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.loginForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n\n  getErrorMessage(fieldName: string): string {\n    const field = this.loginForm.get(fieldName);\n    if (!field?.errors) return '';\n\n    if (field.errors['required']) {\n      return 'Это поле обязательно для заполнения';\n    }\n    if (field.errors['email']) {\n      return 'Введите корректный email';\n    }\n    if (field.errors['minlength']) {\n      return `Минимальная длина ${field.errors['minlength'].requiredLength} символов`;\n    }\n\n    return 'Неверное значение';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  padding: 20px;\r\n}\r\n\r\n.login-card {\r\n  max-width: 400px;\r\n  width: 100%;\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n\r\n.login-card mat-card-header {\r\n  text-align: center;\r\n  padding: 24px 24px 0;\r\n}\r\n\r\n.login-card mat-card-title {\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  color: #333;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.login-card mat-card-subtitle {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.login-card mat-card-content {\r\n  padding: 24px;\r\n}\r\n\r\n.login-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n.remember-me {\r\n  margin-top: 8px;\r\n  color: #666;\r\n}\r\n\r\n.error-message {\r\n  margin-top: 8px;\r\n  text-align: center;\r\n}\r\n\r\n.login-button {\r\n  margin-top: 16px;\r\n  height: 48px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n}\r\n\r\n.login-button mat-spinner {\r\n  margin-right: 8px;\r\n}\r\n\r\n.login-card mat-card-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 16px 24px 24px;\r\n  margin: 0;\r\n}\r\n\r\n.login-card mat-card-actions a {\r\n  color: #667eea;\r\n  text-decoration: none;\r\n  font-size: 14px;\r\n}\r\n\r\n.login-card mat-card-actions a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n// Responsive design\r\n@media (max-width: 480px) {\r\n  .login-container {\r\n    padding: 16px;\r\n  }\r\n\r\n  .login-card {\r\n    max-width: 100%;\r\n  }\r\n\r\n  .login-card mat-card-content {\r\n    padding: 16px;\r\n  }\r\n\r\n  .login-card mat-card-actions {\r\n    padding: 12px 16px 16px;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n    align-items: center;\r\n  }\r\n}\r\n\r\n// Material form field customizations\r\n::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {\r\n  color: #ddd;\r\n}\r\n\r\n::ng-deep .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {\r\n  color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-form-field.mat-focused .mat-form-field-label {\r\n  color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-raised-button.mat-primary {\r\n  background-color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-raised-button.mat-primary:hover {\r\n  background-color: #5a6fd8;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"login-container\">\n  <div class=\"login-card\">\n    <div class=\"login-header\">\n      <h1>Вход в систему</h1>\n      <p>Войдите в свой аккаунт для продолжения работы</p>\n    </div>\n\n    <mat-card class=\"login-form-card\">\n      <mat-card-content>\n        <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\" class=\"login-form\">\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Email</mat-label>\n            <input\n              matInput\n              type=\"email\"\n              formControlName=\"email\"\n              placeholder=\"Введите ваш email\"\n              autocomplete=\"email\">\n            <mat-error *ngIf=\"isFieldInvalid('email')\">\n              {{ getErrorMessage('email') }}\n            </mat-error>\n          </mat-form-field>\n\n          <mat-form-field appearance=\"outline\" class=\"form-field\">\n            <mat-label>Пароль</mat-label>\n            <input\n              matInput\n              [type]=\"hidePassword ? 'password' : 'text'\"\n              formControlName=\"password\"\n              placeholder=\"Введите ваш пароль\"\n              autocomplete=\"current-password\">\n            <button\n              mat-icon-button\n              matSuffix\n              (click)=\"hidePassword = !hidePassword\"\n              [attr.aria-label]=\"'Hide password'\"\n              [attr.aria-pressed]=\"hidePassword\"\n              type=\"button\">\n              <i-lucide [img]=\"hidePassword ? EyeOff : Eye\" [size]=\"20\"></i-lucide>\n            </button>\n            <mat-error *ngIf=\"isFieldInvalid('password')\">\n              {{ getErrorMessage('password') }}\n            </mat-error>\n          </mat-form-field>\n\n          <div class=\"form-options\">\n            <mat-checkbox formControlName=\"rememberMe\" class=\"remember-me\">\n              Запомнить меня\n            </mat-checkbox>\n            <a routerLink=\"/auth/forgot-password\" class=\"forgot-password\">\n              Забыли пароль?\n            </a>\n          </div>\n\n          <button\n            mat-raised-button\n            color=\"primary\"\n            type=\"submit\"\n            class=\"login-button\"\n            [disabled]=\"loginForm.invalid || (loading$ | async)\">\n            <i-lucide class=\"icon-center\" [img]=\"Loader2\" [size]=\"20\" *ngIf=\"loading$ | async\"></i-lucide>\n            <span *ngIf=\"(loading$ | async) === false\">Войти</span>\n          </button>\n        </form>\n      </mat-card-content>\n    </mat-card>\n\n    <div class=\"login-footer\">\n      <p>Нет аккаунта? <a routerLink=\"/auth/register\">Зарегистрироваться</a></p>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "NotificationSettingsComponent",
            "id": "component-NotificationSettingsComponent-6ac91331b9a2e252b011db32d60502d1960cda23d97e0afa541ead5119a01058e95ddb787baa7da6c01d26d438223ec55c73416883185be22879f7b298b1f53f",
            "file": "src/app/features/settings/components/notification-settings/notification-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification-settings",
            "styleUrls": [],
            "styles": [
                "\n    .notification-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"notification-settings\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <i-lucide [img]=\"BellIcon\" [size]=\"24\"></i-lucide>\n        Настройки уведомлений\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Здесь будут настройки уведомлений и оповещений</p>\n      <p>Этап 4: Уведомления - в разработке</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "BellIcon",
                    "defaultValue": "Bell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { LucideAngularModule, Bell } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-notification-settings',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, LucideAngularModule],\r\n  template: `\r\n    <div class=\"notification-settings\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            <i-lucide [img]=\"BellIcon\" [size]=\"24\"></i-lucide>\r\n            Настройки уведомлений\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <p>Здесь будут настройки уведомлений и оповещений</p>\r\n          <p>Этап 4: Уведомления - в разработке</p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .notification-settings {\r\n      padding: 1rem 0;\r\n    }\r\n\r\n    mat-card {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-header {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-title {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.75rem;\r\n      font-size: 1.25rem;\r\n      color: #2c3e50;\r\n      margin: 0;\r\n\r\n      i-lucide {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-shrink: 0;\r\n      }\r\n    }\r\n\r\n    p {\r\n      color: #6c757d;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class NotificationSettingsComponent {\r\n  // Icons\r\n  readonly BellIcon = Bell;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .notification-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "NotificationToastComponent",
            "id": "component-NotificationToastComponent-00d226823327b2f2d20ab486e849f1d54788c2985f8584c41914ec23c0ecbbcca364bfe0abd400d19ba0ff798d38de5a8df0aa3eace3ff9ab3f1db3f184cb92b",
            "file": "src/app/shared/components/notification-toast/notification-toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-notification-toast",
            "styleUrls": [],
            "styles": [
                "\n    .notification-container {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 1000;\n      max-width: 400px;\n    }\n\n    .notification-toast {\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      margin-bottom: 10px;\n      padding: 16px;\n      border-left: 4px solid;\n    }\n\n    .notification-success {\n      border-left-color: #4caf50;\n    }\n\n    .notification-error {\n      border-left-color: #f44336;\n    }\n\n    .notification-warning {\n      border-left-color: #ff9800;\n    }\n\n    .notification-info {\n      border-left-color: #2196f3;\n    }\n\n    .notification-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n\n    .notification-title {\n      font-weight: 600;\n      font-size: 14px;\n      color: #333;\n    }\n\n    .notification-close {\n      background: none;\n      border: none;\n      font-size: 18px;\n      cursor: pointer;\n      color: #666;\n      padding: 0;\n      width: 20px;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 50%;\n      transition: background-color 0.2s;\n    }\n\n    .notification-close:hover {\n      background-color: #f0f0f0;\n      color: #333;\n    }\n\n    .notification-message {\n      font-size: 13px;\n      color: #666;\n      line-height: 1.4;\n    }\n  "
            ],
            "template": "<div class=\"notification-container\">\n  <div\n    *ngFor=\"let notification of notifications$ | async; trackBy: trackByNotification\"\n    class=\"notification-toast\"\n    [ngClass]=\"'notification-' + notification.type\"\n    [@slideInOut]\n  >\n    <div class=\"notification-header\">\n      <span class=\"notification-title\">{{ notification.title }}</span>\n      <button\n        class=\"notification-close\"\n        (click)=\"removeNotification(notification.id)\"\n        aria-label=\"Закрыть уведомление\"\n      >\n        ×\n      </button>\n    </div>\n    <div class=\"notification-message\">{{ notification.message }}</div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 131,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "notifications$",
                    "defaultValue": "this.notificationService.notifications$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Notification[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 130
                },
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 129,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removeNotification",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByNotification",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "notification",
                            "type": "Notification",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "notification",
                            "type": "Notification",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgFor"
                },
                {
                    "name": "NgClass"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, inject } from '@angular/core';\nimport { NotificationService, Notification } from '@services';\nimport { Observable, Subject } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { AsyncPipe, NgFor, NgClass } from '@angular/common';\n\n\n\n@Component({\n  selector: 'app-notification-toast',\n  template: `\n    <div class=\"notification-container\">\n      <div\n        *ngFor=\"let notification of notifications$ | async; trackBy: trackByNotification\"\n        class=\"notification-toast\"\n        [ngClass]=\"'notification-' + notification.type\"\n        [@slideInOut]\n      >\n        <div class=\"notification-header\">\n          <span class=\"notification-title\">{{ notification.title }}</span>\n          <button\n            class=\"notification-close\"\n            (click)=\"removeNotification(notification.id)\"\n            aria-label=\"Закрыть уведомление\"\n          >\n            ×\n          </button>\n        </div>\n        <div class=\"notification-message\">{{ notification.message }}</div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .notification-container {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 1000;\n      max-width: 400px;\n    }\n\n    .notification-toast {\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      margin-bottom: 10px;\n      padding: 16px;\n      border-left: 4px solid;\n    }\n\n    .notification-success {\n      border-left-color: #4caf50;\n    }\n\n    .notification-error {\n      border-left-color: #f44336;\n    }\n\n    .notification-warning {\n      border-left-color: #ff9800;\n    }\n\n    .notification-info {\n      border-left-color: #2196f3;\n    }\n\n    .notification-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n\n    .notification-title {\n      font-weight: 600;\n      font-size: 14px;\n      color: #333;\n    }\n\n    .notification-close {\n      background: none;\n      border: none;\n      font-size: 18px;\n      cursor: pointer;\n      color: #666;\n      padding: 0;\n      width: 20px;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 50%;\n      transition: background-color 0.2s;\n    }\n\n    .notification-close:hover {\n      background-color: #f0f0f0;\n      color: #333;\n    }\n\n    .notification-message {\n      font-size: 13px;\n      color: #666;\n      line-height: 1.4;\n    }\n  `],\n  animations: [\n    trigger('slideInOut', [\n      state('void', style({\n        transform: 'translateX(100%)',\n        opacity: 0\n      })),\n      state('*', style({\n        transform: 'translateX(0)',\n        opacity: 1\n      })),\n      transition('void => *', [\n        animate('300ms ease-out')\n      ]),\n      transition('* => void', [\n        animate('300ms ease-in')\n      ])\n    ])\n  ],\n  imports: [AsyncPipe, NgFor, NgClass],\n  standalone: true\n})\nexport class NotificationToastComponent implements OnDestroy {\n  private readonly notificationService = inject(NotificationService);\n  notifications$: Observable<Notification[]> = this.notificationService.notifications$;\n  private readonly destroy$ = new Subject<void>();\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  removeNotification(id: string): void {\n    this.notificationService.removeNotification(id);\n  }\n\n  trackByNotification(index: number, notification: Notification): string {\n    return notification.id;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .notification-container {\n      position: fixed;\n      top: 20px;\n      right: 20px;\n      z-index: 1000;\n      max-width: 400px;\n    }\n\n    .notification-toast {\n      background: white;\n      border-radius: 8px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n      margin-bottom: 10px;\n      padding: 16px;\n      border-left: 4px solid;\n    }\n\n    .notification-success {\n      border-left-color: #4caf50;\n    }\n\n    .notification-error {\n      border-left-color: #f44336;\n    }\n\n    .notification-warning {\n      border-left-color: #ff9800;\n    }\n\n    .notification-info {\n      border-left-color: #2196f3;\n    }\n\n    .notification-header {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n\n    .notification-title {\n      font-weight: 600;\n      font-size: 14px;\n      color: #333;\n    }\n\n    .notification-close {\n      background: none;\n      border: none;\n      font-size: 18px;\n      cursor: pointer;\n      color: #666;\n      padding: 0;\n      width: 20px;\n      height: 20px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 50%;\n      transition: background-color 0.2s;\n    }\n\n    .notification-close:hover {\n      background-color: #f0f0f0;\n      color: #333;\n    }\n\n    .notification-message {\n      font-size: 13px;\n      color: #666;\n      line-height: 1.4;\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnDestroy"
            ]
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-1908c202c4a07f1f1199f55619cb4e48eac23cab961a68328a53d5fc49bba6e922b132725f1221f789d2fa5ea54ceee9cb55df2d36401a27371021bacfe7ddcd",
            "file": "src/app/shared/components/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page-not-found",
            "styleUrls": [],
            "styles": [
                "\n    .not-found-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n      padding: 1rem;\n      background: linear-gradient(135deg,\n        #667eea 0%,\n        #764ba2 25%,\n        #e8e6ff 50%,\n        #f3f2ff 75%,\n        #ffffff 100%);\n      position: relative;\n      overflow: hidden;\n    }\n\n    .background-animation {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n    }\n\n    .floating-shape {\n      position: absolute;\n      border-radius: 50%;\n      background: rgba(102, 126, 234, 0.05);\n      animation: float 8s ease-in-out infinite;\n      will-change: transform;\n    }\n\n    .shape-1 {\n      width: clamp(40px, 6vw, 80px);\n      height: clamp(40px, 6vw, 80px);\n      top: 15%;\n      left: 8%;\n      animation-delay: 0s;\n    }\n\n    .shape-2 {\n      width: clamp(60px, 8vw, 120px);\n      height: clamp(60px, 8vw, 120px);\n      top: 65%;\n      right: 12%;\n      animation-delay: 2s;\n    }\n\n    .shape-3 {\n      width: clamp(30px, 4vw, 60px);\n      height: clamp(30px, 4vw, 60px);\n      bottom: 25%;\n      left: 15%;\n      animation-delay: 4s;\n    }\n\n    @keyframes float {\n      0%, 100% {\n        transform: translateY(0px) rotate(0deg);\n        opacity: 0.6;\n      }\n      50% {\n        transform: translateY(-15px) rotate(90deg);\n        opacity: 0.9;\n      }\n    }\n\n    .not-found-content {\n      text-align: center;\n      max-width: min(600px, 90vw);\n      background: #ffffff;\n      padding: clamp(2rem, 6vw, 4rem) clamp(1.5rem, 4vw, 3rem);\n      border-radius: 16px;\n      box-shadow: 0 4px 16px rgba(102, 126, 234, 0.1);\n      position: relative;\n      z-index: 1;\n      animation: slideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n    }\n\n    @keyframes slideIn {\n      from {\n        opacity: 0;\n        transform: translateY(20px) scale(0.98);\n      }\n      to {\n        opacity: 1;\n        transform: translateY(0) scale(1);\n      }\n    }\n\n    .error-code {\n      font-size: clamp(4rem, 15vw, 6rem);\n      font-weight: 900;\n      color: #667eea;\n      line-height: 0.9;\n      margin-bottom: clamp(1rem, 3vw, 1.5rem);\n      text-align: center;\n    }\n\n    .error-title {\n      font-size: clamp(1.5rem, 5vw, 2rem);\n      font-weight: 600;\n      color: #2d3748;\n      margin-bottom: clamp(1rem, 3vw, 1.5rem);\n      line-height: 1.2;\n      text-align: center;\n    }\n\n    .error-description {\n      font-size: clamp(0.875rem, 2.5vw, 1rem);\n      color: #4a5568;\n      margin-bottom: clamp(2rem, 5vw, 3rem);\n      line-height: 1.6;\n      max-width: 450px;\n      margin-left: auto;\n      margin-right: auto;\n      text-align: center;\n    }\n\n    .buttons {\n      display: flex;\n      gap: clamp(1rem, 3vw, 1.5rem);\n      justify-content: center;\n      flex-wrap: wrap;\n    }\n\n    .btn {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      gap: 0.75rem;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 8px;\n      font-size: clamp(0.875rem, 2.5vw, 1rem);\n      font-weight: 600;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      text-decoration: none;\n      position: relative;\n      overflow: hidden;\n      min-width: clamp(120px, 25vw, 160px);\n      outline: none;\n    }\n\n    .btn--primary {\n      background: linear-gradient(90deg, #667eea, #764ba2);\n      color: #ffffff;\n      box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);\n    }\n\n    .btn--primary:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);\n    }\n\n    .btn--primary:focus {\n      outline: 2px solid #667eea;\n      outline-offset: 2px;\n    }\n\n    .btn--outline {\n      background: #ffffff;\n      border: 2px solid;\n      border-image: linear-gradient(90deg, #667eea, #764ba2) 1;\n      color: #667eea;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n    }\n\n    .btn--outline:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n      background: linear-gradient(90deg, #667eea, #764ba2);\n      color: #ffffff;\n    }\n\n    .btn--outline:focus {\n      outline: 2px solid #667eea;\n      outline-offset: 2px;\n    }\n\n    .icon {\n      width: clamp(1rem, 2.5vw, 1.2rem);\n      height: clamp(1rem, 2.5vw, 1.2rem);\n      transition: transform 0.2s ease;\n      flex-shrink: 0;\n    }\n\n    .btn:hover .icon {\n      transform: scale(1.1);\n    }\n\n    /* Адаптивность */\n    @media (max-width: 768px) {\n      .not-found-container {\n        padding: 0.5rem;\n      }\n\n      .not-found-content {\n        margin: 0.5rem;\n        padding: clamp(1.5rem, 6vw, 2rem) clamp(1rem, 4vw, 1.5rem);\n      }\n\n      .buttons {\n        flex-direction: column;\n        align-items: center;\n        gap: 1rem;\n      }\n\n      .btn {\n        width: 100%;\n        max-width: 280px;\n      }\n    }\n\n    @media (max-width: 480px) {\n      .not-found-content {\n        padding: clamp(1.5rem, 6vw, 2.5rem) clamp(1rem, 4vw, 1.5rem);\n      }\n\n      .error-code {\n        font-size: clamp(3rem, 20vw, 4rem);\n      }\n\n      .error-title {\n        font-size: clamp(1.25rem, 8vw, 1.5rem);\n      }\n\n      .error-description {\n        font-size: clamp(0.8rem, 4vw, 0.875rem);\n      }\n    }\n\n    /* Улучшения для слабых устройств */\n    @media (prefers-reduced-motion: reduce) {\n      .floating-shape {\n        animation: none;\n      }\n\n      .btn {\n        transition: none;\n      }\n\n      .btn:hover {\n        transform: none;\n      }\n\n      .btn:hover .icon {\n        transform: none;\n      }\n    }\n\n    /* Поддержка высокого DPI */\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n      .not-found-content {\n        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.15);\n      }\n    }\n\n    /* Темная тема - только если пользователь явно предпочитает */\n    @media (prefers-color-scheme: dark) {\n      .not-found-content {\n        background: #1a202c;\n        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\n      }\n\n      .error-code {\n        color: #667eea;\n      }\n\n      .error-title {\n        color: #f7fafc;\n      }\n\n      .error-description {\n        color: #cbd5e0;\n      }\n\n      .btn--outline {\n        background: #1a202c;\n        color: #667eea;\n        border-color: #667eea;\n      }\n\n      .btn--outline:hover {\n        background: linear-gradient(90deg, #667eea, #764ba2);\n        color: #ffffff;\n      }\n    }\n  "
            ],
            "template": "<main class=\"not-found-container\" role=\"main\">\n  <div class=\"background-animation\">\n    <div class=\"floating-shape shape-1\"></div>\n    <div class=\"floating-shape shape-2\"></div>\n    <div class=\"floating-shape shape-3\"></div>\n  </div>\n\n  <section class=\"not-found-content\" role=\"alert\" aria-labelledby=\"error-title\">\n    <h1 id=\"error-title\" class=\"error-code\">404</h1>\n    <h2 class=\"error-title\">Страница не найдена</h2>\n    <p class=\"error-description\">\n      К сожалению, запрашиваемая страница не существует или была перемещена.\n    </p>\n\n    <div class=\"buttons\" role=\"group\" aria-label=\"Действия навигации\">\n      <button\n        class=\"btn btn--outline\"\n        (click)=\"goBack()\"\n        type=\"button\"\n        aria-label=\"Вернуться на предыдущую страницу\">\n        <lucide-icon name=\"arrow-left\" class=\"icon\" aria-hidden=\"true\"></lucide-icon>\n        <span>Назад</span>\n      </button>\n      <button\n        class=\"btn btn--primary\"\n        (click)=\"goHome()\"\n        type=\"button\"\n        aria-label=\"Перейти на главную страницу\">\n        <lucide-icon name=\"home\" class=\"icon\" aria-hidden=\"true\"></lucide-icon>\n        <span>На главную</span>\n      </button>\n    </div>\n  </section>\n</main>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 340,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 342,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "goHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 346,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LucideAngularModule } from 'lucide-angular';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-page-not-found',\r\n  standalone: true,\r\n  imports: [CommonModule, LucideAngularModule],\r\n  template: `\r\n    <main class=\"not-found-container\" role=\"main\">\r\n      <div class=\"background-animation\">\r\n        <div class=\"floating-shape shape-1\"></div>\r\n        <div class=\"floating-shape shape-2\"></div>\r\n        <div class=\"floating-shape shape-3\"></div>\r\n      </div>\r\n\r\n      <section class=\"not-found-content\" role=\"alert\" aria-labelledby=\"error-title\">\r\n        <h1 id=\"error-title\" class=\"error-code\">404</h1>\r\n        <h2 class=\"error-title\">Страница не найдена</h2>\r\n        <p class=\"error-description\">\r\n          К сожалению, запрашиваемая страница не существует или была перемещена.\r\n        </p>\r\n\r\n        <div class=\"buttons\" role=\"group\" aria-label=\"Действия навигации\">\r\n          <button\r\n            class=\"btn btn--outline\"\r\n            (click)=\"goBack()\"\r\n            type=\"button\"\r\n            aria-label=\"Вернуться на предыдущую страницу\">\r\n            <lucide-icon name=\"arrow-left\" class=\"icon\" aria-hidden=\"true\"></lucide-icon>\r\n            <span>Назад</span>\r\n          </button>\r\n          <button\r\n            class=\"btn btn--primary\"\r\n            (click)=\"goHome()\"\r\n            type=\"button\"\r\n            aria-label=\"Перейти на главную страницу\">\r\n            <lucide-icon name=\"home\" class=\"icon\" aria-hidden=\"true\"></lucide-icon>\r\n            <span>На главную</span>\r\n          </button>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  `,\r\n  styles: [`\r\n    .not-found-container {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      min-height: 100vh;\r\n      padding: 1rem;\r\n      background: linear-gradient(135deg,\r\n        #667eea 0%,\r\n        #764ba2 25%,\r\n        #e8e6ff 50%,\r\n        #f3f2ff 75%,\r\n        #ffffff 100%);\r\n      position: relative;\r\n      overflow: hidden;\r\n    }\r\n\r\n    .background-animation {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      pointer-events: none;\r\n    }\r\n\r\n    .floating-shape {\r\n      position: absolute;\r\n      border-radius: 50%;\r\n      background: rgba(102, 126, 234, 0.05);\r\n      animation: float 8s ease-in-out infinite;\r\n      will-change: transform;\r\n    }\r\n\r\n    .shape-1 {\r\n      width: clamp(40px, 6vw, 80px);\r\n      height: clamp(40px, 6vw, 80px);\r\n      top: 15%;\r\n      left: 8%;\r\n      animation-delay: 0s;\r\n    }\r\n\r\n    .shape-2 {\r\n      width: clamp(60px, 8vw, 120px);\r\n      height: clamp(60px, 8vw, 120px);\r\n      top: 65%;\r\n      right: 12%;\r\n      animation-delay: 2s;\r\n    }\r\n\r\n    .shape-3 {\r\n      width: clamp(30px, 4vw, 60px);\r\n      height: clamp(30px, 4vw, 60px);\r\n      bottom: 25%;\r\n      left: 15%;\r\n      animation-delay: 4s;\r\n    }\r\n\r\n    @keyframes float {\r\n      0%, 100% {\r\n        transform: translateY(0px) rotate(0deg);\r\n        opacity: 0.6;\r\n      }\r\n      50% {\r\n        transform: translateY(-15px) rotate(90deg);\r\n        opacity: 0.9;\r\n      }\r\n    }\r\n\r\n    .not-found-content {\r\n      text-align: center;\r\n      max-width: min(600px, 90vw);\r\n      background: #ffffff;\r\n      padding: clamp(2rem, 6vw, 4rem) clamp(1.5rem, 4vw, 3rem);\r\n      border-radius: 16px;\r\n      box-shadow: 0 4px 16px rgba(102, 126, 234, 0.1);\r\n      position: relative;\r\n      z-index: 1;\r\n      animation: slideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);\r\n    }\r\n\r\n    @keyframes slideIn {\r\n      from {\r\n        opacity: 0;\r\n        transform: translateY(20px) scale(0.98);\r\n      }\r\n      to {\r\n        opacity: 1;\r\n        transform: translateY(0) scale(1);\r\n      }\r\n    }\r\n\r\n    .error-code {\r\n      font-size: clamp(4rem, 15vw, 6rem);\r\n      font-weight: 900;\r\n      color: #667eea;\r\n      line-height: 0.9;\r\n      margin-bottom: clamp(1rem, 3vw, 1.5rem);\r\n      text-align: center;\r\n    }\r\n\r\n    .error-title {\r\n      font-size: clamp(1.5rem, 5vw, 2rem);\r\n      font-weight: 600;\r\n      color: #2d3748;\r\n      margin-bottom: clamp(1rem, 3vw, 1.5rem);\r\n      line-height: 1.2;\r\n      text-align: center;\r\n    }\r\n\r\n    .error-description {\r\n      font-size: clamp(0.875rem, 2.5vw, 1rem);\r\n      color: #4a5568;\r\n      margin-bottom: clamp(2rem, 5vw, 3rem);\r\n      line-height: 1.6;\r\n      max-width: 450px;\r\n      margin-left: auto;\r\n      margin-right: auto;\r\n      text-align: center;\r\n    }\r\n\r\n    .buttons {\r\n      display: flex;\r\n      gap: clamp(1rem, 3vw, 1.5rem);\r\n      justify-content: center;\r\n      flex-wrap: wrap;\r\n    }\r\n\r\n    .btn {\r\n      display: inline-flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      gap: 0.75rem;\r\n      padding: 12px 24px;\r\n      border: none;\r\n      border-radius: 8px;\r\n      font-size: clamp(0.875rem, 2.5vw, 1rem);\r\n      font-weight: 600;\r\n      cursor: pointer;\r\n      transition: all 0.2s ease;\r\n      text-decoration: none;\r\n      position: relative;\r\n      overflow: hidden;\r\n      min-width: clamp(120px, 25vw, 160px);\r\n      outline: none;\r\n    }\r\n\r\n    .btn--primary {\r\n      background: linear-gradient(90deg, #667eea, #764ba2);\r\n      color: #ffffff;\r\n      box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);\r\n    }\r\n\r\n    .btn--primary:hover {\r\n      transform: translateY(-2px);\r\n      box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);\r\n    }\r\n\r\n    .btn--primary:focus {\r\n      outline: 2px solid #667eea;\r\n      outline-offset: 2px;\r\n    }\r\n\r\n    .btn--outline {\r\n      background: #ffffff;\r\n      border: 2px solid;\r\n      border-image: linear-gradient(90deg, #667eea, #764ba2) 1;\r\n      color: #667eea;\r\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\r\n    }\r\n\r\n    .btn--outline:hover {\r\n      transform: translateY(-2px);\r\n      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\r\n      background: linear-gradient(90deg, #667eea, #764ba2);\r\n      color: #ffffff;\r\n    }\r\n\r\n    .btn--outline:focus {\r\n      outline: 2px solid #667eea;\r\n      outline-offset: 2px;\r\n    }\r\n\r\n    .icon {\r\n      width: clamp(1rem, 2.5vw, 1.2rem);\r\n      height: clamp(1rem, 2.5vw, 1.2rem);\r\n      transition: transform 0.2s ease;\r\n      flex-shrink: 0;\r\n    }\r\n\r\n    .btn:hover .icon {\r\n      transform: scale(1.1);\r\n    }\r\n\r\n    /* Адаптивность */\r\n    @media (max-width: 768px) {\r\n      .not-found-container {\r\n        padding: 0.5rem;\r\n      }\r\n\r\n      .not-found-content {\r\n        margin: 0.5rem;\r\n        padding: clamp(1.5rem, 6vw, 2rem) clamp(1rem, 4vw, 1.5rem);\r\n      }\r\n\r\n      .buttons {\r\n        flex-direction: column;\r\n        align-items: center;\r\n        gap: 1rem;\r\n      }\r\n\r\n      .btn {\r\n        width: 100%;\r\n        max-width: 280px;\r\n      }\r\n    }\r\n\r\n    @media (max-width: 480px) {\r\n      .not-found-content {\r\n        padding: clamp(1.5rem, 6vw, 2.5rem) clamp(1rem, 4vw, 1.5rem);\r\n      }\r\n\r\n      .error-code {\r\n        font-size: clamp(3rem, 20vw, 4rem);\r\n      }\r\n\r\n      .error-title {\r\n        font-size: clamp(1.25rem, 8vw, 1.5rem);\r\n      }\r\n\r\n      .error-description {\r\n        font-size: clamp(0.8rem, 4vw, 0.875rem);\r\n      }\r\n    }\r\n\r\n    /* Улучшения для слабых устройств */\r\n    @media (prefers-reduced-motion: reduce) {\r\n      .floating-shape {\r\n        animation: none;\r\n      }\r\n\r\n      .btn {\r\n        transition: none;\r\n      }\r\n\r\n      .btn:hover {\r\n        transform: none;\r\n      }\r\n\r\n      .btn:hover .icon {\r\n        transform: none;\r\n      }\r\n    }\r\n\r\n    /* Поддержка высокого DPI */\r\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\r\n      .not-found-content {\r\n        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.15);\r\n      }\r\n    }\r\n\r\n    /* Темная тема - только если пользователь явно предпочитает */\r\n    @media (prefers-color-scheme: dark) {\r\n      .not-found-content {\r\n        background: #1a202c;\r\n        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\r\n      }\r\n\r\n      .error-code {\r\n        color: #667eea;\r\n      }\r\n\r\n      .error-title {\r\n        color: #f7fafc;\r\n      }\r\n\r\n      .error-description {\r\n        color: #cbd5e0;\r\n      }\r\n\r\n      .btn--outline {\r\n        background: #1a202c;\r\n        color: #667eea;\r\n        border-color: #667eea;\r\n      }\r\n\r\n      .btn--outline:hover {\r\n        background: linear-gradient(90deg, #667eea, #764ba2);\r\n        color: #ffffff;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class PageNotFoundComponent {\r\n  private readonly router = inject(Router);\r\n\r\n  goBack(): void {\r\n    window.history.back();\r\n  }\r\n\r\n  goHome(): void {\r\n    this.router.navigate(['/']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .not-found-container {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      min-height: 100vh;\n      padding: 1rem;\n      background: linear-gradient(135deg,\n        #667eea 0%,\n        #764ba2 25%,\n        #e8e6ff 50%,\n        #f3f2ff 75%,\n        #ffffff 100%);\n      position: relative;\n      overflow: hidden;\n    }\n\n    .background-animation {\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      pointer-events: none;\n    }\n\n    .floating-shape {\n      position: absolute;\n      border-radius: 50%;\n      background: rgba(102, 126, 234, 0.05);\n      animation: float 8s ease-in-out infinite;\n      will-change: transform;\n    }\n\n    .shape-1 {\n      width: clamp(40px, 6vw, 80px);\n      height: clamp(40px, 6vw, 80px);\n      top: 15%;\n      left: 8%;\n      animation-delay: 0s;\n    }\n\n    .shape-2 {\n      width: clamp(60px, 8vw, 120px);\n      height: clamp(60px, 8vw, 120px);\n      top: 65%;\n      right: 12%;\n      animation-delay: 2s;\n    }\n\n    .shape-3 {\n      width: clamp(30px, 4vw, 60px);\n      height: clamp(30px, 4vw, 60px);\n      bottom: 25%;\n      left: 15%;\n      animation-delay: 4s;\n    }\n\n    @keyframes float {\n      0%, 100% {\n        transform: translateY(0px) rotate(0deg);\n        opacity: 0.6;\n      }\n      50% {\n        transform: translateY(-15px) rotate(90deg);\n        opacity: 0.9;\n      }\n    }\n\n    .not-found-content {\n      text-align: center;\n      max-width: min(600px, 90vw);\n      background: #ffffff;\n      padding: clamp(2rem, 6vw, 4rem) clamp(1.5rem, 4vw, 3rem);\n      border-radius: 16px;\n      box-shadow: 0 4px 16px rgba(102, 126, 234, 0.1);\n      position: relative;\n      z-index: 1;\n      animation: slideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);\n    }\n\n    @keyframes slideIn {\n      from {\n        opacity: 0;\n        transform: translateY(20px) scale(0.98);\n      }\n      to {\n        opacity: 1;\n        transform: translateY(0) scale(1);\n      }\n    }\n\n    .error-code {\n      font-size: clamp(4rem, 15vw, 6rem);\n      font-weight: 900;\n      color: #667eea;\n      line-height: 0.9;\n      margin-bottom: clamp(1rem, 3vw, 1.5rem);\n      text-align: center;\n    }\n\n    .error-title {\n      font-size: clamp(1.5rem, 5vw, 2rem);\n      font-weight: 600;\n      color: #2d3748;\n      margin-bottom: clamp(1rem, 3vw, 1.5rem);\n      line-height: 1.2;\n      text-align: center;\n    }\n\n    .error-description {\n      font-size: clamp(0.875rem, 2.5vw, 1rem);\n      color: #4a5568;\n      margin-bottom: clamp(2rem, 5vw, 3rem);\n      line-height: 1.6;\n      max-width: 450px;\n      margin-left: auto;\n      margin-right: auto;\n      text-align: center;\n    }\n\n    .buttons {\n      display: flex;\n      gap: clamp(1rem, 3vw, 1.5rem);\n      justify-content: center;\n      flex-wrap: wrap;\n    }\n\n    .btn {\n      display: inline-flex;\n      align-items: center;\n      justify-content: center;\n      gap: 0.75rem;\n      padding: 12px 24px;\n      border: none;\n      border-radius: 8px;\n      font-size: clamp(0.875rem, 2.5vw, 1rem);\n      font-weight: 600;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      text-decoration: none;\n      position: relative;\n      overflow: hidden;\n      min-width: clamp(120px, 25vw, 160px);\n      outline: none;\n    }\n\n    .btn--primary {\n      background: linear-gradient(90deg, #667eea, #764ba2);\n      color: #ffffff;\n      box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);\n    }\n\n    .btn--primary:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 4px 16px rgba(102, 126, 234, 0.3);\n    }\n\n    .btn--primary:focus {\n      outline: 2px solid #667eea;\n      outline-offset: 2px;\n    }\n\n    .btn--outline {\n      background: #ffffff;\n      border: 2px solid;\n      border-image: linear-gradient(90deg, #667eea, #764ba2) 1;\n      color: #667eea;\n      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);\n    }\n\n    .btn--outline:hover {\n      transform: translateY(-2px);\n      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);\n      background: linear-gradient(90deg, #667eea, #764ba2);\n      color: #ffffff;\n    }\n\n    .btn--outline:focus {\n      outline: 2px solid #667eea;\n      outline-offset: 2px;\n    }\n\n    .icon {\n      width: clamp(1rem, 2.5vw, 1.2rem);\n      height: clamp(1rem, 2.5vw, 1.2rem);\n      transition: transform 0.2s ease;\n      flex-shrink: 0;\n    }\n\n    .btn:hover .icon {\n      transform: scale(1.1);\n    }\n\n    /* Адаптивность */\n    @media (max-width: 768px) {\n      .not-found-container {\n        padding: 0.5rem;\n      }\n\n      .not-found-content {\n        margin: 0.5rem;\n        padding: clamp(1.5rem, 6vw, 2rem) clamp(1rem, 4vw, 1.5rem);\n      }\n\n      .buttons {\n        flex-direction: column;\n        align-items: center;\n        gap: 1rem;\n      }\n\n      .btn {\n        width: 100%;\n        max-width: 280px;\n      }\n    }\n\n    @media (max-width: 480px) {\n      .not-found-content {\n        padding: clamp(1.5rem, 6vw, 2.5rem) clamp(1rem, 4vw, 1.5rem);\n      }\n\n      .error-code {\n        font-size: clamp(3rem, 20vw, 4rem);\n      }\n\n      .error-title {\n        font-size: clamp(1.25rem, 8vw, 1.5rem);\n      }\n\n      .error-description {\n        font-size: clamp(0.8rem, 4vw, 0.875rem);\n      }\n    }\n\n    /* Улучшения для слабых устройств */\n    @media (prefers-reduced-motion: reduce) {\n      .floating-shape {\n        animation: none;\n      }\n\n      .btn {\n        transition: none;\n      }\n\n      .btn:hover {\n        transform: none;\n      }\n\n      .btn:hover .icon {\n        transform: none;\n      }\n    }\n\n    /* Поддержка высокого DPI */\n    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {\n      .not-found-content {\n        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.15);\n      }\n    }\n\n    /* Темная тема - только если пользователь явно предпочитает */\n    @media (prefers-color-scheme: dark) {\n      .not-found-content {\n        background: #1a202c;\n        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.3);\n      }\n\n      .error-code {\n        color: #667eea;\n      }\n\n      .error-title {\n        color: #f7fafc;\n      }\n\n      .error-description {\n        color: #cbd5e0;\n      }\n\n      .btn--outline {\n        background: #1a202c;\n        color: #667eea;\n        border-color: #667eea;\n      }\n\n      .btn--outline:hover {\n        background: linear-gradient(90deg, #667eea, #764ba2);\n        color: #ffffff;\n      }\n    }\n  \n",
            "extends": []
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-cb35f18d36f9517103cba4d03188abf981256a4cb6d9ce3380c0c9dbfc24db1a7adf12bde65358fa1190486603ac8181d9e0b4187e3928029786935cc3ceae32",
            "file": "src/app/features/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [],
            "styles": [
                "\n    .profile-container {\n      min-height: 100vh;\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n      padding: 2rem;\n    }\n\n    .profile-header {\n      max-width: 800px;\n      margin: 0 auto 2rem;\n      text-align: center;\n    }\n\n    .profile-header h1 {\n      font-size: 2.5rem;\n      color: #2c3e50;\n      margin-bottom: 0.5rem;\n    }\n\n    .profile-header p {\n      color: #6c757d;\n      font-size: 1.1rem;\n    }\n\n    .profile-content {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n\n    /* Стили для состояния загрузки */\n    .loading-card {\n      background: white;\n      border-radius: 12px;\n      padding: 3rem 2rem;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n      text-align: center;\n    }\n\n    .loading-spinner {\n      margin-bottom: 1.5rem;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .spinner-icon {\n      animation: spin 1s linear infinite;\n      color: #3498db;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    @keyframes spin {\n      0% {\n        transform: rotate(0deg);\n      }\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    .loading-card h3 {\n      color: #2c3e50;\n      margin-bottom: 0.5rem;\n      font-size: 1.5rem;\n    }\n\n    .loading-card p {\n      color: #6c757d;\n      font-size: 1rem;\n    }\n\n    /* Стили для состояния ошибки */\n    .error-card {\n      background: white;\n      border-radius: 12px;\n      padding: 2rem;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n      text-align: center;\n      border-left: 4px solid #e74c3c;\n    }\n\n    .error-card h3 {\n      color: #e74c3c;\n      margin-bottom: 1rem;\n    }\n\n    .error-card p {\n      color: #6c757d;\n      margin-bottom: 1.5rem;\n    }\n\n    .profile-card {\n      background: white;\n      border-radius: 12px;\n      padding: 2rem;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n      display: flex;\n      align-items: center;\n      gap: 2rem;\n      margin-bottom: 2rem;\n    }\n\n    .profile-avatar {\n      width: 100px;\n      height: 100px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: white;\n      flex-shrink: 0;\n    }\n\n    .profile-avatar i-lucide {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .profile-info h2 {\n      font-size: 1.8rem;\n      color: #2c3e50;\n      margin-bottom: 1rem;\n    }\n\n    .info-item {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      margin-bottom: 0.75rem;\n      color: #6c757d;\n    }\n\n    .info-item i-lucide {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-shrink: 0;\n    }\n\n    .info-item span {\n      font-weight: 500;\n      line-height: 1.4;\n    }\n\n    .profile-actions {\n      display: flex;\n      gap: 1rem;\n      justify-content: center;\n    }\n\n    .btn {\n      padding: 0.75rem 1.5rem;\n      border-radius: 8px;\n      text-decoration: none;\n      font-weight: 500;\n      transition: all 0.3s ease;\n      border: none;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 1rem;\n    }\n\n    .btn i-lucide {\n      flex-shrink: 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .btn-primary {\n      background: #3498db;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #2980b9;\n      transform: translateY(-2px);\n    }\n\n    .btn-outline {\n      background: transparent;\n      color: #3498db;\n      border: 2px solid #3498db;\n    }\n\n    .btn-outline:hover {\n      background: #3498db;\n      color: white;\n      transform: translateY(-2px);\n    }\n\n    @media (max-width: 768px) {\n      .profile-container {\n        padding: 1rem;\n      }\n\n      .profile-card {\n        flex-direction: column;\n        text-align: center;\n        gap: 1.5rem;\n      }\n\n      .profile-info {\n        text-align: center;\n      }\n\n      .info-item {\n        justify-content: center;\n      }\n\n      .profile-actions {\n        flex-direction: column;\n      }\n    }\n  "
            ],
            "template": "<app-layout [showHeader]=\"true\" [showFooter]=\"true\">\n  <div class=\"profile-container\">\n    <div class=\"profile-header\">\n      <h1>Мой профиль</h1>\n      <p>Управление личной информацией и настройками</p>\n    </div>\n\n    <!-- Состояние загрузки с анимированным спиннером -->\n    <div class=\"profile-content\" *ngIf=\"loading\">\n      <div class=\"loading-card\">\n        <div class=\"loading-spinner\">\n          <i-lucide [img]=\"Loader2\" [size]=\"48\" class=\"spinner-icon\"></i-lucide>\n        </div>\n        <h3>Загрузка профиля...</h3>\n        <p>Пожалуйста, подождите, мы загружаем ваши данные</p>\n      </div>\n    </div>\n\n    <!-- Состояние ошибки -->\n    <div class=\"profile-content\" *ngIf=\"error\">\n      <div class=\"error-card\">\n        <h3>Ошибка загрузки</h3>\n        <p>{{ error }}</p>\n        <button class=\"btn btn-primary\" (click)=\"retryLoad()\">\n          <i-lucide [img]=\"Loader2\" [size]=\"20\"></i-lucide>\n          Попробовать снова\n        </button>\n      </div>\n    </div>\n\n    <!-- Основной контент профиля -->\n    <div class=\"profile-content\" *ngIf=\"currentUser && !loading\">\n      <div class=\"profile-card\">\n        <div class=\"profile-avatar\">\n          <i-lucide [img]=\"UserIcon\" [size]=\"48\" color=\"white\"></i-lucide>\n        </div>\n\n        <div class=\"profile-info\">\n          <h2>{{ currentUser.username }}</h2>\n          <div class=\"info-item\">\n            <i-lucide [img]=\"Mail\" [size]=\"20\" color=\"#3498db\"></i-lucide>\n            <span>{{ currentUser.email }}</span>\n          </div>\n          <div class=\"info-item\">\n            <i-lucide [img]=\"Shield\" [size]=\"20\" color=\"#27ae60\"></i-lucide>\n            <span>Роль: {{ currentUser.role === 'admin' ? 'Администратор' : 'Пользователь' }}</span>\n          </div>\n          <div class=\"info-item\">\n            <i-lucide [img]=\"Calendar\" [size]=\"20\" color=\"#6c757d\"></i-lucide>\n            <span>Участник с: {{ currentUser.createdAt | date:'dd.MM.yyyy' }}</span>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"profile-actions\">\n        <a routerLink=\"/settings\" class=\"btn btn-primary\">\n          <i-lucide [img]=\"Settings\" [size]=\"20\"></i-lucide>\n          Настройки\n        </a>\n        <button class=\"btn btn-outline\" (click)=\"changePassword()\">\n          <i-lucide [img]=\"Lock\" [size]=\"20\"></i-lucide>\n          Сменить пароль\n        </button>\n      </div>\n    </div>\n  </div>\n</app-layout>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 305,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "Calendar",
                    "defaultValue": "Calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 311,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 316
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 318
                },
                {
                    "name": "Loader2",
                    "defaultValue": "Loader2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 314,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "loading",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 317
                },
                {
                    "name": "Lock",
                    "defaultValue": "Lock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 313,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Mail",
                    "defaultValue": "Mail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 309,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Settings",
                    "defaultValue": "Settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 312,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Shield",
                    "defaultValue": "Shield",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 310,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "UserIcon",
                    "defaultValue": "UserIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 308,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 348,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 320,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "retryLoad",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 344,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterLink } from '@angular/router';\r\nimport { AuthService } from '@services';\r\nimport { User } from '@models';\r\nimport { LayoutComponent } from '../../shared/components/layout';\r\nimport { LucideAngularModule, User as UserIcon, Mail, Shield, Calendar, Settings, Lock, Loader2 } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterLink, LayoutComponent, LucideAngularModule],\r\n  template: `\r\n    <app-layout [showHeader]=\"true\" [showFooter]=\"true\">\r\n      <div class=\"profile-container\">\r\n        <div class=\"profile-header\">\r\n          <h1>Мой профиль</h1>\r\n          <p>Управление личной информацией и настройками</p>\r\n        </div>\r\n\r\n        <!-- Состояние загрузки с анимированным спиннером -->\r\n        <div class=\"profile-content\" *ngIf=\"loading\">\r\n          <div class=\"loading-card\">\r\n            <div class=\"loading-spinner\">\r\n              <i-lucide [img]=\"Loader2\" [size]=\"48\" class=\"spinner-icon\"></i-lucide>\r\n            </div>\r\n            <h3>Загрузка профиля...</h3>\r\n            <p>Пожалуйста, подождите, мы загружаем ваши данные</p>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Состояние ошибки -->\r\n        <div class=\"profile-content\" *ngIf=\"error\">\r\n          <div class=\"error-card\">\r\n            <h3>Ошибка загрузки</h3>\r\n            <p>{{ error }}</p>\r\n            <button class=\"btn btn-primary\" (click)=\"retryLoad()\">\r\n              <i-lucide [img]=\"Loader2\" [size]=\"20\"></i-lucide>\r\n              Попробовать снова\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Основной контент профиля -->\r\n        <div class=\"profile-content\" *ngIf=\"currentUser && !loading\">\r\n          <div class=\"profile-card\">\r\n            <div class=\"profile-avatar\">\r\n              <i-lucide [img]=\"UserIcon\" [size]=\"48\" color=\"white\"></i-lucide>\r\n            </div>\r\n\r\n            <div class=\"profile-info\">\r\n              <h2>{{ currentUser.username }}</h2>\r\n              <div class=\"info-item\">\r\n                <i-lucide [img]=\"Mail\" [size]=\"20\" color=\"#3498db\"></i-lucide>\r\n                <span>{{ currentUser.email }}</span>\r\n              </div>\r\n              <div class=\"info-item\">\r\n                <i-lucide [img]=\"Shield\" [size]=\"20\" color=\"#27ae60\"></i-lucide>\r\n                <span>Роль: {{ currentUser.role === 'admin' ? 'Администратор' : 'Пользователь' }}</span>\r\n              </div>\r\n              <div class=\"info-item\">\r\n                <i-lucide [img]=\"Calendar\" [size]=\"20\" color=\"#6c757d\"></i-lucide>\r\n                <span>Участник с: {{ currentUser.createdAt | date:'dd.MM.yyyy' }}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"profile-actions\">\r\n            <a routerLink=\"/settings\" class=\"btn btn-primary\">\r\n              <i-lucide [img]=\"Settings\" [size]=\"20\"></i-lucide>\r\n              Настройки\r\n            </a>\r\n            <button class=\"btn btn-outline\" (click)=\"changePassword()\">\r\n              <i-lucide [img]=\"Lock\" [size]=\"20\"></i-lucide>\r\n              Сменить пароль\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </app-layout>\r\n  `,\r\n  styles: [`\r\n    .profile-container {\r\n      min-height: 100vh;\r\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n      padding: 2rem;\r\n    }\r\n\r\n    .profile-header {\r\n      max-width: 800px;\r\n      margin: 0 auto 2rem;\r\n      text-align: center;\r\n    }\r\n\r\n    .profile-header h1 {\r\n      font-size: 2.5rem;\r\n      color: #2c3e50;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n\r\n    .profile-header p {\r\n      color: #6c757d;\r\n      font-size: 1.1rem;\r\n    }\r\n\r\n    .profile-content {\r\n      max-width: 800px;\r\n      margin: 0 auto;\r\n    }\r\n\r\n    /* Стили для состояния загрузки */\r\n    .loading-card {\r\n      background: white;\r\n      border-radius: 12px;\r\n      padding: 3rem 2rem;\r\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n      text-align: center;\r\n    }\r\n\r\n    .loading-spinner {\r\n      margin-bottom: 1.5rem;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    .spinner-icon {\r\n      animation: spin 1s linear infinite;\r\n      color: #3498db;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    @keyframes spin {\r\n      0% {\r\n        transform: rotate(0deg);\r\n      }\r\n      100% {\r\n        transform: rotate(360deg);\r\n      }\r\n    }\r\n\r\n    .loading-card h3 {\r\n      color: #2c3e50;\r\n      margin-bottom: 0.5rem;\r\n      font-size: 1.5rem;\r\n    }\r\n\r\n    .loading-card p {\r\n      color: #6c757d;\r\n      font-size: 1rem;\r\n    }\r\n\r\n    /* Стили для состояния ошибки */\r\n    .error-card {\r\n      background: white;\r\n      border-radius: 12px;\r\n      padding: 2rem;\r\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n      text-align: center;\r\n      border-left: 4px solid #e74c3c;\r\n    }\r\n\r\n    .error-card h3 {\r\n      color: #e74c3c;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .error-card p {\r\n      color: #6c757d;\r\n      margin-bottom: 1.5rem;\r\n    }\r\n\r\n    .profile-card {\r\n      background: white;\r\n      border-radius: 12px;\r\n      padding: 2rem;\r\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 2rem;\r\n      margin-bottom: 2rem;\r\n    }\r\n\r\n    .profile-avatar {\r\n      width: 100px;\r\n      height: 100px;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      border-radius: 50%;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      color: white;\r\n      flex-shrink: 0;\r\n    }\r\n\r\n    .profile-avatar i-lucide {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    .profile-info h2 {\r\n      font-size: 1.8rem;\r\n      color: #2c3e50;\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    .info-item {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.75rem;\r\n      margin-bottom: 0.75rem;\r\n      color: #6c757d;\r\n    }\r\n\r\n    .info-item i-lucide {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      flex-shrink: 0;\r\n    }\r\n\r\n    .info-item span {\r\n      font-weight: 500;\r\n      line-height: 1.4;\r\n    }\r\n\r\n    .profile-actions {\r\n      display: flex;\r\n      gap: 1rem;\r\n      justify-content: center;\r\n    }\r\n\r\n    .btn {\r\n      padding: 0.75rem 1.5rem;\r\n      border-radius: 8px;\r\n      text-decoration: none;\r\n      font-weight: 500;\r\n      transition: all 0.3s ease;\r\n      border: none;\r\n      cursor: pointer;\r\n      display: inline-flex;\r\n      align-items: center;\r\n      gap: 0.5rem;\r\n      font-size: 1rem;\r\n    }\r\n\r\n    .btn i-lucide {\r\n      flex-shrink: 0;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    .btn-primary {\r\n      background: #3498db;\r\n      color: white;\r\n    }\r\n\r\n    .btn-primary:hover {\r\n      background: #2980b9;\r\n      transform: translateY(-2px);\r\n    }\r\n\r\n    .btn-outline {\r\n      background: transparent;\r\n      color: #3498db;\r\n      border: 2px solid #3498db;\r\n    }\r\n\r\n    .btn-outline:hover {\r\n      background: #3498db;\r\n      color: white;\r\n      transform: translateY(-2px);\r\n    }\r\n\r\n    @media (max-width: 768px) {\r\n      .profile-container {\r\n        padding: 1rem;\r\n      }\r\n\r\n      .profile-card {\r\n        flex-direction: column;\r\n        text-align: center;\r\n        gap: 1.5rem;\r\n      }\r\n\r\n      .profile-info {\r\n        text-align: center;\r\n      }\r\n\r\n      .info-item {\r\n        justify-content: center;\r\n      }\r\n\r\n      .profile-actions {\r\n        flex-direction: column;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  private readonly authService = inject(AuthService);\r\n\r\n  // Lucide icons для standalone компонентов\r\n  readonly UserIcon = UserIcon;\r\n  readonly Mail = Mail;\r\n  readonly Shield = Shield;\r\n  readonly Calendar = Calendar;\r\n  readonly Settings = Settings;\r\n  readonly Lock = Lock;\r\n  readonly Loader2 = Loader2;\r\n\r\n  currentUser: User | null = null;\r\n  loading = true;\r\n  error: string | null = null;\r\n\r\n  ngOnInit(): void {\r\n    this.loadProfile();\r\n  }\r\n\r\n  private loadProfile(): void {\r\n    this.loading = true;\r\n    this.error = null;\r\n\r\n    // Имитируем загрузку профиля с задержкой для лучшего UX\r\n    setTimeout(() => {\r\n      this.authService.currentUser$.subscribe({\r\n        next: (user) => {\r\n          this.currentUser = user;\r\n          this.loading = false;\r\n        },\r\n        error: (err) => {\r\n          this.error = 'Не удалось загрузить профиль. Попробуйте обновить страницу.';\r\n          this.loading = false;\r\n          console.error('Error loading profile:', err);\r\n        }\r\n      });\r\n    }, 500); // Небольшая задержка для показа спиннера\r\n  }\r\n\r\n  retryLoad(): void {\r\n    this.loadProfile();\r\n  }\r\n\r\n  changePassword(): void {\r\n    // TODO: Реализовать смену пароля\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .profile-container {\n      min-height: 100vh;\n      background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\n      padding: 2rem;\n    }\n\n    .profile-header {\n      max-width: 800px;\n      margin: 0 auto 2rem;\n      text-align: center;\n    }\n\n    .profile-header h1 {\n      font-size: 2.5rem;\n      color: #2c3e50;\n      margin-bottom: 0.5rem;\n    }\n\n    .profile-header p {\n      color: #6c757d;\n      font-size: 1.1rem;\n    }\n\n    .profile-content {\n      max-width: 800px;\n      margin: 0 auto;\n    }\n\n    /* Стили для состояния загрузки */\n    .loading-card {\n      background: white;\n      border-radius: 12px;\n      padding: 3rem 2rem;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n      text-align: center;\n    }\n\n    .loading-spinner {\n      margin-bottom: 1.5rem;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .spinner-icon {\n      animation: spin 1s linear infinite;\n      color: #3498db;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    @keyframes spin {\n      0% {\n        transform: rotate(0deg);\n      }\n      100% {\n        transform: rotate(360deg);\n      }\n    }\n\n    .loading-card h3 {\n      color: #2c3e50;\n      margin-bottom: 0.5rem;\n      font-size: 1.5rem;\n    }\n\n    .loading-card p {\n      color: #6c757d;\n      font-size: 1rem;\n    }\n\n    /* Стили для состояния ошибки */\n    .error-card {\n      background: white;\n      border-radius: 12px;\n      padding: 2rem;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n      text-align: center;\n      border-left: 4px solid #e74c3c;\n    }\n\n    .error-card h3 {\n      color: #e74c3c;\n      margin-bottom: 1rem;\n    }\n\n    .error-card p {\n      color: #6c757d;\n      margin-bottom: 1.5rem;\n    }\n\n    .profile-card {\n      background: white;\n      border-radius: 12px;\n      padding: 2rem;\n      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\n      display: flex;\n      align-items: center;\n      gap: 2rem;\n      margin-bottom: 2rem;\n    }\n\n    .profile-avatar {\n      width: 100px;\n      height: 100px;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      border-radius: 50%;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: white;\n      flex-shrink: 0;\n    }\n\n    .profile-avatar i-lucide {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .profile-info h2 {\n      font-size: 1.8rem;\n      color: #2c3e50;\n      margin-bottom: 1rem;\n    }\n\n    .info-item {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      margin-bottom: 0.75rem;\n      color: #6c757d;\n    }\n\n    .info-item i-lucide {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      flex-shrink: 0;\n    }\n\n    .info-item span {\n      font-weight: 500;\n      line-height: 1.4;\n    }\n\n    .profile-actions {\n      display: flex;\n      gap: 1rem;\n      justify-content: center;\n    }\n\n    .btn {\n      padding: 0.75rem 1.5rem;\n      border-radius: 8px;\n      text-decoration: none;\n      font-weight: 500;\n      transition: all 0.3s ease;\n      border: none;\n      cursor: pointer;\n      display: inline-flex;\n      align-items: center;\n      gap: 0.5rem;\n      font-size: 1rem;\n    }\n\n    .btn i-lucide {\n      flex-shrink: 0;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    }\n\n    .btn-primary {\n      background: #3498db;\n      color: white;\n    }\n\n    .btn-primary:hover {\n      background: #2980b9;\n      transform: translateY(-2px);\n    }\n\n    .btn-outline {\n      background: transparent;\n      color: #3498db;\n      border: 2px solid #3498db;\n    }\n\n    .btn-outline:hover {\n      background: #3498db;\n      color: white;\n      transform: translateY(-2px);\n    }\n\n    @media (max-width: 768px) {\n      .profile-container {\n        padding: 1rem;\n      }\n\n      .profile-card {\n        flex-direction: column;\n        text-align: center;\n        gap: 1.5rem;\n      }\n\n      .profile-info {\n        text-align: center;\n      }\n\n      .info-item {\n        justify-content: center;\n      }\n\n      .profile-actions {\n        flex-direction: column;\n      }\n    }\n  \n",
            "extends": [],
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "ProjectCardComponent",
            "id": "component-ProjectCardComponent-4a90b4adea298ed80a28ce00003275823964bf7dd4d05a2c0aaca1a8f18c70f5064e51092c3415d9d0b95a4845c81eee503783056d966cbe91db7b1e84868997",
            "file": "src/app/features/projects/components/project-card/project-card.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-card",
            "styleUrls": [
                "./project-card.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-card.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isHovered",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isSelected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "project",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "Project",
                    "decorators": []
                },
                {
                    "name": "showActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showDates",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showMembers",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSelection",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showStatus",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "action",
                    "defaultValue": "new EventEmitter<ProjectAction>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter"
                },
                {
                    "name": "click",
                    "defaultValue": "new EventEmitter<Project>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter"
                },
                {
                    "name": "hover",
                    "defaultValue": "new EventEmitter<{ projectId: string; isHovered: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter"
                },
                {
                    "name": "select",
                    "defaultValue": "new EventEmitter<{ projectId: string; selected: boolean }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 146,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "icons",
                    "defaultValue": "{\r\n    more: MoreVertical,\r\n    edit: Edit,\r\n    delete: Trash2,\r\n    archive: Archive,\r\n    copy: Copy,\r\n    share: Share2,\r\n    calendar: Calendar,\r\n    users: Users,\r\n    clock: Clock,\r\n    checkCircle: CheckCircle,\r\n    alertCircle: AlertCircle,\r\n    pause: Pause,\r\n    archiveIcon: ArchiveIcon\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 102,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "statusConfig",
                    "defaultValue": "{\r\n    active: {\r\n      label: 'Активный',\r\n      color: 'primary',\r\n      icon: this.icons.checkCircle,\r\n      class: 'status-active'\r\n    },\r\n    completed: {\r\n      label: 'Завершен',\r\n      color: 'accent',\r\n      icon: this.icons.checkCircle,\r\n      class: 'status-completed'\r\n    },\r\n    'on-hold': {\r\n      label: 'На паузе',\r\n      color: 'warn',\r\n      icon: this.icons.pause,\r\n      class: 'status-on-hold'\r\n    },\r\n    archived: {\r\n      label: 'Архив',\r\n      color: 'default',\r\n      icon: this.icons.archiveIcon,\r\n      class: 'status-archived'\r\n    }\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getFormattedDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 206,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMemberCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 202,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRelativeDate",
                    "args": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 214,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "date",
                            "type": "Date",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStatusConfig",
                    "args": [
                        {
                            "name": "status",
                            "type": "ProjectStatus",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 198,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "status",
                            "type": "ProjectStatus",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAction",
                    "args": [
                        {
                            "name": "actionType",
                            "type": "ProjectAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 190,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "actionType",
                            "type": "ProjectAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onCardClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onMouseEnter",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 174,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseenter'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onMouseLeave",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'mouseleave'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onSelectionChange",
                    "args": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 186,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selected",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "trackByProjectId",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateInputs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [
                {
                    "name": "class.disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.hovered",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "class.selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 161
                },
                {
                    "name": "mouseenter",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 174
                },
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 180
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatChipsModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "<p>Презентационный компонент карточки проекта\nОтвечает только за отображение данных и эмиссию событий</p>\n",
            "rawdescription": "\n\nПрезентационный компонент карточки проекта\nОтвечает только за отображение данных и эмиссию событий\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  OnDestroy,\r\n  OnInit,\r\n  ElementRef,\r\n  HostListener,\r\n  HostBinding\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport {\r\n  LucideAngularModule,\r\n  MoreVertical,\r\n  Edit,\r\n  Trash2,\r\n  Archive,\r\n  Copy,\r\n  Share2,\r\n  Calendar,\r\n  Users,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Pause,\r\n  Archive as ArchiveIcon\r\n} from 'lucide-angular';\r\nimport { Subject, takeUntil } from 'rxjs';\r\n\r\nimport { Project } from '@models';\r\nimport { ProjectCard, ProjectAction, ProjectStatus } from '../../models';\r\n\r\n/**\r\n * Презентационный компонент карточки проекта\r\n * Отвечает только за отображение данных и эмиссию событий\r\n */\r\n@Component({\r\n  selector: 'app-project-card',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatChipsModule,\r\n    MatTooltipModule,\r\n    MatCheckboxModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    LucideAngularModule\r\n  ],\r\n  templateUrl: './project-card.component.html',\r\n  styleUrls: ['./project-card.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'project-card-container'\r\n  }\r\n})\r\nexport class ProjectCardComponent implements OnInit, OnDestroy {\r\n\r\n  // Input properties\r\n  @Input() project!: Project;\r\n  @Input() isSelected = false;\r\n  @Input() isHovered = false;\r\n  @Input() showActions = true;\r\n  @Input() showSelection = false;\r\n  @Input() showStatus = true;\r\n  @Input() showMembers = true;\r\n  @Input() showDates = true;\r\n  @Input() loading = false;\r\n  @Input() disabled = false;\r\n\r\n  // Output events\r\n  @Output() select = new EventEmitter<{ projectId: string; selected: boolean }>();\r\n  @Output() action = new EventEmitter<ProjectAction>();\r\n  @Output() click = new EventEmitter<Project>();\r\n  @Output() hover = new EventEmitter<{ projectId: string; isHovered: boolean }>();\r\n\r\n  // Host bindings для анимаций\r\n  @HostBinding('class.selected') get selectedClass() { return this.isSelected; }\r\n  @HostBinding('class.hovered') get hoveredClass() { return this.isHovered; }\r\n  @HostBinding('class.loading') get loadingClass() { return this.loading; }\r\n  @HostBinding('class.disabled') get disabledClass() { return this.disabled; }\r\n\r\n  // Public properties\r\n  public readonly icons = {\r\n    more: MoreVertical,\r\n    edit: Edit,\r\n    delete: Trash2,\r\n    archive: Archive,\r\n    copy: Copy,\r\n    share: Share2,\r\n    calendar: Calendar,\r\n    users: Users,\r\n    clock: Clock,\r\n    checkCircle: CheckCircle,\r\n    alertCircle: AlertCircle,\r\n    pause: Pause,\r\n    archiveIcon: ArchiveIcon\r\n  };\r\n\r\n  public readonly statusConfig = {\r\n    active: {\r\n      label: 'Активный',\r\n      color: 'primary',\r\n      icon: this.icons.checkCircle,\r\n      class: 'status-active'\r\n    },\r\n    completed: {\r\n      label: 'Завершен',\r\n      color: 'accent',\r\n      icon: this.icons.checkCircle,\r\n      class: 'status-completed'\r\n    },\r\n    'on-hold': {\r\n      label: 'На паузе',\r\n      color: 'warn',\r\n      icon: this.icons.pause,\r\n      class: 'status-on-hold'\r\n    },\r\n    archived: {\r\n      label: 'Архив',\r\n      color: 'default',\r\n      icon: this.icons.archiveIcon,\r\n      class: 'status-archived'\r\n    }\r\n  };\r\n\r\n  // Private properties\r\n  private readonly destroy$ = new Subject<void>();\r\n\r\n  constructor(private elementRef: ElementRef) {}\r\n\r\n  ngOnInit(): void {\r\n    this.validateInputs();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  // Event handlers\r\n  @HostListener('click', ['$event'])\r\n  onCardClick(event: MouseEvent): void {\r\n    if (this.disabled || this.loading) return;\r\n\r\n    // Не эмитим событие если клик был по кнопке или чекбоксу\r\n    const target = event.target as HTMLElement;\r\n    if (target.closest('button, .mat-checkbox, .mat-menu-trigger')) {\r\n      return;\r\n    }\r\n\r\n    this.click.emit(this.project);\r\n  }\r\n\r\n  @HostListener('mouseenter')\r\n  onMouseEnter(): void {\r\n    if (this.disabled) return;\r\n    this.hover.emit({ projectId: this.project.id, isHovered: true });\r\n  }\r\n\r\n  @HostListener('mouseleave')\r\n  onMouseLeave(): void {\r\n    if (this.disabled) return;\r\n    this.hover.emit({ projectId: this.project.id, isHovered: false });\r\n  }\r\n\r\n  // Public methods\r\n  onSelectionChange(selected: boolean): void {\r\n    this.select.emit({ projectId: this.project.id, selected });\r\n  }\r\n\r\n  onAction(actionType: ProjectAction['type']): void {\r\n    const action: ProjectAction = {\r\n      type: actionType,\r\n      projectId: this.project.id\r\n    };\r\n    this.action.emit(action);\r\n  }\r\n\r\n  getStatusConfig(status: ProjectStatus) {\r\n    return this.statusConfig[status] || this.statusConfig.active;\r\n  }\r\n\r\n  getMemberCount(): number {\r\n    return this.project.members?.length || 0;\r\n  }\r\n\r\n  getFormattedDate(date: Date): string {\r\n    return new Date(date).toLocaleDateString('ru-RU', {\r\n      day: '2-digit',\r\n      month: '2-digit',\r\n      year: 'numeric'\r\n    });\r\n  }\r\n\r\n  getRelativeDate(date: Date): string {\r\n    const now = new Date();\r\n    const projectDate = new Date(date);\r\n    const diffTime = Math.abs(now.getTime() - projectDate.getTime());\r\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n\r\n    if (diffDays === 0) return 'Сегодня';\r\n    if (diffDays === 1) return 'Вчера';\r\n    if (diffDays < 7) return `${diffDays} дней назад`;\r\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)} недель назад`;\r\n    if (diffDays < 365) return `${Math.floor(diffDays / 30)} месяцев назад`;\r\n    return `${Math.floor(diffDays / 365)} лет назад`;\r\n  }\r\n\r\n  // Private methods\r\n  private validateInputs(): void {\r\n    if (!this.project) {\r\n      throw new Error('ProjectCardComponent: project input is required');\r\n    }\r\n  }\r\n\r\n  // TrackBy function для оптимизации\r\n  trackByProjectId(index: number, project: Project): string {\r\n    return project.id;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Переменные\r\n$card-border-radius: 12px;\r\n$card-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n$card-shadow-hover: 0 4px 16px rgba(0, 0, 0, 0.15);\r\n$card-shadow-selected: 0 0 0 2px #1976d2;\r\n$transition-duration: 0.2s;\r\n$skeleton-animation-duration: 1.5s;\r\n\r\n// Миксины\r\n@mixin card-transition {\r\n  transition: all $transition-duration cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n@mixin skeleton-animation {\r\n  animation: skeleton-loading $skeleton-animation-duration ease-in-out infinite;\r\n}\r\n\r\n@mixin responsive-grid($min-width: 280px, $gap: 16px) {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax($min-width, 1fr));\r\n  gap: $gap;\r\n}\r\n\r\n// Skeleton loader styles\r\n.project-card-skeleton {\r\n  background: white;\r\n  border-radius: $card-border-radius;\r\n  padding: 16px;\r\n  box-shadow: $card-shadow;\r\n  height: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 12px;\r\n\r\n  .skeleton-header {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n    height: 24px;\r\n\r\n    .skeleton-checkbox {\r\n      width: 20px;\r\n      height: 20px;\r\n      background: #f0f0f0;\r\n      border-radius: 4px;\r\n      @include skeleton-animation;\r\n    }\r\n\r\n    .skeleton-title {\r\n      flex: 1;\r\n      height: 20px;\r\n      background: #f0f0f0;\r\n      border-radius: 4px;\r\n      @include skeleton-animation;\r\n    }\r\n\r\n    .skeleton-menu {\r\n      width: 32px;\r\n      height: 32px;\r\n      background: #f0f0f0;\r\n      border-radius: 50%;\r\n      @include skeleton-animation;\r\n    }\r\n  }\r\n\r\n  .skeleton-content {\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n\r\n    .skeleton-description {\r\n      height: 16px;\r\n      background: #f0f0f0;\r\n      border-radius: 4px;\r\n      @include skeleton-animation;\r\n\r\n      &.short {\r\n        width: 60%;\r\n      }\r\n    }\r\n  }\r\n\r\n  .skeleton-footer {\r\n    display: flex;\r\n    gap: 8px;\r\n    height: 24px;\r\n\r\n    .skeleton-chip {\r\n      width: 80px;\r\n      height: 24px;\r\n      background: #f0f0f0;\r\n      border-radius: 12px;\r\n      @include skeleton-animation;\r\n    }\r\n  }\r\n}\r\n\r\n// Main card styles\r\n.project-card {\r\n  @include card-transition;\r\n  border-radius: $card-border-radius;\r\n  box-shadow: $card-shadow;\r\n  border: 2px solid transparent;\r\n  background: white;\r\n  overflow: hidden;\r\n  cursor: pointer;\r\n  position: relative;\r\n\r\n  &:hover {\r\n    box-shadow: $card-shadow-hover;\r\n    transform: translateY(-2px);\r\n  }\r\n\r\n  &.selected {\r\n    border-color: #1976d2;\r\n    box-shadow: $card-shadow-selected;\r\n  }\r\n\r\n  &.disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n    pointer-events: none;\r\n  }\r\n\r\n  // Card header\r\n  .card-header {\r\n    padding: 16px 16px 0;\r\n    display: flex;\r\n    align-items: flex-start;\r\n    gap: 12px;\r\n    min-height: 60px;\r\n\r\n    .selection-checkbox {\r\n      margin-top: 4px;\r\n      flex-shrink: 0;\r\n    }\r\n\r\n    .project-title {\r\n      flex: 1;\r\n      font-size: 18px;\r\n      font-weight: 600;\r\n      line-height: 1.3;\r\n      color: #1a1a1a;\r\n      margin: 0;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n    }\r\n\r\n    .card-actions {\r\n      flex-shrink: 0;\r\n\r\n      .actions-trigger {\r\n        width: 32px;\r\n        height: 32px;\r\n        line-height: 32px;\r\n        color: #666;\r\n\r\n        &:hover {\r\n          background-color: rgba(0, 0, 0, 0.04);\r\n          color: #1976d2;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Card content\r\n  .card-content {\r\n    padding: 12px 16px;\r\n    flex: 1;\r\n\r\n    .project-description {\r\n      font-size: 14px;\r\n      line-height: 1.5;\r\n      color: #666;\r\n      margin: 0 0 12px 0;\r\n      display: -webkit-box;\r\n      -webkit-line-clamp: 3;\r\n      -webkit-box-orient: vertical;\r\n      overflow: hidden;\r\n\r\n      &.empty {\r\n        font-style: italic;\r\n        color: #999;\r\n      }\r\n    }\r\n\r\n    .project-settings {\r\n      display: flex;\r\n      flex-wrap: wrap;\r\n      gap: 8px;\r\n\r\n      .setting-item {\r\n        display: flex;\r\n        align-items: center;\r\n        gap: 4px;\r\n        font-size: 12px;\r\n        color: #666;\r\n        padding: 4px 8px;\r\n        background: #f5f5f5;\r\n        border-radius: 12px;\r\n\r\n        lucide-icon {\r\n          color: #1976d2;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Card footer\r\n  .card-footer {\r\n    padding: 12px 16px 16px;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n    flex-wrap: wrap;\r\n    min-height: 40px;\r\n\r\n    .status-chip {\r\n      font-size: 12px;\r\n      font-weight: 500;\r\n      padding: 4px 8px;\r\n      border-radius: 12px;\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 4px;\r\n      flex-shrink: 0;\r\n\r\n      &.status-active {\r\n        background: #e3f2fd;\r\n        color: #1976d2;\r\n      }\r\n\r\n      &.status-completed {\r\n        background: #e8f5e8;\r\n        color: #2e7d32;\r\n      }\r\n\r\n      &.status-on-hold {\r\n        background: #fff3e0;\r\n        color: #f57c00;\r\n      }\r\n\r\n      &.status-archived {\r\n        background: #f5f5f5;\r\n        color: #666;\r\n      }\r\n\r\n      lucide-icon {\r\n        width: 14px;\r\n        height: 14px;\r\n      }\r\n    }\r\n\r\n    .members-info,\r\n    .date-info {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 4px;\r\n      font-size: 12px;\r\n      color: #666;\r\n      flex-shrink: 0;\r\n\r\n      lucide-icon {\r\n        width: 14px;\r\n        height: 14px;\r\n        color: #999;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Actions menu styles\r\n.actions-menu {\r\n  .mat-menu-item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n    font-size: 14px;\r\n\r\n    &.delete-action {\r\n      color: #d32f2f;\r\n\r\n      lucide-icon {\r\n        color: #d32f2f;\r\n      }\r\n    }\r\n\r\n    lucide-icon {\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n  }\r\n}\r\n\r\n// Responsive design\r\n@media (max-width: 768px) {\r\n  .project-card {\r\n    .card-header {\r\n      padding: 12px 12px 0;\r\n      min-height: 50px;\r\n\r\n      .project-title {\r\n        font-size: 16px;\r\n      }\r\n    }\r\n\r\n    .card-content {\r\n      padding: 8px 12px;\r\n\r\n      .project-description {\r\n        font-size: 13px;\r\n        -webkit-line-clamp: 2;\r\n      }\r\n    }\r\n\r\n    .card-footer {\r\n      padding: 8px 12px 12px;\r\n      gap: 8px;\r\n\r\n      .status-chip,\r\n      .members-info,\r\n      .date-info {\r\n        font-size: 11px;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .project-card {\r\n    .card-header {\r\n      .project-title {\r\n        font-size: 15px;\r\n      }\r\n    }\r\n\r\n    .card-footer {\r\n      flex-direction: column;\r\n      align-items: flex-start;\r\n      gap: 6px;\r\n    }\r\n  }\r\n}\r\n\r\n// Skeleton animation keyframes\r\n@keyframes skeleton-loading {\r\n  0% {\r\n    opacity: 1;\r\n  }\r\n  50% {\r\n    opacity: 0.5;\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n  }\r\n}\r\n\r\n// Dark theme support\r\n@media (prefers-color-scheme: dark) {\r\n  .project-card {\r\n    background: #2d2d2d;\r\n    color: #fff;\r\n\r\n    .card-header .project-title {\r\n      color: #fff;\r\n    }\r\n\r\n    .card-content .project-description {\r\n      color: #ccc;\r\n    }\r\n\r\n    .card-footer {\r\n      .members-info,\r\n      .date-info {\r\n        color: #ccc;\r\n      }\r\n    }\r\n  }\r\n\r\n  .project-card-skeleton {\r\n    background: #2d2d2d;\r\n\r\n    .skeleton-checkbox,\r\n    .skeleton-title,\r\n    .skeleton-menu,\r\n    .skeleton-description,\r\n    .skeleton-chip {\r\n      background: #444;\r\n    }\r\n  }\r\n}\r\n\r\n// High contrast mode support\r\n@media (prefers-contrast: high) {\r\n  .project-card {\r\n    border: 2px solid #000;\r\n\r\n    &.selected {\r\n      border-color: #0066cc;\r\n    }\r\n  }\r\n}\r\n\r\n// Reduced motion support\r\n@media (prefers-reduced-motion: reduce) {\r\n  .project-card {\r\n    transition: none;\r\n\r\n    &:hover {\r\n      transform: none;\r\n    }\r\n  }\r\n\r\n  .project-card-skeleton {\r\n    .skeleton-checkbox,\r\n    .skeleton-title,\r\n    .skeleton-menu,\r\n    .skeleton-description,\r\n    .skeleton-chip {\r\n      animation: none;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./project-card.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 146,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "selectedClass": {
                    "name": "selectedClass",
                    "getSignature": {
                        "name": "selectedClass",
                        "type": "",
                        "returnType": "",
                        "line": 96
                    }
                },
                "hoveredClass": {
                    "name": "hoveredClass",
                    "getSignature": {
                        "name": "hoveredClass",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                },
                "loadingClass": {
                    "name": "loadingClass",
                    "getSignature": {
                        "name": "loadingClass",
                        "type": "",
                        "returnType": "",
                        "line": 98
                    }
                },
                "disabledClass": {
                    "name": "disabledClass",
                    "getSignature": {
                        "name": "disabledClass",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                }
            },
            "templateData": "<!-- Skeleton loader -->\r\n<div *ngIf=\"loading\" class=\"project-card-skeleton\">\r\n  <div class=\"skeleton-header\">\r\n    <div class=\"skeleton-checkbox\"></div>\r\n    <div class=\"skeleton-title\"></div>\r\n    <div class=\"skeleton-menu\"></div>\r\n  </div>\r\n  <div class=\"skeleton-content\">\r\n    <div class=\"skeleton-description\"></div>\r\n    <div class=\"skeleton-description short\"></div>\r\n  </div>\r\n  <div class=\"skeleton-footer\">\r\n    <div class=\"skeleton-chip\"></div>\r\n    <div class=\"skeleton-chip\"></div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Project card content -->\r\n<mat-card\r\n  *ngIf=\"!loading\"\r\n  class=\"project-card\"\r\n  [class.disabled]=\"disabled\"\r\n  [class.selected]=\"isSelected\"\r\n  [class.hovered]=\"isHovered\"\r\n  [attr.data-project-id]=\"project.id\">\r\n\r\n  <!-- Card header -->\r\n  <mat-card-header class=\"card-header\">\r\n    <!-- Selection checkbox -->\r\n    <mat-checkbox\r\n      *ngIf=\"showSelection\"\r\n      class=\"selection-checkbox\"\r\n      [checked]=\"isSelected\"\r\n      (change)=\"onSelectionChange($event.checked)\"\r\n      (click)=\"$event.stopPropagation()\"\r\n      [disabled]=\"disabled\">\r\n    </mat-checkbox>\r\n\r\n    <!-- Project title -->\r\n    <mat-card-title class=\"project-title\" [matTooltip]=\"project.name\">\r\n      {{ project.name }}\r\n    </mat-card-title>\r\n\r\n    <!-- Actions menu -->\r\n    <div class=\"card-actions\" *ngIf=\"showActions && !disabled\">\r\n      <button\r\n        mat-icon-button\r\n        [matMenuTriggerFor]=\"actionsMenu\"\r\n        class=\"actions-trigger\"\r\n        (click)=\"$event.stopPropagation()\"\r\n        [matTooltip]=\"'Действия'\">\r\n        <lucide-icon [icon]=\"icons.more\" size=\"18\"></lucide-icon>\r\n      </button>\r\n\r\n      <mat-menu #actionsMenu=\"matMenu\" class=\"actions-menu\">\r\n        <button\r\n          mat-menu-item\r\n          (click)=\"onAction('edit')\"\r\n          [matTooltip]=\"'Редактировать проект'\">\r\n          <lucide-icon [icon]=\"icons.edit\" size=\"16\"></lucide-icon>\r\n          <span>Редактировать</span>\r\n        </button>\r\n\r\n        <button\r\n          mat-menu-item\r\n          (click)=\"onAction('duplicate')\"\r\n          [matTooltip]=\"'Дублировать проект'\">\r\n          <lucide-icon [icon]=\"icons.copy\" size=\"16\"></lucide-icon>\r\n          <span>Дублировать</span>\r\n        </button>\r\n\r\n        <button\r\n          mat-menu-item\r\n          (click)=\"onAction('share')\"\r\n          [matTooltip]=\"'Поделиться проектом'\">\r\n          <lucide-icon [icon]=\"icons.share\" size=\"16\"></lucide-icon>\r\n          <span>Поделиться</span>\r\n        </button>\r\n\r\n        <mat-divider></mat-divider>\r\n\r\n        <button\r\n          mat-menu-item\r\n          (click)=\"onAction('archive')\"\r\n          [matTooltip]=\"'Архивировать проект'\">\r\n          <lucide-icon [icon]=\"icons.archive\" size=\"16\"></lucide-icon>\r\n          <span>Архивировать</span>\r\n        </button>\r\n\r\n        <button\r\n          mat-menu-item\r\n          class=\"delete-action\"\r\n          (click)=\"onAction('delete')\"\r\n          [matTooltip]=\"'Удалить проект'\">\r\n          <lucide-icon [icon]=\"icons.delete\" size=\"16\"></lucide-icon>\r\n          <span>Удалить</span>\r\n        </button>\r\n      </mat-menu>\r\n    </div>\r\n  </mat-card-header>\r\n\r\n  <!-- Card content -->\r\n  <mat-card-content class=\"card-content\">\r\n    <!-- Project description -->\r\n    <p class=\"project-description\" *ngIf=\"project.description\">\r\n      {{ project.description }}\r\n    </p>\r\n    <p class=\"project-description empty\" *ngIf=\"!project.description\">\r\n      Описание отсутствует\r\n    </p>\r\n\r\n    <!-- Project settings summary -->\r\n    <div class=\"project-settings\" *ngIf=\"project.settings\">\r\n      <div class=\"setting-item\" *ngIf=\"project.settings.requireTimeTracking\">\r\n        <lucide-icon [icon]=\"icons.clock\" size=\"14\"></lucide-icon>\r\n        <span>Учет времени</span>\r\n      </div>\r\n      <div class=\"setting-item\" *ngIf=\"project.settings.autoAssignTasks\">\r\n        <lucide-icon [icon]=\"icons.checkCircle\" size=\"14\"></lucide-icon>\r\n        <span>Автоназначение</span>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n\r\n  <!-- Card footer -->\r\n  <mat-card-actions class=\"card-footer\">\r\n    <!-- Status chip -->\r\n    <mat-chip\r\n      *ngIf=\"showStatus\"\r\n      class=\"status-chip\"\r\n      [class]=\"getStatusConfig(project.status || 'active').class\"\r\n      [color]=\"getStatusConfig(project.status || 'active').color\">\r\n      <lucide-icon\r\n        [icon]=\"getStatusConfig(project.status || 'active').icon\"\r\n        size=\"14\">\r\n      </lucide-icon>\r\n      {{ getStatusConfig(project.status || 'active').label }}\r\n    </mat-chip>\r\n\r\n    <!-- Members count -->\r\n    <div class=\"members-info\" *ngIf=\"showMembers && getMemberCount() > 0\">\r\n      <lucide-icon [icon]=\"icons.users\" size=\"14\"></lucide-icon>\r\n      <span>{{ getMemberCount() }} участников</span>\r\n    </div>\r\n\r\n    <!-- Creation date -->\r\n    <div class=\"date-info\" *ngIf=\"showDates\">\r\n      <lucide-icon [icon]=\"icons.calendar\" size=\"14\"></lucide-icon>\r\n      <span [matTooltip]=\"getFormattedDate(project.createdAt)\">\r\n        {{ getRelativeDate(project.createdAt) }}\r\n      </span>\r\n    </div>\r\n  </mat-card-actions>\r\n</mat-card>\r\n"
        },
        {
            "name": "ProjectListComponent",
            "id": "component-ProjectListComponent-dc455941abf3bdf8797b6194613a2f6e40377d4f046bd5f20d35a0635baceaf6a2d90318b640b7067b1504967333ccec64ff0b515ef6b7a12c9e42690283ad60",
            "file": "src/app/features/projects/components/project-list/project-list.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-project-list",
            "styleUrls": [
                "./project-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./project-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "config",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "Partial<ProjectListConfig>",
                    "decorators": []
                },
                {
                    "name": "debounceTime",
                    "defaultValue": "300",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 110,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "enableActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableFilters",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableInfiniteScroll",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableSearch",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableSelection",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableSorting",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "pageSize",
                    "defaultValue": "12",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 109,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "projectAction",
                    "defaultValue": "new EventEmitter<ProjectAction>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 114,
                    "type": "EventEmitter"
                },
                {
                    "name": "projectSelected",
                    "defaultValue": "new EventEmitter<Project>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 113,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectionChanged",
                    "defaultValue": "new EventEmitter<string[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 115,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "defaultConfig",
                    "defaultValue": "{\r\n    enableSelection: false,\r\n    enableInfiniteScroll: true,\r\n    enableFilters: true,\r\n    enableSorting: true,\r\n    enableSearch: true,\r\n    enableActions: true,\r\n    pageSize: 12,\r\n    debounceTime: 300\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectListConfig",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 174,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 173,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 160,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "filtersForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 155,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hasMoreProjects$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 163,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "hoveredProjectId",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 167,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "icons",
                    "defaultValue": "{\r\n    search: Search,\r\n    filter: Filter,\r\n    sortAsc: SortAsc,\r\n    sortDesc: SortDesc,\r\n    plus: Plus,\r\n    refresh: RefreshCw,\r\n    grid: Grid,\r\n    list: List,\r\n    more: MoreHorizontal\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 121,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "isLoadingMore",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 170,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 159,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "pagination$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ProjectPagination>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 161,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "projects$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Project[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 158,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "scrollContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 118,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'scrollContainer', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 154,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedProjectIds",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 166,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "selectedProjectIds$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string[]>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 162,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "showFilters",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 169,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "sortOptions",
                    "defaultValue": "[\r\n    { value: 'name', label: 'По названию' },\r\n    { value: 'createdAt', label: 'По дате создания' },\r\n    { value: 'updatedAt', label: 'По дате обновления' },\r\n    { value: 'status', label: 'По статусу' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "statusOptions",
                    "defaultValue": "[\r\n    { value: 'all', label: 'Все статусы' },\r\n    { value: 'active', label: 'Активные' },\r\n    { value: 'completed', label: 'Завершенные' },\r\n    { value: 'on-hold', label: 'На паузе' },\r\n    { value: 'archived', label: 'Архивные' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 133,
                    "modifierKind": [
                        125,
                        148
                    ]
                },
                {
                    "name": "viewMode",
                    "defaultValue": "'grid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"grid\" | \"list\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 168,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "viewModes",
                    "defaultValue": "[\r\n    { value: 'grid', label: 'Сетка', icon: this.icons.grid },\r\n    { value: 'list', label: 'Список', icon: this.icons.list }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 148,
                    "modifierKind": [
                        125,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "checkInfiniteScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 405,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSelectedCount",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSortIcon",
                    "args": [
                        {
                            "name": "field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 315,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeComponent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 340,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isProjectHovered",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 331,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isProjectSelected",
                    "args": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 327,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "projectId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "loadInitialData",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 381,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 218,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 212,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClearFilters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 286,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDeselectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 299,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFiltersChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 259,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLoadMore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 279,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onPageChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProjectAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "ProjectAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 236,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "ProjectAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProjectClick",
                    "args": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProjectHover",
                    "args": [
                        {
                            "name": "hover",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 250,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "hover",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProjectSelect",
                    "args": [
                        {
                            "name": "selection",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selection",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRefresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 275,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 254,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelectAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 292,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSortChange",
                    "args": [
                        {
                            "name": "field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "direction",
                            "type": "\"asc\" | \"desc\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 264,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "field",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "direction",
                            "type": "\"asc\" | \"desc\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onViewModeChange",
                    "args": [
                        {
                            "name": "mode",
                            "type": "\"grid\" | \"list\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 271,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "mode",
                            "type": "\"grid\" | \"list\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWindowScroll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:scroll', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "setupFormSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 361,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "trackByProjectId",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 420,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "project",
                            "type": "Project",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateFilters",
                    "args": [
                        {
                            "name": "filters",
                            "type": "Partial<ProjectFilters>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 401,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "filters",
                            "type": "Partial<ProjectFilters>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:scroll",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 225
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "MatChipsModule",
                    "type": "module"
                },
                {
                    "name": "MatTooltipModule",
                    "type": "module"
                },
                {
                    "name": "MatDialogModule",
                    "type": "module"
                },
                {
                    "name": "MatSnackBarModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                },
                {
                    "name": "ProjectCardComponent",
                    "type": "component"
                }
            ],
            "description": "<p>Контейнерный компонент списка проектов\nУправляет состоянием, фильтрацией, сортировкой и пагинацией</p>\n",
            "rawdescription": "\n\nКонтейнерный компонент списка проектов\nУправляет состоянием, фильтрацией, сортировкой и пагинацией\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  OnInit,\r\n  OnDestroy,\r\n  ViewChild,\r\n  ElementRef,\r\n  HostListener,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport {\r\n  LucideAngularModule,\r\n  Search,\r\n  Filter,\r\n  SortAsc,\r\n  SortDesc,\r\n  Plus,\r\n  RefreshCw,\r\n  Grid,\r\n  List,\r\n  MoreHorizontal\r\n} from 'lucide-angular';\r\nimport {\r\n  Subject,\r\n  Observable,\r\n  combineLatest,\r\n  debounceTime,\r\n  distinctUntilChanged,\r\n  takeUntil,\r\n  switchMap,\r\n  catchError,\r\n  of,\r\n  shareReplay,\r\n  startWith,\r\n  map\r\n} from 'rxjs';\r\nimport { Store } from '@ngrx/store';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\n\r\nimport { Project } from '@models';\r\nimport {\r\n  ProjectListState,\r\n  ProjectFilters,\r\n  ProjectSort,\r\n  ProjectPagination,\r\n  ProjectListConfig,\r\n  ProjectAction,\r\n  ProjectStatus\r\n} from '../../models';\r\nimport { ProjectCardComponent } from '../project-card/project-card.component';\r\nimport { ProjectListService } from '../../services/project-list.service';\r\nimport * as ProjectListActions from '../../store/project-list.actions';\r\nimport * as ProjectListSelectors from '../../store/project-list.selectors';\r\n\r\n/**\r\n * Контейнерный компонент списка проектов\r\n * Управляет состоянием, фильтрацией, сортировкой и пагинацией\r\n */\r\n@Component({\r\n  selector: 'app-project-list',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatProgressSpinnerModule,\r\n    MatPaginatorModule,\r\n    MatChipsModule,\r\n    MatTooltipModule,\r\n    MatDialogModule,\r\n    MatSnackBarModule,\r\n    LucideAngularModule,\r\n    ProjectCardComponent\r\n  ],\r\n  templateUrl: './project-list.component.html',\r\n  styleUrls: ['./project-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProjectListComponent implements OnInit, OnDestroy {\r\n\r\n  // Input properties\r\n  @Input() config: Partial<ProjectListConfig> = {};\r\n  @Input() enableSelection = false;\r\n  @Input() enableInfiniteScroll = true;\r\n  @Input() enableFilters = true;\r\n  @Input() enableSorting = true;\r\n  @Input() enableSearch = true;\r\n  @Input() enableActions = true;\r\n  @Input() pageSize = 12;\r\n  @Input() debounceTime = 300;\r\n\r\n  // Output events\r\n  @Output() projectSelected = new EventEmitter<Project>();\r\n  @Output() projectAction = new EventEmitter<ProjectAction>();\r\n  @Output() selectionChanged = new EventEmitter<string[]>();\r\n\r\n  // ViewChild для infinite scroll\r\n  @ViewChild('scrollContainer', { static: false }) scrollContainer!: ElementRef;\r\n\r\n  // Public properties\r\n  public readonly icons = {\r\n    search: Search,\r\n    filter: Filter,\r\n    sortAsc: SortAsc,\r\n    sortDesc: SortDesc,\r\n    plus: Plus,\r\n    refresh: RefreshCw,\r\n    grid: Grid,\r\n    list: List,\r\n    more: MoreHorizontal\r\n  };\r\n\r\n  public readonly statusOptions = [\r\n    { value: 'all', label: 'Все статусы' },\r\n    { value: 'active', label: 'Активные' },\r\n    { value: 'completed', label: 'Завершенные' },\r\n    { value: 'on-hold', label: 'На паузе' },\r\n    { value: 'archived', label: 'Архивные' }\r\n  ];\r\n\r\n  public readonly sortOptions = [\r\n    { value: 'name', label: 'По названию' },\r\n    { value: 'createdAt', label: 'По дате создания' },\r\n    { value: 'updatedAt', label: 'По дате обновления' },\r\n    { value: 'status', label: 'По статусу' }\r\n  ];\r\n\r\n  public readonly viewModes = [\r\n    { value: 'grid', label: 'Сетка', icon: this.icons.grid },\r\n    { value: 'list', label: 'Список', icon: this.icons.list }\r\n  ];\r\n\r\n  // Form controls\r\n  public searchForm: FormGroup;\r\n  public filtersForm: FormGroup;\r\n\r\n  // State observables\r\n  public projects$: Observable<Project[]>;\r\n  public loading$: Observable<boolean>;\r\n  public error$: Observable<string | null>;\r\n  public pagination$: Observable<ProjectPagination>;\r\n  public selectedProjectIds$: Observable<string[]>;\r\n  public hasMoreProjects$: Observable<boolean>;\r\n\r\n  // Local state\r\n  public selectedProjectIds: string[] = [];\r\n  public hoveredProjectId: string | null = null;\r\n  public viewMode: 'grid' | 'list' = 'grid';\r\n  public showFilters = false;\r\n  public isLoadingMore = false;\r\n\r\n  // Private properties\r\n  private readonly destroy$ = new Subject<void>();\r\n  private readonly defaultConfig: ProjectListConfig = {\r\n    enableSelection: false,\r\n    enableInfiniteScroll: true,\r\n    enableFilters: true,\r\n    enableSorting: true,\r\n    enableSearch: true,\r\n    enableActions: true,\r\n    pageSize: 12,\r\n    debounceTime: 300\r\n  };\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private projectListService: ProjectListService,\r\n    private fb: FormBuilder\r\n  ) {\r\n    // Инициализация форм\r\n    this.searchForm = this.fb.group({\r\n      searchTerm: ['', [Validators.maxLength(100)]]\r\n    });\r\n\r\n    this.filtersForm = this.fb.group({\r\n      status: ['all'],\r\n      dateRange: this.fb.group({\r\n        start: [null],\r\n        end: [null]\r\n      })\r\n    });\r\n\r\n    // Инициализация observables\r\n    this.projects$ = this.store.select(ProjectListSelectors.selectAllProjects);\r\n    this.loading$ = this.store.select(ProjectListSelectors.selectLoading);\r\n    this.error$ = this.store.select(ProjectListSelectors.selectError);\r\n    this.pagination$ = this.store.select(ProjectListSelectors.selectPagination);\r\n    this.selectedProjectIds$ = this.store.select(ProjectListSelectors.selectSelectedProjectIds);\r\n    this.hasMoreProjects$ = this.store.select(ProjectListSelectors.selectHasMoreProjects);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.initializeComponent();\r\n    this.setupFormSubscriptions();\r\n    this.loadInitialData();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  // Event handlers\r\n  @HostListener('window:scroll', ['$event'])\r\n  onWindowScroll(): void {\r\n    if (!this.enableInfiniteScroll || this.isLoadingMore) return;\r\n\r\n    this.checkInfiniteScroll();\r\n  }\r\n\r\n  // Public methods\r\n  onProjectClick(project: Project): void {\r\n    this.projectSelected.emit(project);\r\n  }\r\n\r\n  onProjectAction(action: ProjectAction): void {\r\n    this.projectAction.emit(action);\r\n  }\r\n\r\n  onProjectSelect(selection: { projectId: string; selected: boolean }): void {\r\n    if (selection.selected) {\r\n      this.selectedProjectIds = [...this.selectedProjectIds, selection.projectId];\r\n    } else {\r\n      this.selectedProjectIds = this.selectedProjectIds.filter(id => id !== selection.projectId);\r\n    }\r\n\r\n    this.selectionChanged.emit(this.selectedProjectIds);\r\n  }\r\n\r\n  onProjectHover(hover: { projectId: string; isHovered: boolean }): void {\r\n    this.hoveredProjectId = hover.isHovered ? hover.projectId : null;\r\n  }\r\n\r\n  onSearch(): void {\r\n    const searchTerm = this.searchForm.get('searchTerm')?.value;\r\n    this.updateFilters({ searchTerm });\r\n  }\r\n\r\n  onFiltersChange(): void {\r\n    const filters = this.filtersForm.value;\r\n    this.updateFilters(filters);\r\n  }\r\n\r\n  onSortChange(field: keyof Project, direction: 'asc' | 'desc'): void {\r\n    this.store.dispatch(ProjectListActions.updateSort({\r\n      field,\r\n      direction\r\n    }));\r\n  }\r\n\r\n  onViewModeChange(mode: 'grid' | 'list'): void {\r\n    this.viewMode = mode;\r\n  }\r\n\r\n  onRefresh(): void {\r\n    this.store.dispatch(ProjectListActions.refreshProjects());\r\n  }\r\n\r\n  onLoadMore(): void {\r\n    if (this.isLoadingMore) return;\r\n\r\n    this.isLoadingMore = true;\r\n    this.store.dispatch(ProjectListActions.loadMoreProjects());\r\n  }\r\n\r\n  onClearFilters(): void {\r\n    this.searchForm.reset();\r\n    this.filtersForm.reset();\r\n    this.store.dispatch(ProjectListActions.clearFilters());\r\n  }\r\n\r\n  onSelectAll(): void {\r\n    this.projects$.pipe(takeUntil(this.destroy$)).subscribe(projects => {\r\n      this.selectedProjectIds = projects.map(p => p.id);\r\n      this.selectionChanged.emit(this.selectedProjectIds);\r\n    });\r\n  }\r\n\r\n  onDeselectAll(): void {\r\n    this.selectedProjectIds = [];\r\n    this.selectionChanged.emit(this.selectedProjectIds);\r\n  }\r\n\r\n  onPageChange(event: any): void {\r\n    // Обработка изменения страницы пагинации\r\n    const page = event.pageIndex + 1;\r\n    const pageSize = event.pageSize;\r\n\r\n    this.store.dispatch(ProjectListActions.updatePagination({\r\n      pagination: { page, pageSize }\r\n    }));\r\n  }\r\n\r\n  // Utility methods\r\n  getSortIcon(field: keyof Project): any {\r\n    const currentSort = this.store.select(ProjectListSelectors.selectSort);\r\n    return currentSort.pipe(\r\n      map(sort => {\r\n        if (sort.field === field) {\r\n          return sort.direction === 'asc' ? this.icons.sortAsc : this.icons.sortDesc;\r\n        }\r\n        return this.icons.sortDesc;\r\n      })\r\n    );\r\n  }\r\n\r\n  isProjectSelected(projectId: string): boolean {\r\n    return this.selectedProjectIds.includes(projectId);\r\n  }\r\n\r\n  isProjectHovered(projectId: string): boolean {\r\n    return this.hoveredProjectId === projectId;\r\n  }\r\n\r\n  getSelectedCount(): number {\r\n    return this.selectedProjectIds.length;\r\n  }\r\n\r\n  // Private methods\r\n  private initializeComponent(): void {\r\n    // Объединяем конфигурацию\r\n    const config = { ...this.defaultConfig, ...this.config };\r\n\r\n    this.enableSelection = config.enableSelection;\r\n    this.enableInfiniteScroll = config.enableInfiniteScroll;\r\n    this.enableFilters = config.enableFilters;\r\n    this.enableSorting = config.enableSorting;\r\n    this.enableSearch = config.enableSearch;\r\n    this.enableActions = config.enableActions;\r\n    this.pageSize = config.pageSize;\r\n    this.debounceTime = config.debounceTime;\r\n\r\n    // Подписываемся на изменения выбранных проектов\r\n    this.selectedProjectIds$.pipe(\r\n      takeUntil(this.destroy$)\r\n    ).subscribe(ids => {\r\n      this.selectedProjectIds = ids;\r\n    });\r\n  }\r\n\r\n  private setupFormSubscriptions(): void {\r\n    // Подписка на изменения поиска с debounce\r\n    this.searchForm.get('searchTerm')?.valueChanges.pipe(\r\n      takeUntil(this.destroy$),\r\n      debounceTime(this.debounceTime),\r\n      distinctUntilChanged()\r\n    ).subscribe(searchTerm => {\r\n      this.updateFilters({ searchTerm });\r\n    });\r\n\r\n    // Подписка на изменения фильтров\r\n    this.filtersForm.valueChanges.pipe(\r\n      takeUntil(this.destroy$),\r\n      debounceTime(500),\r\n      distinctUntilChanged()\r\n    ).subscribe(filters => {\r\n      this.updateFilters(filters);\r\n    });\r\n  }\r\n\r\n  private loadInitialData(): void {\r\n    const request = {\r\n      filters: {\r\n        searchTerm: '',\r\n        status: 'all',\r\n        ownerId: null,\r\n        dateRange: { start: null, end: null }\r\n      },\r\n      sort: {\r\n        field: 'createdAt' as keyof Project,\r\n        direction: 'desc' as const\r\n      },\r\n      pagination: {\r\n        page: 1,\r\n        pageSize: this.pageSize\r\n      }\r\n    };\r\n    this.store.dispatch(ProjectListActions.loadProjects({ request }));\r\n  }\r\n\r\n  private updateFilters(filters: Partial<ProjectFilters>): void {\r\n    this.store.dispatch(ProjectListActions.updateFilters({ filters }));\r\n  }\r\n\r\n  private checkInfiniteScroll(): void {\r\n    if (!this.scrollContainer) return;\r\n\r\n    const element = this.scrollContainer.nativeElement;\r\n    const scrollTop = element.scrollTop;\r\n    const scrollHeight = element.scrollHeight;\r\n    const clientHeight = element.clientHeight;\r\n\r\n    // Загружаем больше проектов когда пользователь приближается к концу списка\r\n    if (scrollTop + clientHeight >= scrollHeight - 100) {\r\n      this.onLoadMore();\r\n    }\r\n  }\r\n\r\n  // TrackBy function для оптимизации\r\n  trackByProjectId(index: number, project: Project): string {\r\n    return project.id;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// Переменные\r\n$header-height: 80px;\r\n$toolbar-height: 60px;\r\n$border-radius: 8px;\r\n$transition-duration: 0.2s;\r\n$shadow-light: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n$shadow-medium: 0 4px 8px rgba(0, 0, 0, 0.15);\r\n$spacing-xs: 4px;\r\n$spacing-sm: 8px;\r\n$spacing-md: 16px;\r\n$spacing-lg: 24px;\r\n$spacing-xl: 32px;\r\n\r\n// Миксины\r\n@mixin flex-center {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n@mixin flex-between {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\n@mixin card-transition {\r\n  transition: all $transition-duration cubic-bezier(0.4, 0, 0.2, 1);\r\n}\r\n\r\n// Основной контейнер\r\n.project-list-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background: #fafafa;\r\n  min-height: 100vh;\r\n}\r\n\r\n// Header с поиском и фильтрами\r\n.project-list-header {\r\n  background: white;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  padding: $spacing-md;\r\n  @include flex-between;\r\n  flex-wrap: wrap;\r\n  gap: $spacing-md;\r\n  box-shadow: $shadow-light;\r\n\r\n  // Поиск\r\n  .search-section {\r\n    flex: 1;\r\n    min-width: 300px;\r\n    max-width: 500px;\r\n\r\n    .search-form {\r\n      width: 100%;\r\n\r\n      .search-field {\r\n        width: 100%;\r\n\r\n        ::ng-deep .mat-form-field-wrapper {\r\n          padding-bottom: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Фильтры\r\n  .filters-section {\r\n    position: relative;\r\n\r\n    .filters-panel {\r\n      position: absolute;\r\n      top: 100%;\r\n      right: 0;\r\n      background: white;\r\n      border: 1px solid #e0e0e0;\r\n      border-radius: $border-radius;\r\n      box-shadow: $shadow-medium;\r\n      padding: $spacing-md;\r\n      min-width: 300px;\r\n      z-index: 1000;\r\n      margin-top: $spacing-xs;\r\n\r\n      .filters-form {\r\n        display: flex;\r\n        flex-direction: column;\r\n        gap: $spacing-md;\r\n\r\n        .date-range {\r\n          display: flex;\r\n          gap: $spacing-sm;\r\n        }\r\n      }\r\n\r\n      .filters-actions {\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        margin-top: $spacing-md;\r\n        padding-top: $spacing-md;\r\n        border-top: 1px solid #e0e0e0;\r\n      }\r\n    }\r\n  }\r\n\r\n  // Сортировка\r\n  .sort-section {\r\n    min-width: 200px;\r\n  }\r\n\r\n  // Действия\r\n  .actions-section {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: $spacing-sm;\r\n\r\n    .view-mode-toggle {\r\n      display: flex;\r\n      border: 1px solid #e0e0e0;\r\n      border-radius: $border-radius;\r\n      overflow: hidden;\r\n\r\n      button {\r\n        border-radius: 0;\r\n        border: none;\r\n        background: white;\r\n        color: #666;\r\n\r\n        &.active {\r\n          background: #1976d2;\r\n          color: white;\r\n        }\r\n\r\n        &:first-child {\r\n          border-top-left-radius: $border-radius;\r\n          border-bottom-left-radius: $border-radius;\r\n        }\r\n\r\n        &:last-child {\r\n          border-top-right-radius: $border-radius;\r\n          border-bottom-right-radius: $border-radius;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Информация о выбранных проектах\r\n.selection-info {\r\n  background: #e3f2fd;\r\n  border-bottom: 1px solid #bbdefb;\r\n  padding: $spacing-md;\r\n\r\n  .selection-summary {\r\n    @include flex-between;\r\n\r\n    span {\r\n      font-weight: 500;\r\n      color: #1976d2;\r\n    }\r\n\r\n    .selection-actions {\r\n      display: flex;\r\n      gap: $spacing-sm;\r\n    }\r\n  }\r\n}\r\n\r\n// Сообщение об ошибке\r\n.error-message {\r\n  background: #ffebee;\r\n  border: 1px solid #ffcdd2;\r\n  border-radius: $border-radius;\r\n  padding: $spacing-md;\r\n  margin: $spacing-md;\r\n  color: #c62828;\r\n}\r\n\r\n// Контейнер проектов\r\n.projects-container {\r\n  flex: 1;\r\n  padding: $spacing-md;\r\n  overflow-y: auto;\r\n  min-height: 400px;\r\n\r\n  // Режим сетки\r\n  &.grid-view {\r\n    .projects-grid {\r\n      display: grid;\r\n      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n      gap: $spacing-md;\r\n      align-items: start;\r\n    }\r\n  }\r\n\r\n  // Режим списка\r\n  &.list-view {\r\n    .projects-grid {\r\n      display: flex;\r\n      flex-direction: column;\r\n      gap: $spacing-sm;\r\n\r\n      app-project-card {\r\n        ::ng-deep .project-card {\r\n          max-width: none;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // С поддержкой выбора\r\n  &.with-selection {\r\n    .projects-grid {\r\n      gap: $spacing-sm;\r\n    }\r\n  }\r\n}\r\n\r\n// Индикатор загрузки\r\n.loading-container {\r\n  @include flex-center;\r\n  flex-direction: column;\r\n  gap: $spacing-md;\r\n  padding: $spacing-xl;\r\n  color: #666;\r\n\r\n  p {\r\n    margin: 0;\r\n    font-size: 14px;\r\n  }\r\n}\r\n\r\n// Пустое состояние\r\n.empty-state {\r\n  @include flex-center;\r\n  flex-direction: column;\r\n  padding: $spacing-xl * 2;\r\n  text-align: center;\r\n\r\n  .empty-content {\r\n    max-width: 400px;\r\n\r\n    .empty-icon {\r\n      color: #ccc;\r\n      margin-bottom: $spacing-lg;\r\n    }\r\n\r\n    h3 {\r\n      margin: 0 0 $spacing-sm 0;\r\n      color: #666;\r\n      font-size: 18px;\r\n      font-weight: 500;\r\n    }\r\n\r\n    p {\r\n      margin: 0 0 $spacing-lg 0;\r\n      color: #999;\r\n      font-size: 14px;\r\n      line-height: 1.5;\r\n    }\r\n  }\r\n}\r\n\r\n// Индикатор загрузки дополнительных проектов\r\n.load-more-container {\r\n  @include flex-center;\r\n  gap: $spacing-sm;\r\n  padding: $spacing-lg;\r\n  color: #666;\r\n  font-size: 14px;\r\n\r\n  span {\r\n    margin-left: $spacing-sm;\r\n  }\r\n}\r\n\r\n// Секция \"Загрузить еще\"\r\n.load-more-section {\r\n  @include flex-center;\r\n  padding: $spacing-lg;\r\n\r\n  button {\r\n    @include flex-center;\r\n    gap: $spacing-sm;\r\n  }\r\n}\r\n\r\n// Пагинация\r\n.pagination-container {\r\n  background: white;\r\n  border-top: 1px solid #e0e0e0;\r\n  padding: $spacing-md;\r\n  @include flex-center;\r\n}\r\n\r\n// Адаптивность\r\n@media (max-width: 1200px) {\r\n  .project-list-header {\r\n    .search-section {\r\n      min-width: 250px;\r\n      max-width: 400px;\r\n    }\r\n  }\r\n\r\n  .projects-container.grid-view .projects-grid {\r\n    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\r\n  }\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .project-list-header {\r\n    flex-direction: column;\r\n    align-items: stretch;\r\n    gap: $spacing-sm;\r\n\r\n    .search-section {\r\n      min-width: auto;\r\n      max-width: none;\r\n    }\r\n\r\n    .filters-section {\r\n      order: 2;\r\n    }\r\n\r\n    .sort-section {\r\n      order: 3;\r\n      min-width: auto;\r\n    }\r\n\r\n    .actions-section {\r\n      order: 4;\r\n      justify-content: space-between;\r\n    }\r\n  }\r\n\r\n  .projects-container.grid-view .projects-grid {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .filters-section .filters-panel {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    width: 90%;\r\n    max-width: 400px;\r\n    max-height: 80vh;\r\n    overflow-y: auto;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .project-list-header {\r\n    padding: $spacing-sm;\r\n\r\n    .actions-section {\r\n      flex-wrap: wrap;\r\n      gap: $spacing-xs;\r\n\r\n      .view-mode-toggle {\r\n        order: 2;\r\n      }\r\n    }\r\n  }\r\n\r\n  .projects-container {\r\n    padding: $spacing-sm;\r\n  }\r\n\r\n  .selection-info .selection-summary {\r\n    flex-direction: column;\r\n    gap: $spacing-sm;\r\n    align-items: flex-start;\r\n  }\r\n}\r\n\r\n// Темная тема\r\n@media (prefers-color-scheme: dark) {\r\n  .project-list-container {\r\n    background: #1a1a1a;\r\n  }\r\n\r\n  .project-list-header {\r\n    background: #2d2d2d;\r\n    border-bottom-color: #444;\r\n\r\n    .filters-panel {\r\n      background: #2d2d2d;\r\n      border-color: #444;\r\n    }\r\n  }\r\n\r\n  .selection-info {\r\n    background: #1e3a8a;\r\n    border-bottom-color: #3b82f6;\r\n\r\n    .selection-summary span {\r\n      color: #93c5fd;\r\n    }\r\n  }\r\n\r\n  .error-message {\r\n    background: #451a03;\r\n    border-color: #92400e;\r\n    color: #fbbf24;\r\n  }\r\n\r\n  .empty-state .empty-content {\r\n    .empty-icon {\r\n      color: #666;\r\n    }\r\n\r\n    h3 {\r\n      color: #ccc;\r\n    }\r\n\r\n    p {\r\n      color: #999;\r\n    }\r\n  }\r\n\r\n  .pagination-container {\r\n    background: #2d2d2d;\r\n    border-top-color: #444;\r\n  }\r\n}\r\n\r\n// Высокий контраст\r\n@media (prefers-contrast: high) {\r\n  .project-list-header {\r\n    border-bottom-width: 2px;\r\n  }\r\n\r\n  .selection-info {\r\n    border-bottom-width: 2px;\r\n  }\r\n\r\n  .error-message {\r\n    border-width: 2px;\r\n  }\r\n\r\n  .pagination-container {\r\n    border-top-width: 2px;\r\n  }\r\n}\r\n\r\n// Уменьшенное движение\r\n@media (prefers-reduced-motion: reduce) {\r\n  .project-list-container * {\r\n    transition: none !important;\r\n    animation: none !important;\r\n  }\r\n}\r\n\r\n// Фокус для доступности\r\n.project-list-header button:focus,\r\n.projects-container button:focus {\r\n  outline: 2px solid #1976d2;\r\n  outline-offset: 2px;\r\n}\r\n\r\n// Печать\r\n@media print {\r\n  .project-list-header,\r\n  .selection-info,\r\n  .pagination-container {\r\n    display: none;\r\n  }\r\n\r\n  .projects-container {\r\n    padding: 0;\r\n  }\r\n\r\n  .projects-grid {\r\n    display: block !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./project-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "projectListService",
                        "type": "ProjectListService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 183,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "projectListService",
                        "type": "ProjectListService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"project-list-container\">\r\n  <!-- Header с поиском и фильтрами -->\r\n  <div class=\"project-list-header\">\r\n    <!-- Поиск -->\r\n    <div class=\"search-section\" *ngIf=\"enableSearch\">\r\n      <form [formGroup]=\"searchForm\" class=\"search-form\">\r\n        <mat-form-field appearance=\"outline\" class=\"search-field\">\r\n          <mat-label>Поиск проектов</mat-label>\r\n          <input\r\n            matInput\r\n            formControlName=\"searchTerm\"\r\n            placeholder=\"Введите название проекта...\"\r\n            [matTooltip]=\"'Поиск по названию и описанию проекта'\">\r\n          <lucide-icon matSuffix [icon]=\"icons.search\" size=\"18\"></lucide-icon>\r\n        </mat-form-field>\r\n      </form>\r\n    </div>\r\n\r\n    <!-- Фильтры -->\r\n    <div class=\"filters-section\" *ngIf=\"enableFilters\">\r\n      <button\r\n        mat-button\r\n        [class.active]=\"showFilters\"\r\n        (click)=\"showFilters = !showFilters\"\r\n        [matTooltip]=\"'Показать/скрыть фильтры'\">\r\n        <lucide-icon [icon]=\"icons.filter\" size=\"16\"></lucide-icon>\r\n        Фильтры\r\n      </button>\r\n\r\n      <div class=\"filters-panel\" *ngIf=\"showFilters\">\r\n        <form [formGroup]=\"filtersForm\" class=\"filters-form\">\r\n          <!-- Статус -->\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label>Статус</mat-label>\r\n            <mat-select formControlName=\"status\">\r\n              <mat-option *ngFor=\"let option of statusOptions\" [value]=\"option.value\">\r\n                {{ option.label }}\r\n              </mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n\r\n          <!-- Диапазон дат -->\r\n          <div formGroupName=\"dateRange\" class=\"date-range\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Дата начала</mat-label>\r\n              <input matInput type=\"date\" formControlName=\"start\">\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Дата окончания</mat-label>\r\n              <input matInput type=\"date\" formControlName=\"end\">\r\n            </mat-form-field>\r\n          </div>\r\n        </form>\r\n\r\n        <div class=\"filters-actions\">\r\n          <button mat-button (click)=\"onClearFilters()\">\r\n            Очистить\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Сортировка -->\r\n    <div class=\"sort-section\" *ngIf=\"enableSorting\">\r\n      <mat-form-field appearance=\"outline\">\r\n        <mat-label>Сортировка</mat-label>\r\n        <mat-select (selectionChange)=\"onSortChange($event.value, 'desc')\">\r\n          <mat-option *ngFor=\"let option of sortOptions\" [value]=\"option.value\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <!-- Действия -->\r\n    <div class=\"actions-section\">\r\n      <!-- Режим просмотра -->\r\n      <div class=\"view-mode-toggle\">\r\n        <button\r\n          mat-icon-button\r\n          [class.active]=\"viewMode === 'grid'\"\r\n          (click)=\"onViewModeChange('grid')\"\r\n          [matTooltip]=\"'Сетка'\">\r\n          <lucide-icon [icon]=\"icons.grid\" size=\"18\"></lucide-icon>\r\n        </button>\r\n        <button\r\n          mat-icon-button\r\n          [class.active]=\"viewMode === 'list'\"\r\n          (click)=\"onViewModeChange('list')\"\r\n          [matTooltip]=\"'Список'\">\r\n          <lucide-icon [icon]=\"icons.list\" size=\"18\"></lucide-icon>\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Обновить -->\r\n      <button\r\n        mat-icon-button\r\n        (click)=\"onRefresh()\"\r\n        [matTooltip]=\"'Обновить список'\">\r\n        <lucide-icon [icon]=\"icons.refresh\" size=\"18\"></lucide-icon>\r\n      </button>\r\n\r\n      <!-- Создать проект -->\r\n      <button\r\n        mat-raised-button\r\n        color=\"primary\"\r\n        (click)=\"projectAction.emit({ type: 'create', projectId: '' })\"\r\n        [matTooltip]=\"'Создать новый проект'\">\r\n        <lucide-icon [icon]=\"icons.plus\" size=\"16\"></lucide-icon>\r\n        Создать проект\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Информация о выбранных проектах -->\r\n  <div class=\"selection-info\" *ngIf=\"enableSelection && getSelectedCount() > 0\">\r\n    <div class=\"selection-summary\">\r\n      <span>Выбрано проектов: {{ getSelectedCount() }}</span>\r\n      <div class=\"selection-actions\">\r\n        <button mat-button (click)=\"onSelectAll()\">Выбрать все</button>\r\n        <button mat-button (click)=\"onDeselectAll()\">Снять выбор</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Сообщение об ошибке -->\r\n  <div class=\"error-message\" *ngIf=\"error$ | async as error\">\r\n    <mat-error>{{ error }}</mat-error>\r\n  </div>\r\n\r\n  <!-- Список проектов -->\r\n  <div\r\n    #scrollContainer\r\n    class=\"projects-container\"\r\n    [class.grid-view]=\"viewMode === 'grid'\"\r\n    [class.list-view]=\"viewMode === 'list'\"\r\n    [class.with-selection]=\"enableSelection\">\r\n\r\n    <!-- Индикатор загрузки -->\r\n    <div class=\"loading-container\" *ngIf=\"loading$ | async\">\r\n      <mat-spinner diameter=\"40\"></mat-spinner>\r\n      <p>Загрузка проектов...</p>\r\n    </div>\r\n\r\n    <!-- Пустое состояние -->\r\n    <div class=\"empty-state\" *ngIf=\"(projects$ | async)?.length === 0 && !(loading$ | async)\">\r\n      <div class=\"empty-content\">\r\n        <lucide-icon [icon]=\"icons.search\" size=\"48\" class=\"empty-icon\"></lucide-icon>\r\n        <h3>Проекты не найдены</h3>\r\n        <p>Попробуйте изменить параметры поиска или создать новый проект</p>\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          (click)=\"projectAction.emit({ type: 'create', projectId: '' })\">\r\n          Создать проект\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Карточки проектов -->\r\n    <div class=\"projects-grid\" *ngIf=\"(projects$ | async)?.length > 0\">\r\n      <app-project-card\r\n        *ngFor=\"let project of projects$ | async; trackBy: trackByProjectId\"\r\n        [project]=\"project\"\r\n        [isSelected]=\"isProjectSelected(project.id)\"\r\n        [isHovered]=\"isProjectHovered(project.id)\"\r\n        [showActions]=\"enableActions\"\r\n        [showSelection]=\"enableSelection\"\r\n        [showStatus]=\"true\"\r\n        [showMembers]=\"true\"\r\n        [showDates]=\"true\"\r\n        [loading]=\"false\"\r\n        [disabled]=\"false\"\r\n        (select)=\"onProjectSelect($event)\"\r\n        (action)=\"onProjectAction($event)\"\r\n        (click)=\"onProjectClick($event)\"\r\n        (hover)=\"onProjectHover($event)\">\r\n      </app-project-card>\r\n    </div>\r\n\r\n    <!-- Индикатор загрузки дополнительных проектов -->\r\n    <div class=\"load-more-container\" *ngIf=\"isLoadingMore\">\r\n      <mat-spinner diameter=\"32\"></mat-spinner>\r\n      <span>Загрузка дополнительных проектов...</span>\r\n    </div>\r\n\r\n    <!-- Кнопка \"Загрузить еще\" -->\r\n    <div class=\"load-more-section\" *ngIf=\"(hasMoreProjects$ | async) && !isLoadingMore\">\r\n      <button\r\n        mat-button\r\n        (click)=\"onLoadMore()\"\r\n        [matTooltip]=\"'Загрузить еще проектов'\">\r\n        <lucide-icon [icon]=\"icons.more\" size=\"16\"></lucide-icon>\r\n        Загрузить еще\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Пагинация (альтернатива infinite scroll) -->\r\n  <div class=\"pagination-container\" *ngIf=\"!enableInfiniteScroll\">\r\n    <mat-paginator\r\n      [length]=\"(pagination$ | async)?.total || 0\"\r\n      [pageSize]=\"pageSize\"\r\n      [pageSizeOptions]=\"[6, 12, 24, 48]\"\r\n      (page)=\"onPageChange($event)\">\r\n    </mat-paginator>\r\n  </div>\r\n</div>\r\n"
        },
        {
            "name": "ProjectsComponent",
            "id": "component-ProjectsComponent-9302066599717f86077d909288057ff1ce23993d2126a4c2c4d6b1c38eb3b8da6678803472ed9b19de3859de3221d9b4061670381164fff0d4f1218e3aee5a65",
            "file": "src/app/features/projects/components/projects/projects.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-projects",
            "styleUrls": [
                "./projects.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./projects.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isMobileMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                },
                {
                    "name": "ProjectListComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject, OnDestroy, HostListener } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '@services';\r\nimport { User } from '@models';\r\nimport { Subscription } from 'rxjs';\r\nimport { LayoutComponent } from '../../../../shared/components/layout';\r\nimport { ProjectListComponent } from '../project-list/project-list.component';\r\n\r\n@Component({\r\n  selector: 'app-projects',\r\n  templateUrl: './projects.component.html',\r\n  styleUrls: ['./projects.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, LayoutComponent, ProjectListComponent]\r\n})\r\nexport class ProjectsComponent implements OnInit, OnDestroy {\r\n  private readonly authService = inject(AuthService);\r\n  private readonly router = inject(Router);\r\n\r\n  isAuthenticated = false;\r\n  currentUser: User | null = null;\r\n  private authSubscription?: Subscription;\r\n  private userSubscription?: Subscription;\r\n\r\n  // Mobile menu state\r\n  isMobileMenuOpen = false;\r\n\r\n  ngOnInit(): void {\r\n    this.authSubscription = this.authService.isAuthenticated$.subscribe(isAuth => {\r\n      this.isAuthenticated = isAuth;\r\n    });\r\n\r\n    this.userSubscription = this.authService.currentUser$.subscribe(user => {\r\n      this.currentUser = user;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.authSubscription?.unsubscribe();\r\n    this.userSubscription?.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  changePassword(): void {\r\n    // TODO: Implement change password functionality\r\n  }\r\n\r\n  toggleMobileMenu(): void {\r\n    this.isMobileMenuOpen = !this.isMobileMenuOpen;\r\n  }\r\n\r\n  closeMobileMenu(): void {\r\n    this.isMobileMenuOpen = false;\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n    if (!target.closest('.nav') && this.isMobileMenuOpen) {\r\n      this.isMobileMenuOpen = false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".projects-container {\r\n  padding: 24px;\r\n}\r\n\r\n// Header styles\r\n.dashboard-header {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: white;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.header-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 1rem 2rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.logo h1 {\r\n  font-size: 1.5rem;\r\n  color: #2c3e50;\r\n  margin: 0;\r\n  font-weight: 600;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  position: relative;\r\n}\r\n\r\n.nav-desktop {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.nav-link {\r\n  text-decoration: none;\r\n  color: #6c757d;\r\n  font-weight: 500;\r\n  transition: color 0.3s ease;\r\n  padding: 0.5rem 0;\r\n  position: relative;\r\n}\r\n\r\n.nav-link:hover,\r\n.nav-link.active {\r\n  color: #3498db;\r\n}\r\n\r\n.nav-link.active::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -1rem;\r\n  left: 0;\r\n  right: 0;\r\n  height: 2px;\r\n  background: #3498db;\r\n}\r\n\r\n// Mobile menu toggle\r\n.mobile-menu-toggle {\r\n  display: none;\r\n  background: none;\r\n  border: none;\r\n  color: #6c757d;\r\n  cursor: pointer;\r\n  padding: 0.5rem;\r\n  border-radius: 6px;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.mobile-menu-toggle:hover {\r\n  background: rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n// Mobile menu\r\n.mobile-menu {\r\n  display: none;\r\n  position: absolute;\r\n  top: 100%;\r\n  right: 0;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  min-width: 200px;\r\n  z-index: 1000;\r\n  margin-top: 8px;\r\n  border: 1px solid rgba(0, 0, 0, 0.08);\r\n  overflow: hidden;\r\n  opacity: 0;\r\n  transform: translateY(-10px);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.mobile-menu.open {\r\n  opacity: 1;\r\n  transform: translateY(0);\r\n}\r\n\r\n.mobile-nav-link {\r\n  display: block;\r\n  padding: 1rem 1.5rem;\r\n  color: #6c757d;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n  transition: background 0.3s ease;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.mobile-nav-link:hover,\r\n.mobile-nav-link.active {\r\n  background: #f8f9fa;\r\n  color: #3498db;\r\n}\r\n\r\n.mobile-nav-link:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n// Main content\r\n.dashboard-main {\r\n  margin-top: 80px;\r\n  min-height: calc(100vh - 80px - 300px);\r\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  padding: 2rem;\r\n}\r\n\r\n.welcome-section {\r\n  max-width: 1200px;\r\n  margin: 0 auto 3rem;\r\n  text-align: center;\r\n}\r\n\r\n.welcome-title {\r\n  font-size: 3rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.welcome-subtitle {\r\n  font-size: 1.2rem;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n// Placeholder content\r\n.placeholder-content {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.placeholder-card {\r\n  background: white;\r\n  border-radius: 16px;\r\n  padding: 3rem;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n.placeholder-icon {\r\n  width: 120px;\r\n  height: 120px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto 2rem;\r\n  color: white;\r\n  position: relative;\r\n}\r\n\r\n.placeholder-icon i-lucide {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 64px;\r\n  height: 64px;\r\n}\r\n\r\n.placeholder-card h2 {\r\n  font-size: 2rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.placeholder-card p {\r\n  font-size: 1.1rem;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n  line-height: 1.6;\r\n}\r\n\r\n.placeholder-features {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 1.5rem;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.feature-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n  padding: 1rem;\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.feature-item:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.feature-item i-lucide {\r\n  color: #3498db;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n\r\n.feature-item span {\r\n  font-weight: 500;\r\n  color: #2c3e50;\r\n}\r\n\r\n// Footer styles\r\n.footer {\r\n  background: #2c3e50;\r\n  color: white;\r\n  padding: 3rem 0 1rem;\r\n  margin-top: auto;\r\n}\r\n\r\n.footer-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 2rem;\r\n}\r\n\r\n.footer-section h4 {\r\n  margin-bottom: 1rem;\r\n  color: #3498db;\r\n}\r\n\r\n.footer-section p {\r\n  color: rgba(255, 255, 255, 0.8);\r\n  line-height: 1.6;\r\n}\r\n\r\n.footer-section a {\r\n  display: block;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  text-decoration: none;\r\n  margin-bottom: 0.5rem;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.footer-section a:hover {\r\n  color: white;\r\n}\r\n\r\n.footer-bottom {\r\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n  padding-top: 1rem;\r\n  text-align: center;\r\n  opacity: 0.8;\r\n  margin-top: 2rem;\r\n}\r\n\r\n// Animations\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(30px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n// Responsive\r\n@media (max-width: 768px) {\r\n  .header-content {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .nav-desktop {\r\n    display: none;\r\n  }\r\n\r\n  .mobile-menu-toggle {\r\n    display: block;\r\n  }\r\n\r\n  .mobile-menu {\r\n    display: block;\r\n  }\r\n\r\n  .dashboard-main {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2.5rem;\r\n  }\r\n\r\n  .placeholder-card {\r\n    padding: 2rem;\r\n  }\r\n\r\n  .placeholder-features {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .footer-content {\r\n    grid-template-columns: 1fr;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .header-content {\r\n    padding: 0.75rem;\r\n  }\r\n\r\n  .logo h1 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .placeholder-card {\r\n    padding: 1.5rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./projects.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout>\r\n  <app-project-list></app-project-list>\r\n</app-layout>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-d80f50cc274f1568a79e2d6ac23927ebe5cdefe760db85e7503cbb905d0df88a8a936b3fdaf3c872f402bfcf60b3abb96aeaae1a07620b64671c8d6c315894f2",
            "file": "src/app/features/auth/components/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [
                "./register.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "error$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<string | null>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "Eye",
                    "defaultValue": "Eye",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "EyeOff",
                    "defaultValue": "EyeOff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "hideConfirmPassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "hidePassword",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "Loader2",
                    "defaultValue": "Loader2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "loading$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "Mail",
                    "defaultValue": "Mail",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "User",
                    "defaultValue": "User",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "controlName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPasswordStrength",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 180,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hasPasswordMismatch",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 192,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isFieldInvalid",
                    "args": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 187,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fieldName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markFormGroupTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 126,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "passwordMatchValidator",
                    "args": [
                        {
                            "name": "group",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "group",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "passwordStrengthValidator",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type | null",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatCheckboxModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, OnDestroy, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, Validators, AbstractControl, ReactiveFormsModule } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subject } from 'rxjs';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { LucideAngularModule, User, Mail, Eye, EyeOff, Loader2 } from 'lucide-angular';\n\nimport * as AuthActions from '../../store/auth.actions';\nimport * as AuthSelectors from '../../store/auth.selectors';\nimport { RegisterRequest } from '@models';\nimport { ValidationUtils } from '@utils';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    LucideAngularModule\n  ]\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  private readonly fb = inject(FormBuilder);\n  private readonly store = inject(Store);\n\n  registerForm!: FormGroup;\n  loading$!: Observable<boolean>;\n  error$!: Observable<string | null>;\n  hidePassword = true;\n  hideConfirmPassword = true;\n  private readonly destroy$ = new Subject<void>();\n\n  // Lucide icons\n  readonly User = User;\n  readonly Mail = Mail;\n  readonly Eye = Eye;\n  readonly EyeOff = EyeOff;\n  readonly Loader2 = Loader2;\n\n\n\n  constructor() {\n    this.loading$ = this.store.select(AuthSelectors.selectIsLoading);\n    this.error$ = this.store.select(AuthSelectors.selectError);\n  }\n\n  ngOnInit(): void {\n    this.initForm();\n    this.clearError();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initForm(): void {\n    this.registerForm = this.fb.group({\n      username: ['', [\n        Validators.required,\n        Validators.minLength(3),\n        Validators.maxLength(20),\n        Validators.pattern(/^[a-zA-Z0-9_]+$/)\n      ]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        this.passwordStrengthValidator\n      ]],\n      confirmPassword: ['', [Validators.required]],\n      agreeToTerms: [false, [Validators.requiredTrue]]\n    }, { validators: this.passwordMatchValidator });\n  }\n\n  private passwordStrengthValidator(control: AbstractControl): { [key: string]: boolean } | null {\n    const password = control.value;\n    if (!password) return null;\n\n    const hasLetter = /[a-zA-Z]/.test(password);\n    const hasNumber = /\\d/.test(password);\n\n\n    if (!hasLetter || !hasNumber) {\n      return { passwordStrength: true };\n    }\n\n    return null;\n  }\n\n  private passwordMatchValidator(group: AbstractControl): { [key: string]: boolean } | null {\n    const password = group.get('password');\n    const confirmPassword = group.get('confirmPassword');\n\n    if (!password || !confirmPassword) return null;\n\n    return password.value === confirmPassword.value ? null : { passwordMismatch: true };\n  }\n\n  onSubmit(): void {\n    if (this.registerForm.valid) {\n      const userData: RegisterRequest = {\n        username: this.registerForm.value.username,\n        email: this.registerForm.value.email,\n        password: this.registerForm.value.password,\n        confirmPassword: this.registerForm.value.confirmPassword,\n      };\n\n      this.store.dispatch(AuthActions.register({ userData }));\n    } else {\n      this.markFormGroupTouched();\n    }\n  }\n\n  private markFormGroupTouched(): void {\n    Object.keys(this.registerForm.controls).forEach((key) => {\n      const control = this.registerForm.get(key);\n      control?.markAsTouched();\n    });\n  }\n\n  private clearError(): void {\n    this.store.dispatch(AuthActions.clearAuthError());\n  }\n\n  getErrorMessage(controlName: string): string {\n    const control = this.registerForm.get(controlName);\n\n    if (control?.hasError('required')) {\n      return 'Это поле обязательно';\n    }\n\n    if (controlName === 'username') {\n      if (control?.hasError('minlength')) {\n        return 'Имя пользователя должно содержать минимум 3 символа';\n      }\n      if (control?.hasError('maxlength')) {\n        return 'Имя пользователя не должно превышать 20 символов';\n      }\n      if (control?.hasError('pattern')) {\n        return 'Имя пользователя может содержать только буквы, цифры и подчеркивания';\n      }\n    }\n\n    if (controlName === 'email' && control?.hasError('email')) {\n      return 'Введите корректный email';\n    }\n\n    if (controlName === 'password') {\n      if (control?.hasError('minlength')) {\n        return 'Пароль должен содержать минимум 8 символов';\n      }\n      if (control?.hasError('passwordStrength')) {\n        return 'Пароль должен содержать буквы и цифры';\n      }\n    }\n\n    if (controlName === 'confirmPassword' && control?.hasError('required')) {\n      return 'Подтвердите пароль';\n    }\n\n    if (controlName === 'agreeToTerms' && control?.hasError('required')) {\n      return 'Необходимо согласиться с условиями';\n    }\n\n    return '';\n  }\n\n  getPasswordStrength(): string {\n    const password = this.registerForm.get('password')?.value;\n    if (!password) return '';\n\n    return ValidationUtils.getPasswordStrength(password);\n  }\n\n  isFieldInvalid(fieldName: string): boolean {\n    const field = this.registerForm.get(fieldName);\n    return !!(field && field.invalid && (field.dirty || field.touched));\n  }\n\n  hasPasswordMismatch(): boolean {\n    return this.registerForm.hasError('passwordMismatch') &&\n    (this.registerForm.get('confirmPassword')?.touched ?? false);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".register-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  padding: 20px;\r\n}\r\n\r\n.register-card {\r\n  max-width: 450px;\r\n  width: 100%;\r\n  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n}\r\n\r\n.register-card mat-card-header {\r\n  text-align: center;\r\n  padding: 24px 24px 0;\r\n}\r\n\r\n.register-card mat-card-title {\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  color: #333;\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.register-card mat-card-subtitle {\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.register-card mat-card-content {\r\n  padding: 24px;\r\n}\r\n\r\n.register-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n}\r\n\r\n.full-width {\r\n  width: 100%;\r\n}\r\n\r\n.terms-checkbox {\r\n  margin-top: 8px;\r\n  color: #666;\r\n  font-size: 14px;\r\n}\r\n\r\n.terms-link {\r\n  color: #667eea;\r\n  text-decoration: none;\r\n}\r\n\r\n.terms-link:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.terms-error {\r\n  margin-top: 4px;\r\n  font-size: 12px;\r\n}\r\n\r\n.error-message {\r\n  margin-top: 8px;\r\n  text-align: center;\r\n}\r\n\r\n.register-button {\r\n  margin-top: 16px;\r\n  height: 48px;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 8px;\r\n}\r\n\r\n.register-button mat-spinner {\r\n  margin-right: 8px;\r\n}\r\n\r\n.register-card mat-card-actions {\r\n  display: flex;\r\n  justify-content: center;\r\n  padding: 16px 24px 24px;\r\n  margin: 0;\r\n}\r\n\r\n.register-card mat-card-actions a {\r\n  color: #667eea;\r\n  text-decoration: none;\r\n  font-size: 14px;\r\n}\r\n\r\n.register-card mat-card-actions a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n// Responsive design\r\n@media (max-width: 480px) {\r\n  .register-container {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .register-card {\r\n    max-width: 100%;\r\n  }\r\n  \r\n  .register-card mat-card-content {\r\n    padding: 16px;\r\n  }\r\n  \r\n  .register-card mat-card-actions {\r\n    padding: 12px 16px 16px;\r\n  }\r\n}\r\n\r\n// Material form field customizations\r\n::ng-deep .mat-form-field-appearance-outline .mat-form-field-outline {\r\n  color: #ddd;\r\n}\r\n\r\n::ng-deep .mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick {\r\n  color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-form-field.mat-focused .mat-form-field-label {\r\n  color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-raised-button.mat-primary {\r\n  background-color: #667eea;\r\n}\r\n\r\n::ng-deep .mat-raised-button.mat-primary:hover {\r\n  background-color: #5a6fd8;\r\n}\r\n\r\n::ng-deep .mat-checkbox-checked .mat-checkbox-background {\r\n  background-color: #667eea;\r\n} ",
                    "styleUrl": "./register.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 49
            },
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"register-container\">\n  <mat-card class=\"register-card\">\n    <mat-card-header>\n      <mat-card-title>Создать аккаунт</mat-card-title>\n      <mat-card-subtitle>TaskBoard Pro</mat-card-subtitle>\n    </mat-card-header>\n\n    <mat-card-content>\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" class=\"register-form\">\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Имя пользователя</mat-label>\n          <input\n            matInput\n            formControlName=\"username\"\n            placeholder=\"Введите имя пользователя\"\n            autocomplete=\"username\">\n          <i-lucide class=\"icon-center\" [img]=\"User\" [size]=\"20\"></i-lucide>\n          <mat-error *ngIf=\"isFieldInvalid('username')\">\n            {{ getErrorMessage('username') }}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Email</mat-label>\n          <input\n            matInput\n            type=\"email\"\n            formControlName=\"email\"\n            placeholder=\"Введите ваш email\"\n            autocomplete=\"email\">\n          <i-lucide class=\"icon-center\" [img]=\"Mail\"></i-lucide>\n          <mat-error *ngIf=\"isFieldInvalid('email')\">\n            {{ getErrorMessage('email') }}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Пароль</mat-label>\n          <input\n            matInput\n            [type]=\"hidePassword ? 'password' : 'text'\"\n            formControlName=\"password\"\n            placeholder=\"Создайте пароль\"\n            autocomplete=\"new-password\">\n          <button\n            mat-icon-button\n            matSuffix\n            (click)=\"hidePassword = !hidePassword\"\n            [attr.aria-label]=\"'Hide password'\"\n            [attr.aria-pressed]=\"hidePassword\"\n            type=\"button\">\n            <i-lucide class=\"icon-center\" [img]=\"hidePassword ? EyeOff : Eye\" [size]=\"20\"></i-lucide>\n          </button>\n          <mat-error *ngIf=\"isFieldInvalid('password')\">\n            {{ getErrorMessage('password') }}\n          </mat-error>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" class=\"full-width\">\n          <mat-label>Подтвердите пароль</mat-label>\n          <input\n            matInput\n            [type]=\"hideConfirmPassword ? 'password' : 'text'\"\n            formControlName=\"confirmPassword\"\n            placeholder=\"Повторите пароль\"\n            autocomplete=\"new-password\">\n          <button\n            mat-icon-button\n            matSuffix\n            (click)=\"hideConfirmPassword = !hideConfirmPassword\"\n            [attr.aria-label]=\"'Hide confirm password'\"\n            [attr.aria-pressed]=\"hideConfirmPassword\"\n            type=\"button\">\n            <i-lucide class=\"icon-center\" [img]=\"hideConfirmPassword ? EyeOff : Eye\" [size]=\"20\"></i-lucide>\n          </button>\n          <mat-error *ngIf=\"isFieldInvalid('confirmPassword')\">\n            {{ getErrorMessage('confirmPassword') }}\n          </mat-error>\n          <mat-error *ngIf=\"hasPasswordMismatch()\">\n            Пароли не совпадают\n          </mat-error>\n        </mat-form-field>\n\n        <mat-checkbox formControlName=\"agreeToTerms\" class=\"terms-checkbox\">\n          Я согласен с\n          <a href=\"#\" class=\"terms-link\">условиями использования</a>\n          и\n          <a href=\"#\" class=\"terms-link\">политикой конфиденциальности</a>\n        </mat-checkbox>\n        <mat-error *ngIf=\"registerForm.get('agreeToTerms')?.invalid && registerForm.get('agreeToTerms')?.touched\" class=\"terms-error\">\n          {{ getErrorMessage('agreeToTerms') }}\n        </mat-error>\n\n        <div class=\"error-message\" *ngIf=\"error$ | async as error\">\n          <mat-error>{{ error }}</mat-error>\n        </div>\n\n        <button\n          mat-raised-button\n          color=\"primary\"\n          type=\"submit\"\n          class=\"register-button\"\n          [disabled]=\"registerForm.invalid || (loading$ | async)\">\n          <i-lucide class=\"icon-center\" [img]=\"Loader2\" [size]=\"20\" *ngIf=\"loading$ | async\"></i-lucide>\n          <span *ngIf=\"(loading$ | async) === false\">Создать аккаунт</span>\n        </button>\n      </form>\n    </mat-card-content>\n\n    <mat-card-actions>\n      <a mat-button routerLink=\"/auth/login\">Уже есть аккаунт? Войти</a>\n    </mat-card-actions>\n  </mat-card>\n</div>\n"
        },
        {
            "name": "SecuritySettingsComponent",
            "id": "component-SecuritySettingsComponent-d4dbf75c16a477c35bfe4c20f21ea4e3c3aa5805f3e18e847426782b1e9778b44b072397b52757f25dee55b6fc0d55cce28be202748bea8139cb90cc5abc1ddb",
            "file": "src/app/features/settings/components/security-settings/security-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-security-settings",
            "styleUrls": [],
            "styles": [
                "\n    .security-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"security-settings\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <i-lucide [img]=\"ShieldIcon\" [size]=\"24\"></i-lucide>\n        Настройки безопасности\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Здесь будут настройки пароля, 2FA и безопасности аккаунта</p>\n      <p>Этап 5: Безопасность - в разработке</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ShieldIcon",
                    "defaultValue": "Shield",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { LucideAngularModule, Shield } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-security-settings',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, LucideAngularModule],\r\n  template: `\r\n    <div class=\"security-settings\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            <i-lucide [img]=\"ShieldIcon\" [size]=\"24\"></i-lucide>\r\n            Настройки безопасности\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <p>Здесь будут настройки пароля, 2FA и безопасности аккаунта</p>\r\n          <p>Этап 5: Безопасность - в разработке</p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .security-settings {\r\n      padding: 1rem 0;\r\n    }\r\n\r\n    mat-card {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-header {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-title {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.75rem;\r\n      font-size: 1.25rem;\r\n      color: #2c3e50;\r\n      margin: 0;\r\n\r\n      i-lucide {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-shrink: 0;\r\n      }\r\n    }\r\n\r\n    p {\r\n      color: #6c757d;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class SecuritySettingsComponent {\r\n  // Icons\r\n  readonly ShieldIcon = Shield;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .security-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  \n",
            "extends": []
        },
        {
            "name": "SettingsComponent",
            "id": "component-SettingsComponent-64ec1437d7e492e130ca2b69d70d565255ee7b43b0415d735b1ec141cf01756a6ce713095ad2413704b8497122cef73c0b92f2c328e3d3049e50af076f611fcd",
            "file": "src/app/features/settings/components/settings/settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-settings",
            "styleUrls": [
                "./settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "BellIcon",
                    "defaultValue": "Bell",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "canScrollLeft",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "canScrollRight",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "ChevronLeft",
                    "defaultValue": "ChevronLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "ChevronRight",
                    "defaultValue": "ChevronRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "GridIcon",
                    "defaultValue": "Grid3X3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isScrolling",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "LinkIcon",
                    "defaultValue": "Link",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "navTabsRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<HTMLElement>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navTabs', {static: false}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "PaletteIcon",
                    "defaultValue": "Palette",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "resizeHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "scrollHandler",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "scrollTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "SettingsIcon",
                    "defaultValue": "Settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "settingsTabs",
                    "defaultValue": "[\r\n    { label: 'Профиль', route: 'profile', icon: this.UserIcon, description: 'Личная информация и настройки профиля' },\r\n    { label: 'Внешний вид', route: 'appearance', icon: this.PaletteIcon, description: 'Темы, язык и настройки отображения' },\r\n    { label: 'Уведомления', route: 'notifications', icon: this.BellIcon, description: 'Настройки уведомлений и оповещений' },\r\n    { label: 'Безопасность', route: 'security', icon: this.ShieldIcon, description: 'Пароль, 2FA и безопасность аккаунта' },\r\n    { label: 'Рабочее пространство', route: 'workspace', icon: this.GridIcon, description: 'Настройки интерфейса и рабочего пространства' },\r\n    { label: 'Интеграции', route: 'integrations', icon: this.LinkIcon, description: 'Подключение внешних сервисов и API' },\r\n    { label: 'Дополнительно', route: 'advanced', icon: this.SettingsIcon, description: 'Дополнительные настройки и управление данными' }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SettingsTab[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "ShieldIcon",
                    "defaultValue": "Shield",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "UserIcon",
                    "defaultValue": "User",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "cleanupScrollHandlers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getCurrentTab",
                    "args": [],
                    "optional": false,
                    "returnType": "SettingsTab",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentTabDescription",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentTabIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCurrentTabLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "scrollRight",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupScrollHandlers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "trackByRoute",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tab",
                            "type": "SettingsTab",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tab",
                            "type": "SettingsTab",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateScrollState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, AfterViewInit, OnDestroy, ViewChild, ElementRef, ChangeDetectorRef, inject } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { LayoutComponent } from '@shared/components/layout';\r\nimport {\r\n  LucideAngularModule,\r\n  User,\r\n  Palette,\r\n  Bell,\r\n  Shield,\r\n  Grid3X3,\r\n  Link,\r\n  Settings,\r\n  ChevronLeft,\r\n  ChevronRight\r\n} from 'lucide-angular';\r\n\r\ninterface SettingsTab {\r\n  label: string;\r\n  route: string;\r\n  icon: typeof User; // Using typeof for Lucide icon type\r\n  description: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-settings',\r\n  templateUrl: './settings.component.html',\r\n  styleUrls: ['./settings.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, MatCardModule, LayoutComponent, LucideAngularModule]\r\n})\r\nexport class SettingsComponent implements AfterViewInit, OnDestroy {\r\n  private readonly router = inject(Router);\r\n  private readonly cdr = inject(ChangeDetectorRef);\r\n\r\n  @ViewChild('navTabs', { static: false }) navTabsRef!: ElementRef<HTMLElement>;\r\n\r\n  // Lucide icons для standalone компонентов\r\n  readonly UserIcon = User;\r\n  readonly PaletteIcon = Palette;\r\n  readonly BellIcon = Bell;\r\n  readonly ShieldIcon = Shield;\r\n  readonly GridIcon = Grid3X3;\r\n  readonly LinkIcon = Link;\r\n  readonly SettingsIcon = Settings;\r\n  readonly ChevronLeft = ChevronLeft;\r\n  readonly ChevronRight = ChevronRight;\r\n\r\n  // Scroll state\r\n  canScrollLeft = false;\r\n  canScrollRight = false;\r\n  isScrolling = false;\r\n\r\n  private scrollHandler!: () => void;\r\n  private resizeHandler!: () => void;\r\n  private scrollTimeout?: number;\r\n\r\n  settingsTabs: SettingsTab[] = [\r\n    { label: 'Профиль', route: 'profile', icon: this.UserIcon, description: 'Личная информация и настройки профиля' },\r\n    { label: 'Внешний вид', route: 'appearance', icon: this.PaletteIcon, description: 'Темы, язык и настройки отображения' },\r\n    { label: 'Уведомления', route: 'notifications', icon: this.BellIcon, description: 'Настройки уведомлений и оповещений' },\r\n    { label: 'Безопасность', route: 'security', icon: this.ShieldIcon, description: 'Пароль, 2FA и безопасность аккаунта' },\r\n    { label: 'Рабочее пространство', route: 'workspace', icon: this.GridIcon, description: 'Настройки интерфейса и рабочего пространства' },\r\n    { label: 'Интеграции', route: 'integrations', icon: this.LinkIcon, description: 'Подключение внешних сервисов и API' },\r\n    { label: 'Дополнительно', route: 'advanced', icon: this.SettingsIcon, description: 'Дополнительные настройки и управление данными' }\r\n  ];\r\n\r\n  // Helpers for template\r\n  getCurrentTab(): SettingsTab {\r\n    const currentRoute = this.router.url.split('/').pop() ?? 'profile';\r\n    return this.settingsTabs.find(tab => tab.route === currentRoute) ?? this.settingsTabs[0];\r\n  }\r\n  getCurrentTabIcon(): typeof User { return this.getCurrentTab().icon; }\r\n  getCurrentTabLabel(): string { return this.getCurrentTab().label; }\r\n  getCurrentTabDescription(): string { return this.getCurrentTab().description; }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.setupScrollHandlers();\r\n    this.updateScrollState();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.cleanupScrollHandlers();\r\n  }\r\n\r\n  private setupScrollHandlers(): void {\r\n    this.scrollHandler = () => {\r\n      this.updateScrollState();\r\n      this.isScrolling = true;\r\n\r\n      if (this.scrollTimeout) {\r\n        clearTimeout(this.scrollTimeout);\r\n      }\r\n\r\n      this.scrollTimeout = window.setTimeout(() => {\r\n        this.isScrolling = false;\r\n        this.cdr.detectChanges();\r\n      }, 150);\r\n    };\r\n\r\n    this.resizeHandler = () => {\r\n      this.updateScrollState();\r\n    };\r\n\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (navTabs) {\r\n      navTabs.addEventListener('scroll', this.scrollHandler);\r\n      window.addEventListener('resize', this.resizeHandler);\r\n    }\r\n  }\r\n\r\n  private cleanupScrollHandlers(): void {\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (navTabs) {\r\n      navTabs.removeEventListener('scroll', this.scrollHandler);\r\n      window.removeEventListener('resize', this.resizeHandler);\r\n    }\r\n\r\n    if (this.scrollTimeout) {\r\n      clearTimeout(this.scrollTimeout);\r\n    }\r\n  }\r\n\r\n  private updateScrollState(): void {\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (!navTabs) return;\r\n\r\n    this.canScrollLeft = navTabs.scrollLeft > 0;\r\n    this.canScrollRight = navTabs.scrollLeft < (navTabs.scrollWidth - navTabs.clientWidth);\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  scrollLeft(): void {\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (navTabs) {\r\n      navTabs.scrollBy({ left: -200, behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  scrollRight(): void {\r\n    const navTabs = this.navTabsRef?.nativeElement;\r\n    if (navTabs) {\r\n      navTabs.scrollBy({ left: 200, behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n  trackByRoute(index: number, tab: SettingsTab): string {\r\n    return tab.route;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".settings-container {\r\n  min-height: 100vh;\r\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  padding: 2rem;\r\n}\r\n\r\n.settings-header {\r\n  max-width: 1200px;\r\n  margin: 0 auto 2rem;\r\n  text-align: center;\r\n}\r\n\r\n.settings-header h1 {\r\n  font-size: 2.5rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.settings-header p {\r\n  color: #6c757d;\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.settings-card {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  border-radius: 12px;\r\n  overflow: hidden;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.settings-navigation {\r\n  background: #f8f9fa;\r\n  border-bottom: 1px solid #e9ecef;\r\n  position: relative;\r\n  padding: 0;\r\n}\r\n\r\n// Мобильный select\r\n.mobile-tabs-select {\r\n  display: none;\r\n  width: 100%;\r\n  padding: 1rem;\r\n  border: 1px solid #e9ecef;\r\n  border-radius: 8px;\r\n  background: white;\r\n  font-size: 1rem;\r\n  color: #2c3e50;\r\n  margin: 1rem;\r\n\r\n  &:focus {\r\n    outline: 2px solid #3498db;\r\n    outline-offset: 2px;\r\n  }\r\n}\r\n\r\n// Контейнер для десктопной навигации\r\n.nav-tabs {\r\n  display: flex;\r\n  overflow-x: auto;\r\n  scrollbar-width: none;\r\n  -ms-overflow-style: none;\r\n  scroll-behavior: smooth;\r\n  position: relative;\r\n\r\n  &::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n}\r\n\r\n// Вкладки\r\n.nav-tab {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n  padding: 1.25rem 1.5rem;\r\n  text-decoration: none;\r\n  color: #6c757d;\r\n  font-weight: 500;\r\n  border-bottom: 3px solid transparent;\r\n  transition: all 0.3s ease;\r\n  white-space: nowrap;\r\n  flex-shrink: 0;\r\n  min-width: 160px;\r\n  position: relative;\r\n\r\n  &:hover {\r\n    color: #3498db;\r\n    background: rgba(52, 152, 219, 0.1);\r\n  }\r\n\r\n  &.active {\r\n    color: #3498db;\r\n    border-bottom-color: #3498db;\r\n    background: rgba(52, 152, 219, 0.1);\r\n  }\r\n\r\n  i-lucide {\r\n    width: 20px;\r\n    height: 20px;\r\n    flex-shrink: 0;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  span {\r\n    flex-shrink: 0;\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n}\r\n\r\n// Контейнер для стрелок\r\n.scroll-indicators {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  pointer-events: none;\r\n  z-index: 10;\r\n}\r\n\r\n// Стрелки прокрутки\r\n.scroll-btn {\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  width: 40px;\r\n  height: 40px;\r\n  background: rgba(52, 152, 219, 0.95);\r\n  border: none;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  cursor: pointer;\r\n  transition: all 0.3s ease;\r\n  pointer-events: auto;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  z-index: 20;\r\n\r\n  &:hover {\r\n    background: rgba(52, 152, 219, 1);\r\n    transform: translateY(-50%) scale(1.1);\r\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\r\n  }\r\n\r\n  &:focus {\r\n    outline: 2px solid rgba(52, 152, 219, 0.5);\r\n    outline-offset: 2px;\r\n  }\r\n\r\n  &:active {\r\n    transform: translateY(-50%) scale(0.95);\r\n  }\r\n\r\n  i-lucide {\r\n    width: 18px;\r\n    height: 18px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n}\r\n\r\n.scroll-left {\r\n  left: 8px;\r\n}\r\n\r\n.scroll-right {\r\n  right: 8px;\r\n}\r\n\r\n// Градиенты для индикации прокрутки\r\n.nav-tabs::before,\r\n.nav-tabs::after {\r\n  content: '';\r\n  position: absolute;\r\n  top: 0;\r\n  bottom: 0;\r\n  width: 60px;\r\n  pointer-events: none;\r\n  z-index: 5;\r\n  transition: opacity 0.3s ease;\r\n}\r\n\r\n.nav-tabs::before {\r\n  left: 0;\r\n  background: linear-gradient(to right, #f8f9fa 0%, transparent 100%);\r\n  opacity: 0;\r\n}\r\n\r\n.nav-tabs::after {\r\n  right: 0;\r\n  background: linear-gradient(to left, #f8f9fa 0%, transparent 100%);\r\n  opacity: 0;\r\n}\r\n\r\n.nav-tabs.can-scroll-left::before {\r\n  opacity: 1;\r\n}\r\n\r\n.nav-tabs.can-scroll-right::after {\r\n  opacity: 1;\r\n}\r\n\r\n.settings-content {\r\n  padding: 2rem;\r\n}\r\n\r\n.tab-content {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.tab-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 1rem;\r\n  margin-bottom: 2rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.tab-icon {\r\n  width: 48px;\r\n  height: 48px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 12px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: white;\r\n  flex-shrink: 0;\r\n\r\n  i-lucide {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n}\r\n\r\n.tab-info h2 {\r\n  font-size: 1.5rem;\r\n  color: #2c3e50;\r\n  margin: 0 0 0.5rem 0;\r\n}\r\n\r\n.tab-info p {\r\n  color: #6c757d;\r\n  margin: 0;\r\n}\r\n\r\n.tab-body {\r\n  min-height: 400px;\r\n}\r\n\r\n// Адаптивность для планшетов\r\n@media (max-width: 1024px) {\r\n  .nav-tab {\r\n    padding: 1rem 1.25rem;\r\n    font-size: 0.9rem;\r\n    min-width: 140px;\r\n    gap: 0.5rem;\r\n  }\r\n\r\n  .scroll-btn {\r\n    width: 36px;\r\n    height: 36px;\r\n\r\n    i-lucide {\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n  }\r\n}\r\n\r\n// Адаптивность для мобильных\r\n@media (max-width: 768px) {\r\n  .settings-container {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .settings-header h1 {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .settings-header p {\r\n    font-size: 1rem;\r\n  }\r\n\r\n  .nav-tab {\r\n    padding: 0.875rem 1rem;\r\n    font-size: 0.85rem;\r\n    min-width: 120px;\r\n    gap: 0.375rem;\r\n\r\n    span {\r\n      display: none; // Скрываем текст, оставляем только иконки\r\n    }\r\n\r\n    i-lucide {\r\n      width: 18px;\r\n      height: 18px;\r\n    }\r\n  }\r\n\r\n  .scroll-btn {\r\n    width: 32px;\r\n    height: 32px;\r\n\r\n    i-lucide {\r\n      width: 14px;\r\n      height: 14px;\r\n    }\r\n  }\r\n\r\n  .tab-content {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .tab-header {\r\n    flex-direction: column;\r\n    text-align: center;\r\n    gap: 0.75rem;\r\n  }\r\n\r\n  .tab-icon {\r\n    width: 40px;\r\n    height: 40px;\r\n  }\r\n\r\n  .tab-info h2 {\r\n    font-size: 1.25rem;\r\n  }\r\n}\r\n\r\n// Очень маленькие экраны - показываем select\r\n@media (max-width: 480px) {\r\n  .settings-navigation {\r\n    padding: 0;\r\n  }\r\n\r\n  .nav-tabs {\r\n    display: none;\r\n  }\r\n\r\n  .scroll-indicators {\r\n    display: none;\r\n  }\r\n\r\n  .mobile-tabs-select {\r\n    display: block;\r\n  }\r\n\r\n  .settings-container {\r\n    padding: 0.5rem;\r\n  }\r\n\r\n  .settings-card {\r\n    border-radius: 8px;\r\n  }\r\n\r\n  .tab-content {\r\n    padding: 0.75rem;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./settings.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout [showHeader]=\"true\" [showFooter]=\"true\">\r\n  <div class=\"settings-container\">\r\n    <div class=\"settings-header\">\r\n      <h1>Настройки</h1>\r\n      <p>Управление настройками аккаунта и приложения</p>\r\n    </div>\r\n\r\n    <mat-card class=\"settings-card\">\r\n      <div class=\"settings-container\">\r\n        <!-- Навигация по вкладкам -->\r\n        <div class=\"settings-navigation\">\r\n          <div class=\"nav-container\">\r\n            <div class=\"nav-tabs\" #navTabs>\r\n              <a\r\n                *ngFor=\"let tab of settingsTabs; trackBy: trackByRoute\"\r\n                [routerLink]=\"['/settings', tab.route]\"\r\n                routerLinkActive=\"active\"\r\n                class=\"nav-tab\">\r\n                <i-lucide [img]=\"tab.icon\" [size]=\"20\"></i-lucide>\r\n                <span>{{ tab.label }}</span>\r\n              </a>\r\n            </div>\r\n\r\n            <!-- Кнопки прокрутки -->\r\n            <div class=\"scroll-controls\" *ngIf=\"canScrollLeft || canScrollRight\">\r\n              <button\r\n                class=\"scroll-btn scroll-left\"\r\n                *ngIf=\"canScrollLeft\"\r\n                (click)=\"scrollLeft()\"\r\n                type=\"button\"\r\n                aria-label=\"Прокрутить влево\">\r\n                <i-lucide [img]=\"ChevronLeft\" [size]=\"18\"></i-lucide>\r\n              </button>\r\n              <button\r\n                class=\"scroll-btn scroll-right\"\r\n                *ngIf=\"canScrollRight\"\r\n                (click)=\"scrollRight()\"\r\n                type=\"button\"\r\n                aria-label=\"Прокрутить вправо\">\r\n                <i-lucide [img]=\"ChevronRight\" [size]=\"18\"></i-lucide>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Контент вкладок -->\r\n        <div class=\"settings-content\">\r\n          <div class=\"tab-content\">\r\n            <div class=\"tab-header\">\r\n              <div class=\"tab-icon\">\r\n                <i-lucide [img]=\"getCurrentTabIcon()\" [size]=\"24\"></i-lucide>\r\n              </div>\r\n              <div class=\"tab-info\">\r\n                <h2>{{ getCurrentTabLabel() }}</h2>\r\n                <p>{{ getCurrentTabDescription() }}</p>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Роутер для отображения содержимого вкладок -->\r\n            <router-outlet></router-outlet>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n  </div>\r\n</app-layout>\r\n"
        },
        {
            "name": "TasksComponent",
            "id": "component-TasksComponent-b30a813a211323d5d5e819884b72e7f14e282c9e300037d1457e98cdef1eeda30422cdd45423cc24105dea6168b7a102323664391cbe2830272dfb71d7bc5214",
            "file": "src/app/features/tasks/components/tasks/tasks.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tasks",
            "styleUrls": [
                "./tasks.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tasks.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "Calendar",
                    "defaultValue": "Calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "CheckSquare",
                    "defaultValue": "CheckSquare",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isMobileMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "Move",
                    "defaultValue": "Move",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Plus",
                    "defaultValue": "Plus",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject, OnDestroy, HostListener } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '@services';\r\nimport { User } from '@models';\r\nimport { Subscription } from 'rxjs';\r\nimport { LayoutComponent } from '../../../../shared/components/layout';\r\nimport { LucideAngularModule, CheckSquare, Plus, Move, Calendar } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-tasks',\r\n  templateUrl: './tasks.component.html',\r\n  styleUrls: ['./tasks.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, LayoutComponent, LucideAngularModule]\r\n})\r\nexport class TasksComponent implements OnInit, OnDestroy {\r\n  private readonly authService = inject(AuthService);\r\n  private readonly router = inject(Router);\r\n\r\n  isAuthenticated = false;\r\n  currentUser: User | null = null;\r\n  private authSubscription?: Subscription;\r\n  private userSubscription?: Subscription;\r\n\r\n\r\n\r\n  // Mobile menu state\r\n  isMobileMenuOpen = false;\r\n\r\n  // Lucide icons\r\n  readonly CheckSquare = CheckSquare;\r\n  readonly Plus = Plus;\r\n  readonly Move = Move;\r\n  readonly Calendar = Calendar;\r\n\r\n  ngOnInit(): void {\r\n    this.authSubscription = this.authService.isAuthenticated$.subscribe(isAuth => {\r\n      this.isAuthenticated = isAuth;\r\n    });\r\n\r\n    this.userSubscription = this.authService.currentUser$.subscribe(user => {\r\n      this.currentUser = user;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.authSubscription?.unsubscribe();\r\n    this.userSubscription?.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  changePassword(): void {\r\n    // TODO: Implement change password functionality\r\n  }\r\n\r\n  toggleMobileMenu(): void {\r\n    this.isMobileMenuOpen = !this.isMobileMenuOpen;\r\n  }\r\n\r\n  closeMobileMenu(): void {\r\n    this.isMobileMenuOpen = false;\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n    if (!target.closest('.nav') && this.isMobileMenuOpen) {\r\n      this.isMobileMenuOpen = false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".tasks-container {\r\n  padding: 24px;\r\n}\r\n\r\n// Header styles\r\n.dashboard-header {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: white;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.header-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 1rem 2rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.logo h1 {\r\n  font-size: 1.5rem;\r\n  color: #2c3e50;\r\n  margin: 0;\r\n  font-weight: 600;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  position: relative;\r\n}\r\n\r\n.nav-desktop {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.nav-link {\r\n  text-decoration: none;\r\n  color: #6c757d;\r\n  font-weight: 500;\r\n  transition: color 0.3s ease;\r\n  padding: 0.5rem 0;\r\n  position: relative;\r\n}\r\n\r\n.nav-link:hover,\r\n.nav-link.active {\r\n  color: #3498db;\r\n}\r\n\r\n.nav-link.active::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -1rem;\r\n  left: 0;\r\n  right: 0;\r\n  height: 2px;\r\n  background: #3498db;\r\n}\r\n\r\n// Mobile menu toggle\r\n.mobile-menu-toggle {\r\n  display: none;\r\n  background: none;\r\n  border: none;\r\n  color: #6c757d;\r\n  cursor: pointer;\r\n  padding: 0.5rem;\r\n  border-radius: 6px;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.mobile-menu-toggle:hover {\r\n  background: rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n// Mobile menu\r\n.mobile-menu {\r\n  display: none;\r\n  position: absolute;\r\n  top: 100%;\r\n  right: 0;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  min-width: 200px;\r\n  z-index: 1000;\r\n  margin-top: 8px;\r\n  border: 1px solid rgba(0, 0, 0, 0.08);\r\n  overflow: hidden;\r\n  opacity: 0;\r\n  transform: translateY(-10px);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.mobile-menu.open {\r\n  opacity: 1;\r\n  transform: translateY(0);\r\n}\r\n\r\n.mobile-nav-link {\r\n  display: block;\r\n  padding: 1rem 1.5rem;\r\n  color: #6c757d;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n  transition: background 0.3s ease;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.mobile-nav-link:hover,\r\n.mobile-nav-link.active {\r\n  background: #f8f9fa;\r\n  color: #3498db;\r\n}\r\n\r\n.mobile-nav-link:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n// Main content\r\n.dashboard-main {\r\n  margin-top: 80px;\r\n  min-height: calc(100vh - 80px - 300px);\r\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  padding: 2rem;\r\n}\r\n\r\n.welcome-section {\r\n  max-width: 1200px;\r\n  margin: 0 auto 3rem;\r\n  text-align: center;\r\n}\r\n\r\n.welcome-title {\r\n  font-size: 3rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.welcome-subtitle {\r\n  font-size: 1.2rem;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n// Placeholder content\r\n.placeholder-content {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.placeholder-card {\r\n  background: white;\r\n  border-radius: 16px;\r\n  padding: 3rem;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n.placeholder-icon {\r\n  width: 120px;\r\n  height: 120px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto 2rem;\r\n  color: white;\r\n  position: relative;\r\n}\r\n\r\n.placeholder-icon i-lucide {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 64px;\r\n  height: 64px;\r\n}\r\n\r\n.placeholder-card h2 {\r\n  font-size: 2rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.placeholder-card p {\r\n  font-size: 1.1rem;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n  line-height: 1.6;\r\n}\r\n\r\n.placeholder-features {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 1.5rem;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.feature-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n  padding: 1rem;\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.feature-item:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.feature-item i-lucide {\r\n  color: #3498db;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n\r\n.feature-item span {\r\n  font-weight: 500;\r\n  color: #2c3e50;\r\n}\r\n\r\n// Footer styles\r\n.footer {\r\n  background: #2c3e50;\r\n  color: white;\r\n  padding: 3rem 0 1rem;\r\n  margin-top: auto;\r\n}\r\n\r\n.footer-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 2rem;\r\n}\r\n\r\n.footer-section h4 {\r\n  margin-bottom: 1rem;\r\n  color: #3498db;\r\n}\r\n\r\n.footer-section p {\r\n  color: rgba(255, 255, 255, 0.8);\r\n  line-height: 1.6;\r\n}\r\n\r\n.footer-section a {\r\n  display: block;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  text-decoration: none;\r\n  margin-bottom: 0.5rem;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.footer-section a:hover {\r\n  color: white;\r\n}\r\n\r\n.footer-bottom {\r\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n  padding-top: 1rem;\r\n  text-align: center;\r\n  opacity: 0.8;\r\n  margin-top: 2rem;\r\n}\r\n\r\n// Animations\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(30px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n// Responsive\r\n@media (max-width: 768px) {\r\n  .header-content {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .nav-desktop {\r\n    display: none;\r\n  }\r\n\r\n  .mobile-menu-toggle {\r\n    display: block;\r\n  }\r\n\r\n  .mobile-menu {\r\n    display: block;\r\n  }\r\n\r\n  .dashboard-main {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2.5rem;\r\n  }\r\n\r\n  .placeholder-card {\r\n    padding: 2rem;\r\n  }\r\n\r\n  .placeholder-features {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .footer-content {\r\n    grid-template-columns: 1fr;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .header-content {\r\n    padding: 0.75rem;\r\n  }\r\n\r\n  .logo h1 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .placeholder-card {\r\n    padding: 1.5rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tasks.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout [showHeader]=\"true\" [showFooter]=\"true\">\r\n\r\n<!-- Main Content -->\r\n<main class=\"dashboard-main\">\r\n  <div class=\"welcome-section\">\r\n    <h1 class=\"welcome-title\">Задачи</h1>\r\n    <p class=\"welcome-subtitle\">Реализуем в следующей версии</p>\r\n  </div>\r\n\r\n  <div class=\"placeholder-content\">\r\n    <div class=\"placeholder-card\">\r\n      <div class=\"placeholder-icon\">\r\n        <i-lucide [img]=\"CheckSquare\" [size]=\"64\"></i-lucide>\r\n      </div>\r\n      <h2>Kanban доска</h2>\r\n      <p>Здесь будет функционал для управления задачами с помощью Kanban доски</p>\r\n      <div class=\"placeholder-features\">\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"Plus\" [size]=\"20\"></i-lucide>\r\n          <span>Создание задач</span>\r\n        </div>\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"Move\" [size]=\"20\"></i-lucide>\r\n          <span>Drag & Drop</span>\r\n        </div>\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"Calendar\" [size]=\"20\"></i-lucide>\r\n          <span>Дедлайны</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</main>\r\n\r\n</app-layout>\r\n"
        },
        {
            "name": "TimeTrackingComponent",
            "id": "component-TimeTrackingComponent-f5508fc3a586f3356734105a01702e511f2bb2fd2fee9df9c59f9ebc68e70b2019685259a78338ea17dfff0151a1c96a5f985fffee1cbdc0ee805607522b9a5b",
            "file": "src/app/features/time-tracking/components/time-tracking/time-tracking.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-time-tracking",
            "styleUrls": [
                "./time-tracking.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./time-tracking.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "authSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "Calendar",
                    "defaultValue": "Calendar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "ChartColumn",
                    "defaultValue": "ChartColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Clock",
                    "defaultValue": "Clock",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "currentUser",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isMobileMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "Play",
                    "defaultValue": "Play",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "userSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "LayoutComponent",
                    "type": "component"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, inject, OnDestroy, HostListener } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '@services';\r\nimport { User } from '@models';\r\nimport { Subscription } from 'rxjs';\r\nimport { LayoutComponent } from '../../../../shared/components/layout';\r\nimport { LucideAngularModule, Clock, Play, ChartColumn, Calendar } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-time-tracking',\r\n  templateUrl: './time-tracking.component.html',\r\n  styleUrls: ['./time-tracking.component.scss'],\r\n  standalone: true,\r\n  imports: [CommonModule, LayoutComponent, LucideAngularModule]\r\n})\r\nexport class TimeTrackingComponent implements OnInit, OnDestroy {\r\n  private readonly authService = inject(AuthService);\r\n  private readonly router = inject(Router);\r\n\r\n  isAuthenticated = false;\r\n  currentUser: User | null = null;\r\n  private authSubscription?: Subscription;\r\n  private userSubscription?: Subscription;\r\n\r\n\r\n\r\n  // Mobile menu state\r\n  isMobileMenuOpen = false;\r\n\r\n  // Lucide icons\r\n  readonly Clock = Clock;\r\n  readonly Play = Play;\r\n  readonly ChartColumn = ChartColumn;\r\n  readonly Calendar = Calendar;\r\n\r\n  ngOnInit(): void {\r\n    this.authSubscription = this.authService.isAuthenticated$.subscribe(isAuth => {\r\n      this.isAuthenticated = isAuth;\r\n    });\r\n\r\n    this.userSubscription = this.authService.currentUser$.subscribe(user => {\r\n      this.currentUser = user;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.authSubscription?.unsubscribe();\r\n    this.userSubscription?.unsubscribe();\r\n  }\r\n\r\n  logout(): void {\r\n    this.authService.logout();\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  changePassword(): void {\r\n    // TODO: Implement change password functionality\r\n  }\r\n\r\n  toggleMobileMenu(): void {\r\n    this.isMobileMenuOpen = !this.isMobileMenuOpen;\r\n  }\r\n\r\n  closeMobileMenu(): void {\r\n    this.isMobileMenuOpen = false;\r\n  }\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n    if (!target.closest('.nav') && this.isMobileMenuOpen) {\r\n      this.isMobileMenuOpen = false;\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".time-tracking-container {\r\n  padding: 24px;\r\n}\r\n\r\n// Header styles\r\n.dashboard-header {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  background: white;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n  z-index: 1000;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.08);\r\n}\r\n\r\n.header-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 1rem 2rem;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n}\r\n\r\n.logo h1 {\r\n  font-size: 1.5rem;\r\n  color: #2c3e50;\r\n  margin: 0;\r\n  font-weight: 600;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  position: relative;\r\n}\r\n\r\n.nav-desktop {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n}\r\n\r\n.nav-link {\r\n  text-decoration: none;\r\n  color: #6c757d;\r\n  font-weight: 500;\r\n  transition: color 0.3s ease;\r\n  padding: 0.5rem 0;\r\n  position: relative;\r\n}\r\n\r\n.nav-link:hover,\r\n.nav-link.active {\r\n  color: #3498db;\r\n}\r\n\r\n.nav-link.active::after {\r\n  content: '';\r\n  position: absolute;\r\n  bottom: -1rem;\r\n  left: 0;\r\n  right: 0;\r\n  height: 2px;\r\n  background: #3498db;\r\n}\r\n\r\n// Mobile menu toggle\r\n.mobile-menu-toggle {\r\n  display: none;\r\n  background: none;\r\n  border: none;\r\n  color: #6c757d;\r\n  cursor: pointer;\r\n  padding: 0.5rem;\r\n  border-radius: 6px;\r\n  transition: background 0.3s ease;\r\n}\r\n\r\n.mobile-menu-toggle:hover {\r\n  background: rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n// Mobile menu\r\n.mobile-menu {\r\n  display: none;\r\n  position: absolute;\r\n  top: 100%;\r\n  right: 0;\r\n  background: white;\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  min-width: 200px;\r\n  z-index: 1000;\r\n  margin-top: 8px;\r\n  border: 1px solid rgba(0, 0, 0, 0.08);\r\n  overflow: hidden;\r\n  opacity: 0;\r\n  transform: translateY(-10px);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.mobile-menu.open {\r\n  opacity: 1;\r\n  transform: translateY(0);\r\n}\r\n\r\n.mobile-nav-link {\r\n  display: block;\r\n  padding: 1rem 1.5rem;\r\n  color: #6c757d;\r\n  text-decoration: none;\r\n  font-weight: 500;\r\n  transition: background 0.3s ease;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.mobile-nav-link:hover,\r\n.mobile-nav-link.active {\r\n  background: #f8f9fa;\r\n  color: #3498db;\r\n}\r\n\r\n.mobile-nav-link:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n// Main content\r\n.dashboard-main {\r\n  margin-top: 80px;\r\n  min-height: calc(100vh - 80px - 300px);\r\n  background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);\r\n  padding: 2rem;\r\n}\r\n\r\n.welcome-section {\r\n  max-width: 1200px;\r\n  margin: 0 auto 3rem;\r\n  text-align: center;\r\n}\r\n\r\n.welcome-title {\r\n  font-size: 3rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.welcome-subtitle {\r\n  font-size: 1.2rem;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n}\r\n\r\n// Placeholder content\r\n.placeholder-content {\r\n  max-width: 800px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.placeholder-card {\r\n  background: white;\r\n  border-radius: 16px;\r\n  padding: 3rem;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  text-align: center;\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n.placeholder-icon {\r\n  width: 120px;\r\n  height: 120px;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto 2rem;\r\n  color: white;\r\n  position: relative;\r\n}\r\n\r\n.placeholder-icon i-lucide {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 64px;\r\n  height: 64px;\r\n}\r\n\r\n.placeholder-card h2 {\r\n  font-size: 2rem;\r\n  color: #2c3e50;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.placeholder-card p {\r\n  font-size: 1.1rem;\r\n  color: #6c757d;\r\n  margin-bottom: 2rem;\r\n  line-height: 1.6;\r\n}\r\n\r\n.placeholder-features {\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\r\n  gap: 1.5rem;\r\n  margin-top: 2rem;\r\n}\r\n\r\n.feature-item {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n  padding: 1rem;\r\n  background: #f8f9fa;\r\n  border-radius: 8px;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.feature-item:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.feature-item i-lucide {\r\n  color: #3498db;\r\n  width: 20px;\r\n  height: 20px;\r\n}\r\n\r\n.feature-item span {\r\n  font-weight: 500;\r\n  color: #2c3e50;\r\n}\r\n\r\n// Footer styles\r\n.footer {\r\n  background: #2c3e50;\r\n  color: white;\r\n  padding: 3rem 0 1rem;\r\n  margin-top: auto;\r\n}\r\n\r\n.footer-content {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 0 2rem;\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\r\n  gap: 2rem;\r\n}\r\n\r\n.footer-section h4 {\r\n  margin-bottom: 1rem;\r\n  color: #3498db;\r\n}\r\n\r\n.footer-section p {\r\n  color: rgba(255, 255, 255, 0.8);\r\n  line-height: 1.6;\r\n}\r\n\r\n.footer-section a {\r\n  display: block;\r\n  color: rgba(255, 255, 255, 0.8);\r\n  text-decoration: none;\r\n  margin-bottom: 0.5rem;\r\n  transition: color 0.3s ease;\r\n}\r\n\r\n.footer-section a:hover {\r\n  color: white;\r\n}\r\n\r\n.footer-bottom {\r\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n  padding-top: 1rem;\r\n  text-align: center;\r\n  opacity: 0.8;\r\n  margin-top: 2rem;\r\n}\r\n\r\n// Animations\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(30px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n// Responsive\r\n@media (max-width: 768px) {\r\n  .header-content {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .nav-desktop {\r\n    display: none;\r\n  }\r\n\r\n  .mobile-menu-toggle {\r\n    display: block;\r\n  }\r\n\r\n  .mobile-menu {\r\n    display: block;\r\n  }\r\n\r\n  .dashboard-main {\r\n    padding: 1rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2.5rem;\r\n  }\r\n\r\n  .placeholder-card {\r\n    padding: 2rem;\r\n  }\r\n\r\n  .placeholder-features {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .footer-content {\r\n    grid-template-columns: 1fr;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .header-content {\r\n    padding: 0.75rem;\r\n  }\r\n\r\n  .logo h1 {\r\n    font-size: 1.25rem;\r\n  }\r\n\r\n  .welcome-title {\r\n    font-size: 2rem;\r\n  }\r\n\r\n  .placeholder-card {\r\n    padding: 1.5rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./time-tracking.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<app-layout [showHeader]=\"true\" [showFooter]=\"true\">\r\n\r\n<!-- Main Content -->\r\n<main class=\"dashboard-main\">\r\n  <div class=\"welcome-section\">\r\n    <h1 class=\"welcome-title\">Отслеживание времени</h1>\r\n    <p class=\"welcome-subtitle\">Реализуем в следующей версии</p>\r\n  </div>\r\n\r\n  <div class=\"placeholder-content\">\r\n    <div class=\"placeholder-card\">\r\n      <div class=\"placeholder-icon\">\r\n        <i-lucide [img]=\"Clock\" [size]=\"64\"></i-lucide>\r\n      </div>\r\n      <h2>Таймер и отчеты</h2>\r\n      <p>Здесь будет функционал для отслеживания времени работы над задачами</p>\r\n      <div class=\"placeholder-features\">\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"Play\" [size]=\"20\"></i-lucide>\r\n          <span>Старт/Стоп таймер</span>\r\n        </div>\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"ChartColumn\" [size]=\"20\"></i-lucide>\r\n          <span>Отчеты времени</span>\r\n        </div>\r\n        <div class=\"feature-item\">\r\n          <i-lucide [img]=\"Calendar\" [size]=\"20\"></i-lucide>\r\n          <span>Календарь</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</main>\r\n\r\n</app-layout>\r\n"
        },
        {
            "name": "UserMenuComponent",
            "id": "component-UserMenuComponent-d895421fdc104d510373585ec10bbd114b40828e73518f48d7e42adee0a9b52ed9b9ada663c8db4a3d4043a3c8a2ff97c3f72f5bdc7e4102f04f3aab55c8cf81",
            "file": "src/app/shared/components/user-menu/user-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-menu",
            "styleUrls": [],
            "styles": [
                "\n    .user-menu {\n      position: relative;\n      display: inline-block;\n    }\n\n    .user-button {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      padding: 8px 12px;\n      background: none;\n      border: 1px solid #e2e8f0;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      font-size: 14px;\n      color: #374151;\n    }\n\n    .user-button:hover {\n      background-color: #f9fafb;\n      border-color: #d1d5db;\n    }\n\n    .user-avatar {\n      width: 32px;\n      height: 32px;\n      border-radius: 50%;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: white;\n      font-weight: 600;\n      font-size: 14px;\n    }\n\n    .user-name {\n      font-weight: 500;\n      max-width: 120px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    .menu-arrow {\n      transition: transform 0.2s ease;\n      color: #6b7280;\n    }\n\n    .menu-arrow.rotated {\n      transform: rotate(180deg);\n    }\n\n    .dropdown-menu {\n      position: absolute;\n      top: 100%;\n      right: 0;\n      margin-top: 4px;\n      background: white;\n      border: 1px solid #e2e8f0;\n      border-radius: 8px;\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n      min-width: 200px;\n      z-index: 1000;\n      overflow: hidden;\n    }\n\n    .menu-item {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      padding: 12px 16px;\n      background: none;\n      border: none;\n      width: 100%;\n      text-align: left;\n      cursor: pointer;\n      transition: background-color 0.2s ease;\n      color: #374151;\n      text-decoration: none;\n      font-size: 14px;\n    }\n\n    .menu-item:hover {\n      background-color: #f9fafb;\n    }\n\n    .menu-item:focus {\n      outline: none;\n      background-color: #f3f4f6;\n    }\n\n    .menu-item.logout {\n      color: #dc2626;\n    }\n\n    .menu-item.logout:hover {\n      background-color: #fef2f2;\n    }\n\n    .menu-icon {\n      color: #6b7280;\n      flex-shrink: 0;\n    }\n\n    .menu-text {\n      font-weight: 500;\n    }\n\n    .menu-divider {\n      height: 1px;\n      background-color: #e5e7eb;\n      margin: 4px 0;\n    }\n\n    /* Анимация появления */\n    .dropdown-menu {\n      animation: slideDown 0.2s ease-out;\n    }\n\n    @keyframes slideDown {\n      from {\n        opacity: 0;\n        transform: translateY(-8px);\n      }\n      to {\n        opacity: 1;\n        transform: translateY(0);\n      }\n    }\n\n    /* Адаптивность */\n    @media (max-width: 768px) {\n      .user-name {\n        display: none;\n      }\n\n      .dropdown-menu {\n        right: -8px;\n        min-width: 180px;\n      }\n    }\n  "
            ],
            "template": "<div class=\"user-menu\" [class.open]=\"isOpen\">\n  <button class=\"user-button\" (click)=\"toggleMenu()\" type=\"button\">\n    <div class=\"user-avatar\">\n      {{ user?.username?.charAt(0)?.toUpperCase() || 'U' }}\n    </div>\n    <span class=\"user-name\">{{ user?.username || 'Пользователь' }}</span>\n    <i-lucide [img]=\"ChevronDown\" class=\"menu-arrow\" [class.rotated]=\"isOpen\" [size]=\"16\"></i-lucide>\n  </button>\n\n  <div class=\"dropdown-menu\" *ngIf=\"isOpen\">\n    <a class=\"menu-item\" routerLink=\"/profile\" (click)=\"closeMenu()\" tabindex=\"0\" (keydown.enter)=\"closeMenu()\">\n      <i-lucide [img]=\"UserIcon\" class=\"menu-icon\" [size]=\"20\"></i-lucide>\n      <span class=\"menu-text\">Мой профиль</span>\n    </a>\n    <a class=\"menu-item\" routerLink=\"/settings\" (click)=\"closeMenu()\" tabindex=\"0\" (keydown.enter)=\"closeMenu()\">\n      <i-lucide [img]=\"Settings\" class=\"menu-icon\" [size]=\"20\"></i-lucide>\n      <span class=\"menu-text\">Настройки</span>\n    </a>\n    <button class=\"menu-item\" (click)=\"changePassword()\" (keydown.enter)=\"changePassword()\" tabindex=\"0\" type=\"button\">\n      <i-lucide [img]=\"KeyRound\" class=\"menu-icon\" [size]=\"20\"></i-lucide>\n      <span class=\"menu-text\">Сменить пароль</span>\n    </button>\n    <div class=\"menu-divider\"></div>\n    <button class=\"menu-item logout\" (click)=\"logout()\" (keydown.enter)=\"logout()\" tabindex=\"0\" type=\"button\">\n      <i-lucide [img]=\"LogOut\" class=\"menu-icon\" [size]=\"20\"></i-lucide>\n      <span class=\"menu-text\">Выйти</span>\n    </button>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 196,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "changePasswordClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 198,
                    "type": "EventEmitter"
                },
                {
                    "name": "logoutClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 197,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "ChevronDown",
                    "defaultValue": "ChevronDown",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 205,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 207
                },
                {
                    "name": "KeyRound",
                    "defaultValue": "KeyRound",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 203,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "LogOut",
                    "defaultValue": "LogOut",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 204,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Settings",
                    "defaultValue": "Settings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 202,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "UserIcon",
                    "defaultValue": "UserIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 201,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "closeMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 231,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 235,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onDocumentClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:click', ['$event']"
                        }
                    ],
                    "modifierKind": [
                        170
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEscapeKey",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'document:keydown.escape'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "toggleMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "document:click",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 210
                },
                {
                    "name": "document:keydown.escape",
                    "args": [],
                    "argsDecorator": [],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 221
                }
            ],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, HostListener } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterLink } from '@angular/router';\r\nimport { User } from '@models';\r\nimport {\r\n  LucideAngularModule,\r\n  User as UserIcon,\r\n  Settings,\r\n  KeyRound,\r\n  LogOut,\r\n  ChevronDown\r\n} from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-user-menu',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterLink, LucideAngularModule],\r\n  template: `\r\n    <div class=\"user-menu\" [class.open]=\"isOpen\">\r\n      <button class=\"user-button\" (click)=\"toggleMenu()\" type=\"button\">\r\n        <div class=\"user-avatar\">\r\n          {{ user?.username?.charAt(0)?.toUpperCase() || 'U' }}\r\n        </div>\r\n        <span class=\"user-name\">{{ user?.username || 'Пользователь' }}</span>\r\n        <i-lucide [img]=\"ChevronDown\" class=\"menu-arrow\" [class.rotated]=\"isOpen\" [size]=\"16\"></i-lucide>\r\n      </button>\r\n\r\n      <div class=\"dropdown-menu\" *ngIf=\"isOpen\">\r\n        <a class=\"menu-item\" routerLink=\"/profile\" (click)=\"closeMenu()\" tabindex=\"0\" (keydown.enter)=\"closeMenu()\">\r\n          <i-lucide [img]=\"UserIcon\" class=\"menu-icon\" [size]=\"20\"></i-lucide>\r\n          <span class=\"menu-text\">Мой профиль</span>\r\n        </a>\r\n        <a class=\"menu-item\" routerLink=\"/settings\" (click)=\"closeMenu()\" tabindex=\"0\" (keydown.enter)=\"closeMenu()\">\r\n          <i-lucide [img]=\"Settings\" class=\"menu-icon\" [size]=\"20\"></i-lucide>\r\n          <span class=\"menu-text\">Настройки</span>\r\n        </a>\r\n        <button class=\"menu-item\" (click)=\"changePassword()\" (keydown.enter)=\"changePassword()\" tabindex=\"0\" type=\"button\">\r\n          <i-lucide [img]=\"KeyRound\" class=\"menu-icon\" [size]=\"20\"></i-lucide>\r\n          <span class=\"menu-text\">Сменить пароль</span>\r\n        </button>\r\n        <div class=\"menu-divider\"></div>\r\n        <button class=\"menu-item logout\" (click)=\"logout()\" (keydown.enter)=\"logout()\" tabindex=\"0\" type=\"button\">\r\n          <i-lucide [img]=\"LogOut\" class=\"menu-icon\" [size]=\"20\"></i-lucide>\r\n          <span class=\"menu-text\">Выйти</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .user-menu {\r\n      position: relative;\r\n      display: inline-block;\r\n    }\r\n\r\n    .user-button {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 8px;\r\n      padding: 8px 12px;\r\n      background: none;\r\n      border: 1px solid #e2e8f0;\r\n      border-radius: 8px;\r\n      cursor: pointer;\r\n      transition: all 0.2s ease;\r\n      font-size: 14px;\r\n      color: #374151;\r\n    }\r\n\r\n    .user-button:hover {\r\n      background-color: #f9fafb;\r\n      border-color: #d1d5db;\r\n    }\r\n\r\n    .user-avatar {\r\n      width: 32px;\r\n      height: 32px;\r\n      border-radius: 50%;\r\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      color: white;\r\n      font-weight: 600;\r\n      font-size: 14px;\r\n    }\r\n\r\n    .user-name {\r\n      font-weight: 500;\r\n      max-width: 120px;\r\n      overflow: hidden;\r\n      text-overflow: ellipsis;\r\n      white-space: nowrap;\r\n    }\r\n\r\n    .menu-arrow {\r\n      transition: transform 0.2s ease;\r\n      color: #6b7280;\r\n    }\r\n\r\n    .menu-arrow.rotated {\r\n      transform: rotate(180deg);\r\n    }\r\n\r\n    .dropdown-menu {\r\n      position: absolute;\r\n      top: 100%;\r\n      right: 0;\r\n      margin-top: 4px;\r\n      background: white;\r\n      border: 1px solid #e2e8f0;\r\n      border-radius: 8px;\r\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n      min-width: 200px;\r\n      z-index: 1000;\r\n      overflow: hidden;\r\n    }\r\n\r\n    .menu-item {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 12px;\r\n      padding: 12px 16px;\r\n      background: none;\r\n      border: none;\r\n      width: 100%;\r\n      text-align: left;\r\n      cursor: pointer;\r\n      transition: background-color 0.2s ease;\r\n      color: #374151;\r\n      text-decoration: none;\r\n      font-size: 14px;\r\n    }\r\n\r\n    .menu-item:hover {\r\n      background-color: #f9fafb;\r\n    }\r\n\r\n    .menu-item:focus {\r\n      outline: none;\r\n      background-color: #f3f4f6;\r\n    }\r\n\r\n    .menu-item.logout {\r\n      color: #dc2626;\r\n    }\r\n\r\n    .menu-item.logout:hover {\r\n      background-color: #fef2f2;\r\n    }\r\n\r\n    .menu-icon {\r\n      color: #6b7280;\r\n      flex-shrink: 0;\r\n    }\r\n\r\n    .menu-text {\r\n      font-weight: 500;\r\n    }\r\n\r\n    .menu-divider {\r\n      height: 1px;\r\n      background-color: #e5e7eb;\r\n      margin: 4px 0;\r\n    }\r\n\r\n    /* Анимация появления */\r\n    .dropdown-menu {\r\n      animation: slideDown 0.2s ease-out;\r\n    }\r\n\r\n    @keyframes slideDown {\r\n      from {\r\n        opacity: 0;\r\n        transform: translateY(-8px);\r\n      }\r\n      to {\r\n        opacity: 1;\r\n        transform: translateY(0);\r\n      }\r\n    }\r\n\r\n    /* Адаптивность */\r\n    @media (max-width: 768px) {\r\n      .user-name {\r\n        display: none;\r\n      }\r\n\r\n      .dropdown-menu {\r\n        right: -8px;\r\n        min-width: 180px;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class UserMenuComponent {\r\n  @Input() user: User | null = null;\r\n  @Output() logoutClick = new EventEmitter<void>();\r\n  @Output() changePasswordClick = new EventEmitter<void>();\r\n\r\n  // Lucide icons для standalone компонентов\r\n  readonly UserIcon = UserIcon;\r\n  readonly Settings = Settings;\r\n  readonly KeyRound = KeyRound;\r\n  readonly LogOut = LogOut;\r\n  readonly ChevronDown = ChevronDown;\r\n\r\n  isOpen = false;\r\n\r\n  @HostListener('document:click', ['$event'])\r\n  onDocumentClick(event: Event) {\r\n    const target = event.target as HTMLElement;\r\n    if (!this.isOpen) return;\r\n\r\n    const menuElement = target.closest('.user-menu');\r\n    if (!menuElement) {\r\n      this.closeMenu();\r\n    }\r\n  }\r\n\r\n  @HostListener('document:keydown.escape')\r\n  onEscapeKey() {\r\n    if (this.isOpen) {\r\n      this.closeMenu();\r\n    }\r\n  }\r\n\r\n  toggleMenu() {\r\n    this.isOpen = !this.isOpen;\r\n  }\r\n\r\n  closeMenu() {\r\n    this.isOpen = false;\r\n  }\r\n\r\n  logout() {\r\n    this.logoutClick.emit();\r\n    this.closeMenu();\r\n  }\r\n\r\n  changePassword() {\r\n    this.changePasswordClick.emit();\r\n    this.closeMenu();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .user-menu {\n      position: relative;\n      display: inline-block;\n    }\n\n    .user-button {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      padding: 8px 12px;\n      background: none;\n      border: 1px solid #e2e8f0;\n      border-radius: 8px;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      font-size: 14px;\n      color: #374151;\n    }\n\n    .user-button:hover {\n      background-color: #f9fafb;\n      border-color: #d1d5db;\n    }\n\n    .user-avatar {\n      width: 32px;\n      height: 32px;\n      border-radius: 50%;\n      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: white;\n      font-weight: 600;\n      font-size: 14px;\n    }\n\n    .user-name {\n      font-weight: 500;\n      max-width: 120px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap;\n    }\n\n    .menu-arrow {\n      transition: transform 0.2s ease;\n      color: #6b7280;\n    }\n\n    .menu-arrow.rotated {\n      transform: rotate(180deg);\n    }\n\n    .dropdown-menu {\n      position: absolute;\n      top: 100%;\n      right: 0;\n      margin-top: 4px;\n      background: white;\n      border: 1px solid #e2e8f0;\n      border-radius: 8px;\n      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n      min-width: 200px;\n      z-index: 1000;\n      overflow: hidden;\n    }\n\n    .menu-item {\n      display: flex;\n      align-items: center;\n      gap: 12px;\n      padding: 12px 16px;\n      background: none;\n      border: none;\n      width: 100%;\n      text-align: left;\n      cursor: pointer;\n      transition: background-color 0.2s ease;\n      color: #374151;\n      text-decoration: none;\n      font-size: 14px;\n    }\n\n    .menu-item:hover {\n      background-color: #f9fafb;\n    }\n\n    .menu-item:focus {\n      outline: none;\n      background-color: #f3f4f6;\n    }\n\n    .menu-item.logout {\n      color: #dc2626;\n    }\n\n    .menu-item.logout:hover {\n      background-color: #fef2f2;\n    }\n\n    .menu-icon {\n      color: #6b7280;\n      flex-shrink: 0;\n    }\n\n    .menu-text {\n      font-weight: 500;\n    }\n\n    .menu-divider {\n      height: 1px;\n      background-color: #e5e7eb;\n      margin: 4px 0;\n    }\n\n    /* Анимация появления */\n    .dropdown-menu {\n      animation: slideDown 0.2s ease-out;\n    }\n\n    @keyframes slideDown {\n      from {\n        opacity: 0;\n        transform: translateY(-8px);\n      }\n      to {\n        opacity: 1;\n        transform: translateY(0);\n      }\n    }\n\n    /* Адаптивность */\n    @media (max-width: 768px) {\n      .user-name {\n        display: none;\n      }\n\n      .dropdown-menu {\n        right: -8px;\n        min-width: 180px;\n      }\n    }\n  \n",
            "extends": []
        },
        {
            "name": "UserProfileSettingsComponent",
            "id": "component-UserProfileSettingsComponent-e138671bccef89edbe61125e8ee049d866ecd06cd00535d7958e0472a552b017e9681bd2bff79103eedb637785f4c7e3b8d36d5c408f2f8114ffef608f91861c",
            "file": "src/app/features/settings/components/user-profile-settings/user-profile-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-profile-settings",
            "styleUrls": [
                "./user-profile-settings.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-profile-settings.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_avatarPreview",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_isAvatarLoading",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 61,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "_isFormSubmitting",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "AlertCircle",
                    "defaultValue": "AlertCircle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "avatarPreview",
                    "defaultValue": "this._avatarPreview.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Camera",
                    "defaultValue": "Camera",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "createdAtFormatted",
                    "defaultValue": "computed(() => {\n    const profile = this.profile();\n    return profile?.createdAt ? DateUtils.formatDate(profile.createdAt) : 'Неизвестно';\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "displayName",
                    "defaultValue": "computed(() => {\n    const profile = this.profile();\n    if (!profile) return '';\n\n    if (profile.firstName && profile.lastName) {\n      return `${profile.firstName} ${profile.lastName}`;\n    }\n    return profile.username;\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "document",
                    "defaultValue": "document",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "this.profileService.error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "hasError",
                    "defaultValue": "this.profileService.hasError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isAvatarLoading",
                    "defaultValue": "this._isAvatarLoading.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isFormSubmitting",
                    "defaultValue": "this._isFormSubmitting.asReadonly()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 67,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "this.profileService.isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "lastLoginFormatted",
                    "defaultValue": "computed(() => {\n    const profile = this.profile();\n    return profile?.lastLogin ? DateUtils.formatDateTime(profile.lastLogin) : 'Неизвестно';\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Loader2",
                    "defaultValue": "Loader2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "profile",
                    "defaultValue": "this.profileService.profile",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "profileForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                },
                {
                    "name": "profileService",
                    "defaultValue": "inject(ProfileService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "RefreshCw",
                    "defaultValue": "RefreshCw",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "Save",
                    "defaultValue": "Save",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "snackBar",
                    "defaultValue": "inject(MatSnackBar)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "User",
                    "defaultValue": "User",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "clearError",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 229,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "createAvatarPreview",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initializeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "loadProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "markFormGroupTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onAvatarChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 137,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAvatarError",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onReset",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 215,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 189,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "patchForm",
                    "args": [
                        {
                            "name": "profile",
                            "type": "UserProfile",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 128,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "profile",
                            "type": "UserProfile",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "retryLoadProfile",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 225,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 249,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 240,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "uploadAvatar",
                    "args": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "File",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                },
                {
                    "name": "MatSnackBarModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit, OnDestroy, signal, computed } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatSnackBar, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { LucideAngularModule, Loader2, AlertCircle, RefreshCw, Camera, User, Save } from 'lucide-angular';\nimport { Subject, takeUntil } from 'rxjs';\n\nimport { ProfileService } from '../../services/profile.service';\nimport { ProfileValidators } from '../../validators/profile.validators';\nimport { DateUtils } from '../../utils/date.utils';\nimport { UserProfile, UpdateProfileRequest, UpdateAvatarRequest } from '../../models/user-profile.model';\n\n@Component({\n  selector: 'app-user-profile-settings',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatSnackBarModule,\n    LucideAngularModule\n  ],\n  templateUrl: './user-profile-settings.component.html',\n  styleUrls: ['./user-profile-settings.component.scss']\n})\nexport class UserProfileSettingsComponent implements OnInit, OnDestroy {\n  private readonly fb = inject(FormBuilder);\n  private readonly profileService = inject(ProfileService);\n  private readonly snackBar = inject(MatSnackBar);\n  private readonly destroy$ = new Subject<void>();\n\n  // Document для доступа к DOM\n  readonly document = document;\n\n  // Lucide icons\n  readonly Loader2 = Loader2;\n  readonly AlertCircle = AlertCircle;\n  readonly RefreshCw = RefreshCw;\n  readonly Camera = Camera;\n  readonly User = User;\n  readonly Save = Save;\n\n\n\n  // Form\n  profileForm!: FormGroup;\n\n  // Signals\n  private readonly _avatarPreview = signal<string | null>(null);\n  private readonly _isAvatarLoading = signal(false);\n  private readonly _isFormSubmitting = signal(false);\n\n  // Computed values\n  readonly avatarPreview = this._avatarPreview.asReadonly();\n  readonly isAvatarLoading = this._isAvatarLoading.asReadonly();\n  readonly isFormSubmitting = this._isFormSubmitting.asReadonly();\n\n  // Service signals\n  readonly profile = this.profileService.profile;\n  readonly isLoading = this.profileService.isLoading;\n  readonly error = this.profileService.error;\n  readonly hasError = this.profileService.hasError;\n\n  // Computed values from service\n  readonly displayName = computed(() => {\n    const profile = this.profile();\n    if (!profile) return '';\n\n    if (profile.firstName && profile.lastName) {\n      return `${profile.firstName} ${profile.lastName}`;\n    }\n    return profile.username;\n  });\n\n  readonly lastLoginFormatted = computed(() => {\n    const profile = this.profile();\n    return profile?.lastLogin ? DateUtils.formatDateTime(profile.lastLogin) : 'Неизвестно';\n  });\n\n  readonly createdAtFormatted = computed(() => {\n    const profile = this.profile();\n    return profile?.createdAt ? DateUtils.formatDate(profile.createdAt) : 'Неизвестно';\n  });\n\n  ngOnInit(): void {\n    this.initializeForm();\n    this.loadProfile();\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initializeForm(): void {\n    this.profileForm = this.fb.group({\n      username: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(20), ProfileValidators.username()]],\n      email: ['', [Validators.required, Validators.email]],\n      firstName: ['', [Validators.minLength(2), Validators.maxLength(50), ProfileValidators.name()]],\n      lastName: ['', [Validators.minLength(2), Validators.maxLength(50), ProfileValidators.name()]],\n      avatar: [null]\n    });\n  }\n\n  private loadProfile(): void {\n    // Загружаем профиль с сервера\n    this.profileService.loadProfile().pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(profile => {\n      if (profile) {\n        this.patchForm(profile);\n        this._avatarPreview.set(profile.avatar ?? null);\n      }\n    });\n  }\n\n  private patchForm(profile: UserProfile): void {\n    this.profileForm.patchValue({\n      username: profile.username,\n      email: profile.email,\n      firstName: profile.firstName ?? '',\n      lastName: profile.lastName ?? ''\n    });\n  }\n\n  onAvatarChange(event: Event): void {\n    const input = event.target as HTMLInputElement;\n    const file = input.files?.[0];\n\n    if (!file) return;\n\n    // Валидация файла\n    const avatarControl = this.profileForm.get('avatar');\n    if (!avatarControl) return;\n\n    avatarControl.setValue(file);\n\n    const validation = ProfileValidators.avatar()(avatarControl);\n    if (validation) {\n      this.showError(Object.values(validation)[0]);\n      return;\n    }\n\n    // Создание превью\n    this.createAvatarPreview(file);\n\n    // Загрузка аватара\n    this.uploadAvatar(file);\n  }\n\n  onAvatarError(event: Event): void {\n    const img = event.target as HTMLImageElement;\n    img.src = 'assets/images/default-avatar.png';\n  }\n\n  private createAvatarPreview(file: File): void {\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      this._avatarPreview.set(e.target?.result as string);\n    };\n    reader.readAsDataURL(file);\n  }\n\n  private uploadAvatar(file: File): void {\n    this._isAvatarLoading.set(true);\n\n    const request: UpdateAvatarRequest = { avatar: file };\n    this.profileService.updateAvatar(request).pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(profile => {\n      this._isAvatarLoading.set(false);\n      if (profile) {\n        this.showSuccess('Аватар успешно обновлен');\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.profileForm.invalid) {\n      this.markFormGroupTouched();\n      return;\n    }\n\n    this._isFormSubmitting.set(true);\n\n    const formValue = this.profileForm.value;\n    const request: UpdateProfileRequest = {\n      username: formValue.username,\n      email: formValue.email,\n      firstName: formValue.firstName ?? undefined,\n      lastName: formValue.lastName ?? undefined\n    };\n\n    this.profileService.updateProfile(request).pipe(\n      takeUntil(this.destroy$)\n    ).subscribe(profile => {\n      this._isFormSubmitting.set(false);\n      if (profile) {\n        this.showSuccess('Профиль успешно обновлен');\n      }\n    });\n  }\n\n  onReset(): void {\n    const profile = this.profile();\n    if (profile) {\n      this.patchForm(profile);\n      this._avatarPreview.set(profile.avatar ?? null);\n      this.profileForm.markAsPristine();\n      this.profileService.clearError();\n    }\n  }\n\n  retryLoadProfile(): void {\n    this.profileService.retryLoadProfile();\n  }\n\n  clearError(): void {\n    this.profileService.clearError();\n  }\n\n  private markFormGroupTouched(): void {\n    Object.keys(this.profileForm.controls).forEach(key => {\n      const control = this.profileForm.get(key);\n      control?.markAsTouched();\n    });\n  }\n\n  private showSuccess(message: string): void {\n    this.snackBar.open(message, 'Закрыть', {\n      duration: 3000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top',\n      panelClass: ['success-snackbar']\n    });\n  }\n\n  private showError(message: string): void {\n    this.snackBar.open(message, 'Закрыть', {\n      duration: 5000,\n      horizontalPosition: 'end',\n      verticalPosition: 'top',\n      panelClass: ['error-snackbar']\n    });\n  }\n\n  // Геттеры для удобного доступа к контролам формы\n  get usernameControl() {\n    return this.profileForm.get('username');\n  }\n\n  get emailControl() {\n    return this.profileForm.get('email');\n  }\n\n  get firstNameControl() {\n    return this.profileForm.get('firstName');\n  }\n\n  get lastNameControl() {\n    return this.profileForm.get('lastName');\n  }\n\n  get avatarControl() {\n    return this.profileForm.get('avatar');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".profile-settings {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2rem;\r\n  position: relative;\r\n}\r\n\r\n// Правильное выравнивание иконок в кнопках Material Design\r\nbutton.mat-button .mat-icon,\r\na.mat-button .mat-icon,\r\na.mat-raised-button .mat-icon,\r\na.mat-flat-button .mat-icon,\r\na.mat-stroked-button .mat-icon,\r\nbutton.mat-raised-button .mat-icon,\r\nbutton.mat-flat-button .mat-icon,\r\nbutton.mat-stroked-button .mat-icon,\r\nbutton.mat-mini-fab .mat-icon {\r\n  vertical-align: middle;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n// Специально для кнопок с иконками Lucide\r\nbutton i-lucide,\r\na i-lucide {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-shrink: 0;\r\n}\r\n\r\n// Skeleton загрузчик\r\n.skeleton-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 2rem;\r\n}\r\n\r\n.skeleton-card {\r\n  opacity: 0.7;\r\n}\r\n\r\n.skeleton-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  padding: 2rem;\r\n}\r\n\r\n.skeleton-avatar {\r\n  width: 120px;\r\n  height: 120px;\r\n  border-radius: 50%;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: shimmer 1.5s infinite;\r\n}\r\n\r\n.skeleton-info {\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n}\r\n\r\n.skeleton-name {\r\n  height: 2rem;\r\n  width: 60%;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: shimmer 1.5s infinite;\r\n  border-radius: 4px;\r\n}\r\n\r\n.skeleton-username {\r\n  height: 1.1rem;\r\n  width: 40%;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: shimmer 1.5s infinite;\r\n  border-radius: 4px;\r\n}\r\n\r\n.skeleton-email {\r\n  height: 1rem;\r\n  width: 50%;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: shimmer 1.5s infinite;\r\n  border-radius: 4px;\r\n}\r\n\r\n.skeleton-stats {\r\n  display: flex;\r\n  gap: 2rem;\r\n  padding: 1.5rem 2rem;\r\n}\r\n\r\n.skeleton-stat {\r\n  height: 2rem;\r\n  width: 120px;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: shimmer 1.5s infinite;\r\n  border-radius: 4px;\r\n}\r\n\r\n.skeleton-title {\r\n  height: 1.5rem;\r\n  width: 200px;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: shimmer 1.5s infinite;\r\n  border-radius: 4px;\r\n}\r\n\r\n.skeleton-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.skeleton-field {\r\n  height: 3.5rem;\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: shimmer 1.5s infinite;\r\n  border-radius: 4px;\r\n}\r\n\r\n@keyframes shimmer {\r\n  0% {\r\n    background-position: -200% 0;\r\n  }\r\n  100% {\r\n    background-position: 200% 0;\r\n  }\r\n}\r\n\r\n// Блок ошибки\r\n.error-container {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 400px;\r\n}\r\n\r\n.error-card {\r\n  max-width: 500px;\r\n  width: 100%;\r\n  border-radius: 16px;\r\n  box-shadow: 0 8px 32px rgba(220, 53, 69, 0.2);\r\n  border: 1px solid rgba(220, 53, 69, 0.1);\r\n}\r\n\r\n.error-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-align: center;\r\n  padding: 2rem;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.error-icon {\r\n  color: #dc3545;\r\n  opacity: 0.8;\r\n}\r\n\r\n.error-content h2 {\r\n  color: #dc3545;\r\n  margin: 0;\r\n  font-size: 1.5rem;\r\n  font-weight: 600;\r\n}\r\n\r\n.error-content p {\r\n  color: #6c757d;\r\n  margin: 0;\r\n  font-size: 1rem;\r\n  line-height: 1.5;\r\n}\r\n\r\n.error-actions {\r\n  display: flex;\r\n  gap: 1rem;\r\n  margin-top: 1rem;\r\n}\r\n\r\n// Карточка с информацией о профиле\r\n.profile-info-card {\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border-radius: 16px;\r\n  overflow: hidden;\r\n  box-shadow: 0 8px 32px rgba(102, 126, 234, 0.3);\r\n}\r\n\r\n.profile-header {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 2rem;\r\n  padding: 2rem;\r\n}\r\n\r\n.avatar-section {\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 1rem;\r\n}\r\n\r\n.avatar-container {\r\n  position: relative;\r\n  width: 120px;\r\n  height: 120px;\r\n  border-radius: 50%;\r\n  overflow: hidden;\r\n  border: 4px solid rgba(255, 255, 255, 0.3);\r\n  box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.avatar-image {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.avatar-container:hover .avatar-image {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.avatar-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n}\r\n\r\n.avatar-upload-btn {\r\n  background: rgba(255, 255, 255, 0.9) !important;\r\n  color: #667eea !important;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n  transition: all 0.3s ease;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  &:hover {\r\n    background: white !important;\r\n    transform: scale(1.1);\r\n    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    transform: none;\r\n  }\r\n\r\n  i-lucide {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n}\r\n\r\n.profile-details {\r\n  flex: 1;\r\n}\r\n\r\n.display-name {\r\n  font-size: 2rem;\r\n  font-weight: 700;\r\n  margin: 0 0 0.5rem 0;\r\n  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.username {\r\n  font-size: 1.1rem;\r\n  opacity: 0.9;\r\n  margin: 0 0 0.25rem 0;\r\n  font-weight: 500;\r\n}\r\n\r\n.email {\r\n  font-size: 1rem;\r\n  opacity: 0.8;\r\n  margin: 0;\r\n}\r\n\r\n.profile-stats {\r\n  display: flex;\r\n  gap: 2rem;\r\n  padding: 1.5rem 2rem;\r\n  background: rgba(255, 255, 255, 0.1);\r\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\r\n}\r\n\r\n.stat-item {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 0.25rem;\r\n}\r\n\r\n.stat-label {\r\n  font-size: 0.875rem;\r\n  opacity: 0.8;\r\n  font-weight: 500;\r\n}\r\n\r\n.stat-value {\r\n  font-size: 1rem;\r\n  font-weight: 600;\r\n}\r\n\r\n// Карточка с формой\r\n.profile-form-card {\r\n  border-radius: 16px;\r\n  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);\r\n  overflow: hidden;\r\n}\r\n\r\n.profile-form-card mat-card-header {\r\n  background: #f8f9fa;\r\n  padding: 1.5rem 2rem;\r\n  border-bottom: 1px solid #e9ecef;\r\n}\r\n\r\n.profile-form-card mat-card-title {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n  font-size: 1.25rem;\r\n  color: #2c3e50;\r\n  margin: 0;\r\n\r\n  i-lucide {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n}\r\n\r\n.profile-form-card mat-card-content {\r\n  padding: 2rem;\r\n}\r\n\r\n.profile-form {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n.form-row {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n\r\n  &.two-columns {\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 1rem;\r\n  }\r\n}\r\n\r\n.form-field {\r\n  width: 100%;\r\n}\r\n\r\n.form-actions {\r\n  display: flex;\r\n  gap: 1rem;\r\n  justify-content: flex-end;\r\n  padding-top: 1.5rem;\r\n  border-top: 1px solid #e9ecef;\r\n  margin-top: 1.5rem;\r\n}\r\n\r\n.reset-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  padding: 0.875rem 1.75rem;\r\n  border-radius: 12px;\r\n  font-weight: 500;\r\n  font-size: 0.95rem;\r\n  border: 2px solid #e9ecef;\r\n  background: white;\r\n  color: #6c757d;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  min-width: 120px;\r\n  justify-content: center;\r\n\r\n  &:hover:not(:disabled) {\r\n    background: #f8f9fa;\r\n    border-color: #dee2e6;\r\n    color: #495057;\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  &:active:not(:disabled) {\r\n    transform: translateY(0);\r\n    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.6;\r\n    cursor: not-allowed;\r\n    transform: none;\r\n    box-shadow: none;\r\n  }\r\n\r\n  i-lucide {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n}\r\n\r\n.save-btn {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  padding: 0.875rem 2rem;\r\n  border-radius: 12px;\r\n  font-weight: 600;\r\n  font-size: 0.95rem;\r\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n  color: white;\r\n  border: none;\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  min-width: 140px;\r\n  justify-content: center;\r\n  position: relative;\r\n  overflow: hidden;\r\n\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    top: 0;\r\n    left: -100%;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);\r\n    transition: left 0.5s;\r\n  }\r\n\r\n  &:hover:not(:disabled) {\r\n    transform: translateY(-2px);\r\n    box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);\r\n\r\n    &::before {\r\n      left: 100%;\r\n    }\r\n  }\r\n\r\n  &:active:not(:disabled) {\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);\r\n  }\r\n\r\n  &:disabled {\r\n    background: #e9ecef;\r\n    color: #adb5bd;\r\n    cursor: not-allowed;\r\n    transform: none;\r\n    box-shadow: none;\r\n\r\n    &::before {\r\n      display: none;\r\n    }\r\n  }\r\n\r\n  i-lucide {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-shrink: 0;\r\n  }\r\n\r\n  span {\r\n    display: flex;\r\n    align-items: center;\r\n    font-weight: 600;\r\n  }\r\n}\r\n\r\n// Индикатор загрузки\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(255, 255, 255, 0.9);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  z-index: 1000;\r\n  border-radius: 16px;\r\n\r\n  i-lucide {\r\n    animation: spin 1s linear infinite;\r\n    color: #667eea;\r\n  }\r\n\r\n  p {\r\n    color: #6c757d;\r\n    font-size: 1rem;\r\n    margin: 0;\r\n  }\r\n}\r\n\r\n@keyframes spin {\r\n  0% {\r\n    transform: rotate(0deg);\r\n  }\r\n  100% {\r\n    transform: rotate(360deg);\r\n  }\r\n}\r\n\r\n// Адаптивность\r\n@media (max-width: 768px) {\r\n  .profile-header {\r\n    flex-direction: column;\r\n    text-align: center;\r\n    gap: 1.5rem;\r\n  }\r\n\r\n  .avatar-container {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n\r\n  .display-name {\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  .profile-stats {\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    text-align: center;\r\n  }\r\n\r\n  .form-row.two-columns {\r\n    grid-template-columns: 1fr;\r\n  }\r\n\r\n  .form-actions {\r\n    flex-direction: column;\r\n  }\r\n\r\n  .save-btn,\r\n  .reset-btn {\r\n    width: 100%;\r\n    justify-content: center;\r\n  }\r\n\r\n  .error-actions {\r\n    flex-direction: column;\r\n    width: 100%;\r\n  }\r\n\r\n  .skeleton-header {\r\n    flex-direction: column;\r\n    text-align: center;\r\n    gap: 1.5rem;\r\n  }\r\n\r\n  .skeleton-stats {\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    text-align: center;\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .profile-settings {\r\n    gap: 1rem;\r\n  }\r\n\r\n  .profile-header {\r\n    padding: 1.5rem;\r\n  }\r\n\r\n  .profile-stats {\r\n    padding: 1rem 1.5rem;\r\n  }\r\n\r\n  .profile-form-card mat-card-content {\r\n    padding: 1.5rem;\r\n  }\r\n\r\n  .profile-form {\r\n    gap: 1rem;\r\n  }\r\n\r\n  .error-content {\r\n    padding: 1.5rem;\r\n  }\r\n}\r\n",
                    "styleUrl": "./user-profile-settings.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "accessors": {
                "usernameControl": {
                    "name": "usernameControl",
                    "getSignature": {
                        "name": "usernameControl",
                        "type": "",
                        "returnType": "",
                        "line": 259
                    }
                },
                "emailControl": {
                    "name": "emailControl",
                    "getSignature": {
                        "name": "emailControl",
                        "type": "",
                        "returnType": "",
                        "line": 263
                    }
                },
                "firstNameControl": {
                    "name": "firstNameControl",
                    "getSignature": {
                        "name": "firstNameControl",
                        "type": "",
                        "returnType": "",
                        "line": 267
                    }
                },
                "lastNameControl": {
                    "name": "lastNameControl",
                    "getSignature": {
                        "name": "lastNameControl",
                        "type": "",
                        "returnType": "",
                        "line": 271
                    }
                },
                "avatarControl": {
                    "name": "avatarControl",
                    "getSignature": {
                        "name": "avatarControl",
                        "type": "",
                        "returnType": "",
                        "line": 275
                    }
                }
            },
            "templateData": "<div class=\"profile-settings\">\r\n  <!-- Индикатор загрузки -->\r\n  <div class=\"loading-overlay\" *ngIf=\"isLoading()\">\r\n    <i-lucide class=\"icon-center\" [img]=\"Loader2\" [size]=\"40\"></i-lucide>\r\n    <p>Загрузка профиля...</p>\r\n  </div>\r\n\r\n  <!-- Skeleton загрузчик -->\r\n  <div class=\"skeleton-container\" *ngIf=\"isLoading() && !profile()\">\r\n    <mat-card class=\"profile-info-card skeleton-card\">\r\n      <div class=\"skeleton-header\">\r\n        <div class=\"skeleton-avatar\"></div>\r\n        <div class=\"skeleton-info\">\r\n          <div class=\"skeleton-name\"></div>\r\n          <div class=\"skeleton-username\"></div>\r\n          <div class=\"skeleton-email\"></div>\r\n        </div>\r\n      </div>\r\n      <div class=\"skeleton-stats\">\r\n        <div class=\"skeleton-stat\"></div>\r\n        <div class=\"skeleton-stat\"></div>\r\n        <div class=\"skeleton-stat\"></div>\r\n      </div>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"profile-form-card skeleton-card\">\r\n      <mat-card-header>\r\n        <div class=\"skeleton-title\"></div>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <div class=\"skeleton-form\">\r\n          <div class=\"skeleton-field\"></div>\r\n          <div class=\"skeleton-field\"></div>\r\n          <div class=\"skeleton-field\"></div>\r\n          <div class=\"skeleton-field\"></div>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <!-- Блок ошибки -->\r\n  <div class=\"error-container\" *ngIf=\"hasError() && !isLoading()\">\r\n    <mat-card class=\"error-card\">\r\n      <mat-card-content>\r\n        <div class=\"error-content\">\r\n          <i-lucide class=\"error-icon\" [img]=\"AlertCircle\" [size]=\"48\"></i-lucide>\r\n          <h2>Ошибка загрузки профиля</h2>\r\n          <p>{{ error() }}</p>\r\n          <div class=\"error-actions\">\r\n            <button\r\n              mat-raised-button\r\n              color=\"primary\"\r\n              (click)=\"retryLoadProfile()\"\r\n              [disabled]=\"isLoading()\">\r\n              <i-lucide class=\"icon-center\" [img]=\"RefreshCw\" [size]=\"16\"></i-lucide>\r\n              Повторить попытку\r\n            </button>\r\n            <button\r\n              mat-stroked-button\r\n              (click)=\"clearError()\">\r\n              Закрыть\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <!-- Основной контент (показывается только при успешной загрузке) -->\r\n  <ng-container *ngIf=\"!isLoading() && !hasError() && profile()\">\r\n    <!-- Карточка с информацией о профиле -->\r\n    <mat-card class=\"profile-info-card\">\r\n      <div class=\"profile-header\">\r\n        <div class=\"avatar-section\">\r\n          <div class=\"avatar-container\">\r\n            <img\r\n              [src]=\"avatarPreview() || profile()?.avatar || 'assets/images/default-avatar.png'\"\r\n              [alt]=\"displayName()\"\r\n              class=\"avatar-image\"\r\n              (error)=\"onAvatarError($event)\">\r\n\r\n            <div class=\"avatar-overlay\" *ngIf=\"isAvatarLoading()\">\r\n              <i-lucide class=\"icon-center\" [img]=\"Loader2\" [size]=\"24\"></i-lucide>\r\n            </div>\r\n          </div>\r\n\r\n          <button\r\n            mat-mini-fab\r\n            color=\"primary\"\r\n            class=\"avatar-upload-btn\"\r\n            (click)=\"fileInput.click()\"\r\n            [disabled]=\"isAvatarLoading()\">\r\n            <i-lucide [img]=\"Camera\" [size]=\"20\"></i-lucide>\r\n          </button>\r\n\r\n          <input\r\n            #fileInput\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            (change)=\"onAvatarChange($event)\"\r\n            style=\"display: none;\">\r\n        </div>\r\n\r\n        <div class=\"profile-details\">\r\n          <h1 class=\"display-name\">{{ displayName() }}</h1>\r\n          <p class=\"username\">&#64;{{ profile()?.username }}</p>\r\n          <p class=\"email\">{{ profile()?.email }}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"profile-stats\">\r\n        <div class=\"stat-item\">\r\n          <span class=\"stat-label\">Последний вход</span>\r\n          <span class=\"stat-value\">{{ lastLoginFormatted() }}</span>\r\n        </div>\r\n        <div class=\"stat-item\">\r\n          <span class=\"stat-label\">Дата регистрации</span>\r\n          <span class=\"stat-value\">{{ createdAtFormatted() }}</span>\r\n        </div>\r\n        <div class=\"stat-item\">\r\n          <span class=\"stat-label\">Роль</span>\r\n          <span class=\"stat-value\">{{ profile()?.role || 'Пользователь' }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card>\r\n\r\n    <!-- Карточка с формой -->\r\n    <mat-card class=\"profile-form-card\">\r\n      <mat-card-header>\r\n        <mat-card-title>\r\n          <i-lucide [img]=\"User\" [size]=\"24\"></i-lucide>\r\n          Редактировать профиль\r\n        </mat-card-title>\r\n      </mat-card-header>\r\n\r\n      <mat-card-content>\r\n        <form [formGroup]=\"profileForm\" (ngSubmit)=\"onSubmit()\" class=\"profile-form\">\r\n          <div class=\"form-row\">\r\n            <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n              <mat-label>Имя пользователя *</mat-label>\r\n              <input\r\n                matInput\r\n                formControlName=\"username\"\r\n                placeholder=\"Введите имя пользователя\">\r\n              <mat-error *ngIf=\"usernameControl?.hasError('required')\">\r\n                Имя пользователя обязательно\r\n              </mat-error>\r\n              <mat-error *ngIf=\"usernameControl?.hasError('minlength')\">\r\n                Минимум 3 символа\r\n              </mat-error>\r\n              <mat-error *ngIf=\"usernameControl?.hasError('maxlength')\">\r\n                Максимум 20 символов\r\n              </mat-error>\r\n              <mat-error *ngIf=\"usernameControl?.hasError('pattern')\">\r\n                Только буквы, цифры и подчеркивания\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div class=\"form-row\">\r\n            <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n              <mat-label>Email *</mat-label>\r\n              <input\r\n                matInput\r\n                type=\"email\"\r\n                formControlName=\"email\"\r\n                placeholder=\"Введите email\">\r\n              <mat-error *ngIf=\"emailControl?.hasError('required')\">\r\n                Email обязателен\r\n              </mat-error>\r\n              <mat-error *ngIf=\"emailControl?.hasError('email')\">\r\n                Введите корректный email\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div class=\"form-row two-columns\">\r\n            <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n              <mat-label>Имя</mat-label>\r\n              <input\r\n                matInput\r\n                formControlName=\"firstName\"\r\n                placeholder=\"Введите имя\">\r\n              <mat-error *ngIf=\"firstNameControl?.hasError('minlength')\">\r\n                Минимум 2 символа\r\n              </mat-error>\r\n              <mat-error *ngIf=\"firstNameControl?.hasError('maxlength')\">\r\n                Максимум 50 символов\r\n              </mat-error>\r\n              <mat-error *ngIf=\"firstNameControl?.hasError('pattern')\">\r\n                Только буквы, пробелы и дефисы\r\n              </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"outline\" class=\"form-field\">\r\n              <mat-label>Фамилия</mat-label>\r\n              <input\r\n                matInput\r\n                formControlName=\"lastName\"\r\n                placeholder=\"Введите фамилию\">\r\n              <mat-error *ngIf=\"lastNameControl?.hasError('minlength')\">\r\n                Минимум 2 символа\r\n              </mat-error>\r\n              <mat-error *ngIf=\"lastNameControl?.hasError('maxlength')\">\r\n                Максимум 50 символов\r\n              </mat-error>\r\n              <mat-error *ngIf=\"lastNameControl?.hasError('pattern')\">\r\n                Только буквы, пробелы и дефисы\r\n              </mat-error>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div class=\"form-actions\">\r\n            <button\r\n              type=\"button\"\r\n              mat-stroked-button\r\n              (click)=\"onReset()\"\r\n              [disabled]=\"isFormSubmitting() || isLoading()\"\r\n              class=\"reset-btn\">\r\n              <i-lucide [img]=\"RefreshCw\" [size]=\"16\"></i-lucide>\r\n              Сбросить\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              mat-raised-button\r\n              color=\"primary\"\r\n              [disabled]=\"profileForm.invalid || isFormSubmitting() || isLoading()\"\r\n              class=\"save-btn\">\r\n              <i-lucide class=\"icon-center\" [img]=\"Loader2\" [size]=\"16\" *ngIf=\"isFormSubmitting()\"></i-lucide>\r\n              <i-lucide [img]=\"Save\" [size]=\"16\" *ngIf=\"!isFormSubmitting()\"></i-lucide>\r\n              <span>{{ isFormSubmitting() ? 'Сохранение...' : 'Сохранить' }}</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </ng-container>\r\n</div>\r\n"
        },
        {
            "name": "WorkspaceSettingsComponent",
            "id": "component-WorkspaceSettingsComponent-d17fbf183dff0144749e59bda318e836020210d3aa50a359925d8acd8ca4e723899948bf2f94765d4d54aff64c33eaf5b55f4bd264c43b87d6aa93d23ca3e718",
            "file": "src/app/features/settings/components/workspace-settings/workspace-settings.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-workspace-settings",
            "styleUrls": [],
            "styles": [
                "\n    .workspace-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  "
            ],
            "template": "<div class=\"workspace-settings\">\n  <mat-card>\n    <mat-card-header>\n      <mat-card-title>\n        <i-lucide [img]=\"GridIcon\" [size]=\"24\"></i-lucide>\n        Настройки рабочего пространства\n      </mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <p>Здесь будут настройки интерфейса и рабочего пространства</p>\n      <p>Этап 6: Рабочее пространство - в разработке</p>\n    </mat-card-content>\n  </mat-card>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "GridIcon",
                    "defaultValue": "Grid3X3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "LucideAngularModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { LucideAngularModule, Grid3X3 } from 'lucide-angular';\r\n\r\n@Component({\r\n  selector: 'app-workspace-settings',\r\n  standalone: true,\r\n  imports: [CommonModule, MatCardModule, LucideAngularModule],\r\n  template: `\r\n    <div class=\"workspace-settings\">\r\n      <mat-card>\r\n        <mat-card-header>\r\n          <mat-card-title>\r\n            <i-lucide [img]=\"GridIcon\" [size]=\"24\"></i-lucide>\r\n            Настройки рабочего пространства\r\n          </mat-card-title>\r\n        </mat-card-header>\r\n        <mat-card-content>\r\n          <p>Здесь будут настройки интерфейса и рабочего пространства</p>\r\n          <p>Этап 6: Рабочее пространство - в разработке</p>\r\n        </mat-card-content>\r\n      </mat-card>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .workspace-settings {\r\n      padding: 1rem 0;\r\n    }\r\n\r\n    mat-card {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-header {\r\n      margin-bottom: 1rem;\r\n    }\r\n\r\n    mat-card-title {\r\n      display: flex;\r\n      align-items: center;\r\n      gap: 0.75rem;\r\n      font-size: 1.25rem;\r\n      color: #2c3e50;\r\n      margin: 0;\r\n\r\n      i-lucide {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-shrink: 0;\r\n      }\r\n    }\r\n\r\n    p {\r\n      color: #6c757d;\r\n      margin-bottom: 0.5rem;\r\n    }\r\n  `]\r\n})\r\nexport class WorkspaceSettingsComponent {\r\n  // Icons\r\n  readonly GridIcon = Grid3X3;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "\n    .workspace-settings {\n      padding: 1rem 0;\n    }\n\n    mat-card {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-header {\n      margin-bottom: 1rem;\n    }\n\n    mat-card-title {\n      display: flex;\n      align-items: center;\n      gap: 0.75rem;\n      font-size: 1.25rem;\n      color: #2c3e50;\n      margin: 0;\n\n      i-lucide {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-shrink: 0;\n      }\n    }\n\n    p {\n      color: #6c757d;\n      margin-bottom: 0.5rem;\n    }\n  \n",
            "extends": []
        }
    ],
    "modules": [
        {
            "name": "AnalyticsModule",
            "id": "module-AnalyticsModule-458796fc95de683b1ac56f781dafb500cb038bed75ca11e2718fa3cb9f40b778ed9bde93fe18c8673459a182364b451b182e9443de85ef7e6b3a4e0ecf896361",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/analytics/analytics.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// Routes\r\nimport { analyticsRoutes } from './analytics.routes';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(analyticsRoutes)\r\n  ]\r\n})\r\nexport class AnalyticsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-94fc7664a0ef7f3e7ff0085a3c5341088154d7baa5cae945641a4a27291b010d1deb3e598015ca8d4346a908e6e654eea96c334b290fa0573bd9821e2c344893",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { LucideAngularModule } from 'lucide-angular';\n\n// Components\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { ForgotPasswordComponent } from './components/forgot-password/forgot-password.component';\n\n// Shared Module\nimport { SharedModule } from '../../shared/shared.module';\n\n// Routes\nimport { authRoutes } from './auth.routes';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(authRoutes),\n    SharedModule,\n    LucideAngularModule,\n    LoginComponent,\n    RegisterComponent,\n    ForgotPasswordComponent\n  ]\n})\nexport class AuthModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ForgotPasswordComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegisterComponent"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-1dfa41e018e385f70cb912814f5e5ec9058f5ccabee1b6c16bd649a0fdff310364d4b4714ed14092e70246b947b9aa00733ea9fc81eaf76978840b4b3d5f5085",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ApiService } from './services/api.service';\r\nimport { AuthService } from './services/auth.service';\r\nimport { NotificationService } from './services/notification.service';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  providers: [\r\n    ApiService,\r\n    AuthService,\r\n    NotificationService\r\n  ],\r\n  exports: []\r\n})\r\nexport class CoreModule {\r\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\r\n    if (parentModule) {\r\n      throw new Error('CoreModule is already loaded. Import it in the AppModule only.');\r\n    }\r\n  }\r\n}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "ApiService"
                        },
                        {
                            "name": "AuthService"
                        },
                        {
                            "name": "NotificationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DashboardModule",
            "id": "module-DashboardModule-8acf59b46fee580d98e7d6ca656780e6577273760116b02d4258550459ee15cc55bba1fc0e799caf816e7de7f24d4b23589a2d2b2c2689633e2355bb87f29afd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/dashboard/dashboard.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { dashboardRoutes } from './dashboard.routes';\r\nimport { SharedModule } from '../../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(dashboardRoutes),\r\n    SharedModule\r\n  ]\r\n})\r\nexport class DashboardModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MaterialModule",
            "id": "module-MaterialModule-11b110076927c32f3d4211249cec870739181b2378692ce5b842eca718c911d03176aab05b97c085901d018cd07fa58c37bee4c5f250b237347efbad0c1dbf86",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\n\r\n// Material Modules\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\n\r\nconst MATERIAL_MODULES = [\r\n  MatCardModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatCheckboxModule,\r\n  MatProgressSpinnerModule,\r\n  MatSelectModule,\r\n  MatSnackBarModule\r\n];\r\n\r\n@NgModule({\r\n  imports: MATERIAL_MODULES,\r\n  exports: MATERIAL_MODULES\r\n})\r\nexport class MaterialModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ProjectsModule",
            "id": "module-ProjectsModule-fdf60b749790b629a0dec0f53d3850d2717ce85be9812456169357764d08862b2315a7b2bb6cda4ee95cf507a2b96c897ad5300bdd1c72ef857557d1f1f49260",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/projects/projects.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\n\r\n// Routes\r\nimport { projectsRoutes } from './projects.routes';\r\n\r\n// Components\r\nimport { ProjectsComponent } from './components/projects/projects.component';\r\nimport { ProjectListComponent } from './components/project-list/project-list.component';\r\nimport { ProjectCardComponent } from './components/project-card/project-card.component';\r\n\r\n// Store\r\nimport { projectListReducer } from './store/project-list.reducer';\r\nimport { ProjectListEffects } from './store/project-list.effects';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule,\r\n    RouterModule.forChild(projectsRoutes),\r\n    StoreModule.forFeature('projectList', projectListReducer),\r\n    EffectsModule.forFeature([ProjectListEffects]),\r\n    ProjectsComponent,\r\n    ProjectListComponent,\r\n    ProjectCardComponent\r\n  ]\r\n})\r\nexport class ProjectsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ProjectCardComponent"
                        },
                        {
                            "name": "ProjectListComponent"
                        },
                        {
                            "name": "ProjectsComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SettingsModule",
            "id": "module-SettingsModule-6c433e0b018589cc978393976dd50177e1f43bc0735a85bdf71a7aa245f34e53e246c23dafacac6472c87b67801d8132652223dc406d01b47e1cf723aadd103a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/settings/settings.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { settingsRoutes } from './settings.routes';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(settingsRoutes)\r\n  ]\r\n})\r\nexport class SettingsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-e4f94bc334800e2aaa6c6dd44411e64c8128fef2a9801398c68201eb1376375be5cf7e2542f57486e4821dc0bd58c4e0dc35c2182c52f98a946c05265c0fb568",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MaterialModule } from './material.module';\r\nimport { UserMenuComponent } from './components/user-menu/user-menu.component';\r\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    MaterialModule,\r\n    UserMenuComponent,\r\n    PageNotFoundComponent\r\n  ],\r\n  exports: [\r\n    MaterialModule,\r\n    UserMenuComponent,\r\n    PageNotFoundComponent\r\n  ],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "UserMenuComponent"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "MaterialModule"
                        },
                        {
                            "name": "PageNotFoundComponent"
                        },
                        {
                            "name": "UserMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TasksModule",
            "id": "module-TasksModule-5f212537b39752b8b8aaff087f54fbb683400c6d4d8d3fa6c2f1f7fd5c832dfdf4bc6b442d0c7bd7782d7f596f30ab6b66f8b25102c68687bd3a56771282d907",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/tasks/tasks.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// Routes\r\nimport { tasksRoutes } from './tasks.routes';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(tasksRoutes)\r\n  ]\r\n})\r\nexport class TasksModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TimeTrackingModule",
            "id": "module-TimeTrackingModule-06357df297c4707f1ee5c2ec120a668fef44c0d222660b6985412b8586130f19cc0906f2f6e39c9dedf3853e32562f04c7c0b0de7a5fc6ab79e421800709a346",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/features/time-tracking/time-tracking.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n// Routes\r\nimport { timeTrackingRoutes } from './time-tracking.routes';\r\n\r\n@NgModule({\r\n  imports: [\r\n    RouterModule.forChild(timeTrackingRoutes)\r\n  ]\r\n})\r\nexport class TimeTrackingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(\r\n      withInterceptors([authInterceptor, loadingInterceptor, errorHandlerInterceptor])\r\n    ),\r\n    provideNativeDateAdapter(),\r\n    provideAnimations(),\r\n    provideStore({\r\n      auth: authReducer,\r\n      projects: projectsReducer,\r\n      tasks: tasksReducer,\r\n      timeTracking: timeTrackingReducer,\r\n    }),\r\n    provideEffects([AuthEffects, ProjectsEffects, TasksEffects, TimeTrackingEffects]),\r\n    provideStoreDevtools({\r\n      maxAge: 25,\r\n      logOnly: false,\r\n      autoPause: true,\r\n      trace: false,\r\n      traceLimit: 75,\r\n    }),\r\n    // Core Module\r\n    importProvidersFrom(CoreModule),\r\n    // Lucide Icons - выбираем конкретные иконки для оптимизации\r\n    importProvidersFrom(LucideAngularModule.pick({\r\n      User,\r\n      Settings,\r\n      KeyRound,\r\n      LogOut,\r\n      ChevronDown,\r\n      ChevronLeft,\r\n      ChevronRight,\r\n      Mail,\r\n      Loader2,\r\n      CheckCircle,\r\n      Camera,\r\n      Save,\r\n      RefreshCw,\r\n      AlertCircle,\r\n      Menu,\r\n      FolderOpen,\r\n      Plus,\r\n      Users,\r\n      TrendingUp,\r\n      ChartColumn,\r\n      FileText,\r\n      Target,\r\n      Play,\r\n      PartyPopper,\r\n      ClipboardList,\r\n      Eye,\r\n      EyeOff,\r\n      Palette,\r\n      Bell,\r\n      Shield,\r\n      Grid3X3,\r\n      Link,\r\n      Calendar,\r\n      Move,\r\n      Clock\r\n    })),\r\n  ],\r\n}"
            },
            {
                "name": "archiveProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Archive Project',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "archiveProjectFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Archive Project Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "archiveProjectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Archive Project Success',\r\n  props<{ project: Project }>()\r\n)"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(request, next) => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  return next(request);\n}"
            },
            {
                "name": "authReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n  \r\n  // Login\r\n  on(AuthActions.login, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.loginSuccess, (state, { user, token, refreshToken }) => ({\r\n    ...state,\r\n    user,\r\n    token,\r\n    refreshToken,\r\n    loading: false,\r\n    error: null,\r\n    isAuthenticated: true\r\n  })),\r\n  \r\n  on(AuthActions.loginFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n    isAuthenticated: false\r\n  })),\r\n  \r\n  // Register\r\n  on(AuthActions.register, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.registerSuccess, (state, { user, token, refreshToken }) => ({\r\n    ...state,\r\n    user,\r\n    token,\r\n    refreshToken,\r\n    loading: false,\r\n    error: null,\r\n    isAuthenticated: true\r\n  })),\r\n  \r\n  on(AuthActions.registerFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n    isAuthenticated: false\r\n  })),\r\n  \r\n  // Logout\r\n  on(AuthActions.logout, (state) => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  \r\n  on(AuthActions.logoutSuccess, () => ({\r\n    ...initialState\r\n  })),\r\n  \r\n  // Refresh Token\r\n  on(AuthActions.refreshToken, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.refreshTokenSuccess, (state, { token, refreshToken }) => ({\r\n    ...state,\r\n    token,\r\n    refreshToken,\r\n    loading: false,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.refreshTokenFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n    isAuthenticated: false\r\n  })),\r\n  \r\n  // Forgot Password\r\n  on(AuthActions.forgotPassword, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.forgotPasswordSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.forgotPasswordFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  \r\n  // Reset Password\r\n  on(AuthActions.resetPassword, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.resetPasswordSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.resetPasswordFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  \r\n  // Clear Error\r\n  on(AuthActions.clearAuthError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  }))\r\n)"
            },
            {
                "name": "clearAuthError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] Clear Error')"
            },
            {
                "name": "clearError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Clear Error'\r\n)"
            },
            {
                "name": "clearFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Clear Filters'\r\n)"
            },
            {
                "name": "clearFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Tasks] Clear Filters')"
            },
            {
                "name": "clearProjectsError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Projects] Clear Error')"
            },
            {
                "name": "clearTasksError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Tasks] Clear Error')"
            },
            {
                "name": "clearTimeTrackingError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Time Tracking] Clear Error')"
            },
            {
                "name": "createProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Create Project',\r\n  props<{ project: Partial<Project> }>()\r\n)"
            },
            {
                "name": "createProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Create Project',\r\n  props<{ project: Partial<Project> }>()\r\n)"
            },
            {
                "name": "createProjectFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Create Project Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "createProjectFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Create Project Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "createProjectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Create Project Success',\r\n  props<{ project: Project }>()\r\n)"
            },
            {
                "name": "createProjectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Create Project Success',\r\n  props<{ project: Project }>()\r\n)"
            },
            {
                "name": "createTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Create Task',\r\n  props<{ task: Partial<Task> }>()\r\n)"
            },
            {
                "name": "createTaskFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Create Task Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "createTaskSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Create Task Success',\r\n  props<{ task: Task }>()\r\n)"
            },
            {
                "name": "createTimeEntry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Create Time Entry',\r\n  props<{ timeEntry: Partial<TimeEntry> }>()\r\n)"
            },
            {
                "name": "createTimeEntryFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Create Time Entry Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "createTimeEntrySuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Create Time Entry Success',\r\n  props<{ timeEntry: TimeEntry }>()\r\n)"
            },
            {
                "name": "deleteProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Delete Project',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "deleteProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Delete Project',\r\n  props<{ projectId: string }>()\r\n)"
            },
            {
                "name": "deleteProjectFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Delete Project Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "deleteProjectFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Delete Project Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "deleteProjectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Delete Project Success',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "deleteProjectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Delete Project Success',\r\n  props<{ projectId: string }>()\r\n)"
            },
            {
                "name": "deleteTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Delete Task',\r\n  props<{ taskId: string }>()\r\n)"
            },
            {
                "name": "deleteTaskFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Delete Task Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "deleteTaskSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Delete Task Success',\r\n  props<{ taskId: string }>()\r\n)"
            },
            {
                "name": "deleteTimeEntry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Delete Time Entry',\r\n  props<{ timeEntryId: string }>()\r\n)"
            },
            {
                "name": "deleteTimeEntryFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Delete Time Entry Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "deleteTimeEntrySuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Delete Time Entry Success',\r\n  props<{ timeEntryId: string }>()\r\n)"
            },
            {
                "name": "deselectAllProjectsAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Deselect All Projects'\r\n)"
            },
            {
                "name": "deselectProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Deselect Project',\r\n  props<{ projectId: string }>()\r\n)"
            },
            {
                "name": "duplicateProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Duplicate Project',\r\n  props<{ id: string }>()\r\n)"
            },
            {
                "name": "duplicateProjectFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Duplicate Project Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "duplicateProjectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Duplicate Project Success',\r\n  props<{ project: Project }>()\r\n)"
            },
            {
                "name": "errorHandlerInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/error-handler.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(\r\n  req: HttpRequest<unknown>,\r\n  next: HttpHandlerFn\r\n): Observable<HttpEvent<unknown>> => {\r\n  const notificationService = inject(NotificationService);\r\n\r\n  return next(req).pipe(\r\n    // Заменяем retryWhen на retry с delayWhen для экспоненциальной задержки\r\n    retry({\r\n      count: 3,\r\n      delay: (error: HttpErrorResponse, retryCount: number) => {\r\n        // Не повторяем для определенных ошибок\r\n        if (shouldNotRetry(error, retryCount)) {\r\n          return throwError(() => error);\r\n        }\r\n\r\n        // Экспоненциальная задержка: 1s, 2s, 4s, 8s...\r\n        const delayMs = Math.min(1000 * Math.pow(2, retryCount), 10000);\r\n\r\n        console.warn(`Retry attempt ${retryCount + 1} for ${req.url} after ${delayMs}ms`);\r\n\r\n        return timer(delayMs);\r\n      }\r\n    }),\r\n    catchError((error: HttpErrorResponse) => {\r\n      const apiError = createApiError(error, req);\r\n\r\n      // Логируем ошибку для разработчиков\r\n      console.error('API Error:', apiError);\r\n\r\n      // Показываем уведомление только для критичных ошибок (0, 5xx)\r\n      // Для 4xx ошибок уведомления будут показываться в effects\r\n      if (error.status === 0 || (error.status >= 500)) {\r\n        notificationService.error('Ошибка сервера', apiError.message);\r\n      }\r\n\r\n      return throwError(() => apiError);\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "errorInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/error.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(request, next) => {\n  return next(request).pipe(\n    catchError(error => {\n      console.error('HTTP Error:', error);\n      return throwError(() => error);\n    })\n  );\n}"
            },
            {
                "name": "forgotPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Forgot Password',\r\n  props<{ email: string }>()\r\n)"
            },
            {
                "name": "forgotPasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Forgot Password Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "forgotPasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Forgot Password Success',\r\n  props<{ message: string }>()\r\n)"
            },
            {
                "name": "initialFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TaskFilters",
                "defaultValue": "{\n  status: 'all',\n  priority: 'all',\n  assignee: 'all',\n  project: 'all'\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthState",
                "defaultValue": "{\r\n  user: null,\r\n  token: null,\r\n  refreshToken: null,\r\n  loading: false,\r\n  error: null,\r\n  isAuthenticated: false\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ProjectListState",
                "defaultValue": "{\r\n  projects: [],\r\n  loading: false,\r\n  error: null,\r\n  filters: {\r\n    searchTerm: '',\r\n    status: 'all',\r\n    ownerId: null,\r\n    dateRange: {\r\n      start: null,\r\n      end: null\r\n    }\r\n  },\r\n  sort: {\r\n    field: 'createdAt',\r\n    direction: 'desc'\r\n  },\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 12,\r\n    total: 0,\r\n    hasMore: true\r\n  },\r\n  selectedProjectIds: []\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ProjectsState",
                "defaultValue": "{\r\n  entities: {},\r\n  ids: [],\r\n  loading: false,\r\n  error: null,\r\n  selectedProjectId: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TasksState",
                "defaultValue": "{\n  entities: {},\n  ids: [],\n  loading: false,\n  error: null,\n  filters: initialFilters,\n  sortBy: 'created'\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TimeTrackingState",
                "defaultValue": "{\r\n  entities: {},\r\n  ids: [],\r\n  loading: false,\r\n  error: null,\r\n  activeTimer: null\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.state.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TimeTrackingState",
                "defaultValue": "{\r\n  entities: {},\r\n  ids: [],\r\n  loading: false,\r\n  error: null,\r\n  activeTimer: null\r\n}"
            },
            {
                "name": "loadingInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/loading.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(request, next) => {\r\n  const notificationService = inject(NotificationService);\r\n\r\n  // Показываем индикатор загрузки только для определенных запросов\r\n  // Исключаем запросы к профилю и другим критичным данным\r\n  const shouldShowLoading = !request.url.includes('/auth/refresh') &&\r\n                           !request.url.includes('/profile') &&\r\n                           !request.url.includes('/user/current');\r\n\r\n  if (shouldShowLoading) {\r\n    notificationService.info('Загрузка', 'Выполняется запрос...', 0);\r\n  }\r\n\r\n  return next(request).pipe(\r\n    finalize(() => {\r\n      // Скрываем индикатор загрузки\r\n      if (shouldShowLoading) {\r\n        notificationService.clearAll();\r\n      }\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "loadMoreProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Load More Projects'\r\n)"
            },
            {
                "name": "loadNextPage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Load Next Page'\r\n)"
            },
            {
                "name": "loadNextPageFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Load Next Page Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadNextPageSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Load Next Page Success',\r\n  props<{ response: ProjectListResponse }>()\r\n)"
            },
            {
                "name": "loadProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Load Projects',\r\n  props<{ request: ProjectListRequest }>()\r\n)"
            },
            {
                "name": "loadProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Projects] Load Projects')"
            },
            {
                "name": "loadProjectsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Load Projects Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadProjectsFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Load Projects Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadProjectsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Load Projects Success',\r\n  props<{ response: ProjectListResponse; append: boolean }>()\r\n)"
            },
            {
                "name": "loadProjectsSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Load Projects Success',\r\n  props<{ projects: Project[] }>()\r\n)"
            },
            {
                "name": "loadTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Tasks] Load Tasks')"
            },
            {
                "name": "loadTasksFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Load Tasks Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadTasksSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Load Tasks Success',\r\n  props<{ tasks: Task[] }>()\r\n)"
            },
            {
                "name": "loadTimeEntries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Time Tracking] Load Time Entries')"
            },
            {
                "name": "loadTimeEntriesFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Load Time Entries Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loadTimeEntriesSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Load Time Entries Success',\r\n  props<{ timeEntries: TimeEntry[] }>()\r\n)"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Login',\r\n  props<{ credentials: LoginRequest }>()\r\n)"
            },
            {
                "name": "loginFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Login Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Login Success',\r\n  props<{ user: User; token: string; refreshToken: string }>()\r\n)"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] Logout')"
            },
            {
                "name": "logoutSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] Logout Success')"
            },
            {
                "name": "MATERIAL_MODULES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/material.module.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  MatCardModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatCheckboxModule,\r\n  MatProgressSpinnerModule,\r\n  MatSelectModule,\r\n  MatSnackBarModule\r\n]"
            },
            {
                "name": "performProjectAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Perform Project Action',\r\n  props<{ action: ProjectAction }>()\r\n)"
            },
            {
                "name": "performProjectActionFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Perform Project Action Failure',\r\n  props<{ action: ProjectAction; error: string }>()\r\n)"
            },
            {
                "name": "performProjectActionSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Perform Project Action Success',\r\n  props<{ action: ProjectAction; result: any }>()\r\n)"
            },
            {
                "name": "prefetchNextPage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Prefetch Next Page'\r\n)"
            },
            {
                "name": "prefetchNextPageFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Prefetch Next Page Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "prefetchNextPageSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Prefetch Next Page Success',\r\n  props<{ response: ProjectListResponse }>()\r\n)"
            },
            {
                "name": "projectListReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  // Загрузка проектов\r\n  on(ProjectListActions.loadProjects, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectListActions.loadProjectsSuccess, (state, { response, append }) => ({\r\n    ...state,\r\n    projects: append ? [...state.projects, ...response.projects] : response.projects,\r\n    pagination: {\r\n      ...state.pagination,\r\n      total: response.total,\r\n      hasMore: response.hasMore\r\n    },\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectListActions.loadProjectsFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Загрузка следующей страницы\r\n  on(ProjectListActions.loadNextPage, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectListActions.loadNextPageSuccess, (state, { response }) => ({\r\n    ...state,\r\n    projects: [...state.projects, ...response.projects],\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: state.pagination.page + 1,\r\n      total: response.total,\r\n      hasMore: response.hasMore\r\n    },\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectListActions.loadNextPageFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Обновление фильтров\r\n  on(ProjectListActions.updateFilters, (state, { filters }) => ({\r\n    ...state,\r\n    filters: { ...state.filters, ...filters },\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1 // Сбрасываем на первую страницу при изменении фильтров\r\n    },\r\n    selectedProjectIds: [] // Сбрасываем выбор при изменении фильтров\r\n  })),\r\n\r\n  on(ProjectListActions.resetFilters, (state) => ({\r\n    ...state,\r\n    filters: initialState.filters,\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  // Обновление сортировки\r\n  on(ProjectListActions.updateSort, (state, { sort }) => ({\r\n    ...state,\r\n    sort,\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  on(ProjectListActions.resetSort, (state) => ({\r\n    ...state,\r\n    sort: initialState.sort,\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  // Обновление пагинации\r\n  on(ProjectListActions.updatePagination, (state, { pagination }) => ({\r\n    ...state,\r\n    pagination: { ...state.pagination, ...pagination }\r\n  })),\r\n\r\n  on(ProjectListActions.resetPagination, (state) => ({\r\n    ...state,\r\n    pagination: initialState.pagination\r\n  })),\r\n\r\n  // Выбор проектов\r\n  on(ProjectListActions.selectProject, (state, { projectId }) => ({\r\n    ...state,\r\n    selectedProjectIds: state.selectedProjectIds.includes(projectId)\r\n      ? state.selectedProjectIds\r\n      : [...state.selectedProjectIds, projectId]\r\n  })),\r\n\r\n  on(ProjectListActions.deselectProject, (state, { projectId }) => ({\r\n    ...state,\r\n    selectedProjectIds: state.selectedProjectIds.filter(id => id !== projectId)\r\n  })),\r\n\r\n  on(ProjectListActions.selectAllProjectsAction, (state) => ({\r\n    ...state,\r\n    selectedProjectIds: state.projects.map(project => project.id)\r\n  })),\r\n\r\n  on(ProjectListActions.deselectAllProjectsAction, (state) => ({\r\n    ...state,\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  on(ProjectListActions.toggleProjectSelection, (state, { projectId }) => ({\r\n    ...state,\r\n    selectedProjectIds: state.selectedProjectIds.includes(projectId)\r\n      ? state.selectedProjectIds.filter(id => id !== projectId)\r\n      : [...state.selectedProjectIds, projectId]\r\n  })),\r\n\r\n  // Создание проекта\r\n  on(ProjectListActions.createProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    projects: [project, ...state.projects],\r\n    pagination: {\r\n      ...state.pagination,\r\n      total: state.pagination.total + 1\r\n    }\r\n  })),\r\n\r\n  // Обновление проекта\r\n  on(ProjectListActions.updateProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    projects: state.projects.map(p => p.id === project.id ? project : p)\r\n  })),\r\n\r\n  // Удаление проекта\r\n  on(ProjectListActions.deleteProjectSuccess, (state, { id }) => ({\r\n    ...state,\r\n    projects: state.projects.filter(p => p.id !== id),\r\n    selectedProjectIds: state.selectedProjectIds.filter(projectId => projectId !== id),\r\n    pagination: {\r\n      ...state.pagination,\r\n      total: Math.max(0, state.pagination.total - 1)\r\n    }\r\n  })),\r\n\r\n  // Архивирование проекта\r\n  on(ProjectListActions.archiveProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    projects: state.projects.map(p => p.id === project.id ? project : p)\r\n  })),\r\n\r\n  // Дублирование проекта\r\n  on(ProjectListActions.duplicateProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    projects: [project, ...state.projects],\r\n    pagination: {\r\n      ...state.pagination,\r\n      total: state.pagination.total + 1\r\n    }\r\n  })),\r\n\r\n  // Установка состояния загрузки\r\n  on(ProjectListActions.setLoading, (state, { loading }) => ({\r\n    ...state,\r\n    loading\r\n  })),\r\n\r\n  // Очистка ошибок\r\n  on(ProjectListActions.clearError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  })),\r\n\r\n  // Сброс состояния\r\n  on(ProjectListActions.resetProjectList, () => initialState),\r\n\r\n  // Обновление поиска\r\n  on(ProjectListActions.updateSearchTerm, (state, { searchTerm }) => ({\r\n    ...state,\r\n    filters: {\r\n      ...state.filters,\r\n      searchTerm\r\n    },\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  // Обновление фильтра статуса\r\n  on(ProjectListActions.updateStatusFilter, (state, { status }) => ({\r\n    ...state,\r\n    filters: {\r\n      ...state.filters,\r\n      status: status as ProjectStatus | 'all'\r\n    },\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  // Обновление диапазона дат\r\n  on(ProjectListActions.updateDateRange, (state, { start, end }) => ({\r\n    ...state,\r\n    filters: {\r\n      ...state.filters,\r\n      dateRange: { start, end }\r\n    },\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  }))\r\n)"
            },
            {
                "name": "projectsReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  // Load Projects\r\n  on(ProjectsActions.loadProjects, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.loadProjectsSuccess, (state, { projects }) => {\r\n    const entities = projects.reduce((acc, project) => ({\r\n      ...acc,\r\n      [project.id]: project\r\n    }), {});\r\n    const ids = projects.map(project => project.id);\r\n\r\n    return {\r\n      ...state,\r\n      entities,\r\n      ids,\r\n      loading: false,\r\n      error: null\r\n    };\r\n  }),\r\n\r\n  on(ProjectsActions.loadProjectsFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Create Project\r\n  on(ProjectsActions.createProject, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.createProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    entities: {\r\n      ...state.entities,\r\n      [project.id]: project\r\n    },\r\n    ids: [...state.ids, project.id],\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.createProjectFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Update Project\r\n  on(ProjectsActions.updateProject, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.updateProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    entities: {\r\n      ...state.entities,\r\n      [project.id]: project\r\n    },\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.updateProjectFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Delete Project\r\n  on(ProjectsActions.deleteProject, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.deleteProjectSuccess, (state, { projectId }) => {\r\n    const entities = { ...state.entities };\r\n    delete entities[projectId];\r\n    const ids = state.ids.filter(id => id !== projectId);\r\n\r\n    return {\r\n      ...state,\r\n      entities,\r\n      ids,\r\n      loading: false,\r\n      error: null\r\n    };\r\n  }),\r\n\r\n  on(ProjectsActions.deleteProjectFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Select Project\r\n  on(ProjectsActions.selectProject, (state, { projectId }) => ({\r\n    ...state,\r\n    selectedProjectId: projectId\r\n  })),\r\n\r\n  // Clear Error\r\n  on(ProjectsActions.clearProjectsError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  }))\r\n)"
            },
            {
                "name": "refreshProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Refresh Projects'\r\n)"
            },
            {
                "name": "refreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] Refresh Token')"
            },
            {
                "name": "refreshTokenFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Refresh Token Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "refreshTokenSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Refresh Token Success',\r\n  props<{ token: string; refreshToken: string }>()\r\n)"
            },
            {
                "name": "register",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Register',\r\n  props<{ userData: RegisterRequest }>()\r\n)"
            },
            {
                "name": "registerFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Register Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "registerSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Register Success',\r\n  props<{ user: User; token: string; refreshToken: string }>()\r\n)"
            },
            {
                "name": "resetFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Reset Filters'\r\n)"
            },
            {
                "name": "resetPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Reset Pagination'\r\n)"
            },
            {
                "name": "resetPassword",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Reset Password',\r\n  props<{ token: string; password: string }>()\r\n)"
            },
            {
                "name": "resetPasswordFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Reset Password Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "resetPasswordSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Auth] Reset Password Success',\r\n  props<{ message: string }>()\r\n)"
            },
            {
                "name": "resetProjectList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Reset State'\r\n)"
            },
            {
                "name": "resetSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Reset Sort'\r\n)"
            },
            {
                "name": "selectActiveFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListFilters,\r\n  (filters) => {\r\n    const activeFilters: string[] = [];\r\n\r\n    if (filters.searchTerm) {\r\n      activeFilters.push(`Поиск: \"${filters.searchTerm}\"`);\r\n    }\r\n\r\n    if (filters.status && filters.status !== 'all') {\r\n      activeFilters.push(`Статус: ${filters.status}`);\r\n    }\r\n\r\n    if (filters.dateRange.start || filters.dateRange.end) {\r\n      const dateRange = [];\r\n      if (filters.dateRange.start) {\r\n        dateRange.push(`с ${filters.dateRange.start.toLocaleDateString()}`);\r\n      }\r\n      if (filters.dateRange.end) {\r\n        dateRange.push(`по ${filters.dateRange.end.toLocaleDateString()}`);\r\n      }\r\n      activeFilters.push(`Дата: ${dateRange.join(' ')}`);\r\n    }\r\n\r\n    return activeFilters;\r\n  }\r\n)"
            },
            {
                "name": "selectActiveTaskId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectActiveTimer,\n  (activeTimer) => activeTimer?.taskId ?? null\n)"
            },
            {
                "name": "selectActiveTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectActiveTimer,\n  (activeTimer) => {\n    if (!activeTimer) return 0;\n    const now = new Date();\n    const startTime = new Date(activeTimer.startTime);\n    return Math.floor((now.getTime() - startTime.getTime()) / 1000 / 60); // в минутах\n  }\n)"
            },
            {
                "name": "selectActiveTimer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.activeTimer\n)"
            },
            {
                "name": "selectAllProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.projects\r\n)"
            },
            {
                "name": "selectAllProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.ids.map(id => state.entities[id]).filter(Boolean)\n)"
            },
            {
                "name": "selectAllProjectsAction",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Select All Projects'\r\n)"
            },
            {
                "name": "selectAllTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.ids.map(id => state.entities[id]).filter(Boolean)\n)"
            },
            {
                "name": "selectAllTimeEntries",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.ids.map(id => state.entities[id]).filter(Boolean)\n)"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AuthState>('auth')"
            },
            {
                "name": "selectCurrentPage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  (pagination) => pagination.page\r\n)"
            },
            {
                "name": "selectDateRangeFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListFilters,\r\n  (filters) => filters.dateRange\r\n)"
            },
            {
                "name": "selectError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.error\n)"
            },
            {
                "name": "selectErrorMessage",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListError,\r\n  (error) => error\r\n)"
            },
            {
                "name": "selectFilteredProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectProjectListFilters,\r\n  (projects: Project[], filters) => {\r\n    return projects.filter(project => {\r\n      // Фильтр по поисковому запросу\r\n      if (filters.searchTerm) {\r\n        const searchLower = filters.searchTerm.toLowerCase();\r\n        const matchesSearch =\r\n          project.name.toLowerCase().includes(searchLower) ||\r\n          project.description.toLowerCase().includes(searchLower);\r\n\r\n        if (!matchesSearch) return false;\r\n      }\r\n\r\n      // Фильтр по статусу\r\n      if (filters.status && filters.status !== 'all') {\r\n        const projectStatus = project.status ?? 'active';\r\n        if (projectStatus !== filters.status) return false;\r\n      }\r\n\r\n      // Фильтр по дате\r\n      if (filters.dateRange.start || filters.dateRange.end) {\r\n        const projectDate = new Date(project.createdAt);\r\n\r\n        if (filters.dateRange.start && projectDate < filters.dateRange.start) {\r\n          return false;\r\n        }\r\n\r\n        if (filters.dateRange.end && projectDate > filters.dateRange.end) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n)"
            },
            {
                "name": "selectFilteredTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllTasks,\n  selectTasksFilters,\n  (tasks, filters) => {\n    return tasks.filter(task => {\n      if (filters.status !== 'all' && task.status !== filters.status) {\n        return false;\n      }\n      if (filters.priority !== 'all' && task.priority !== filters.priority) {\n        return false;\n      }\n      if (filters.assignee !== 'all' && task.assigneeId !== filters.assignee) {\n        return false;\n      }\n      if (filters.project !== 'all' && task.projectId !== filters.project) {\n        return false;\n      }\n      return true;\n    });\n  }\n)"
            },
            {
                "name": "selectHasActiveFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectActiveFilters,\r\n  (activeFilters) => activeFilters.length > 0\r\n)"
            },
            {
                "name": "selectHasError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListError,\r\n  (error) => error !== null\r\n)"
            },
            {
                "name": "selectHasMoreProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  (pagination) => pagination.hasMore\r\n)"
            },
            {
                "name": "selectIsAllSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectSelectedProjectIds,\r\n  (projects: Project[], selectedIds: string[]) => {\r\n    if (projects.length === 0) return false;\r\n    return projects.every(project => selectedIds.includes(project.id));\r\n  }\r\n)"
            },
            {
                "name": "selectIsAuthenticated",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.isAuthenticated\n)"
            },
            {
                "name": "selectIsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.loading\n)"
            },
            {
                "name": "selectIsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListLoading,\r\n  (loading) => loading\r\n)"
            },
            {
                "name": "selectIsPartiallySelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectSelectedProjectIds,\r\n  (projects: Project[], selectedIds: string[]) => {\r\n    if (projects.length === 0 || selectedIds.length === 0) return false;\r\n    return selectedIds.length > 0 && selectedIds.length < projects.length;\r\n  }\r\n)"
            },
            {
                "name": "selectIsTimerActive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectActiveTimer,\n  (activeTimer) => activeTimer !== null\n)"
            },
            {
                "name": "selectPageSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  (pagination) => pagination.pageSize\r\n)"
            },
            {
                "name": "selectPaginationInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  selectProjectsCount,\r\n  (pagination, currentCount) => ({\r\n    currentPage: pagination.page,\r\n    pageSize: pagination.pageSize,\r\n    total: pagination.total,\r\n    hasMore: pagination.hasMore,\r\n    currentCount,\r\n    totalPages: Math.ceil(pagination.total / pagination.pageSize)\r\n  })\r\n)"
            },
            {
                "name": "selectProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Select Project',\r\n  props<{ projectId: string }>()\r\n)"
            },
            {
                "name": "selectProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Select Project',\r\n  props<{ projectId: string }>()\r\n)"
            },
            {
                "name": "selectProjectById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(projectId: string) => createSelector(\r\n  selectAllProjects,\r\n  (projects: Project[]) => projects.find(project => project.id === projectId)\r\n)"
            },
            {
                "name": "selectProjectById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(projectId: string) => createSelector(\n  selectProjectsEntities,\n  (entities) => entities[projectId] || null\n)"
            },
            {
                "name": "selectProjectListError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.error\r\n)"
            },
            {
                "name": "selectProjectListFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.filters\r\n)"
            },
            {
                "name": "selectProjectListLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.loading\r\n)"
            },
            {
                "name": "selectProjectListPagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.pagination\r\n)"
            },
            {
                "name": "selectProjectListSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.sort\r\n)"
            },
            {
                "name": "selectProjectListState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ProjectListState>('projectList')"
            },
            {
                "name": "selectProjectsByMember",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(memberId: string) => createSelector(\n  selectAllProjects,\n  (projects) => projects.filter(project =>\n    project.ownerId === memberId || project.members.includes(memberId)\n  )\n)"
            },
            {
                "name": "selectProjectsByOwner",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(ownerId: string) => createSelector(\n  selectAllProjects,\n  (projects) => projects.filter(project => project.ownerId === ownerId)\n)"
            },
            {
                "name": "selectProjectsByStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  (projects: Project[]) => {\r\n    const grouped: { [key: string]: Project[] } = {\r\n      active: [],\r\n      archived: [],\r\n      completed: [],\r\n      'on-hold': []\r\n    };\r\n\r\n    projects.forEach(project => {\r\n      const status = project.status ?? 'active';\r\n      if (grouped[status]) {\r\n        grouped[status].push(project);\r\n      } else {\r\n        grouped['active'].push(project);\r\n      }\r\n    });\r\n\r\n    return grouped;\r\n  }\r\n)"
            },
            {
                "name": "selectProjectsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  (projects: Project[]) => projects.length\r\n)"
            },
            {
                "name": "selectProjectsEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.entities\n)"
            },
            {
                "name": "selectProjectsError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.error\n)"
            },
            {
                "name": "selectProjectsIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.ids\n)"
            },
            {
                "name": "selectProjectsLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.loading\n)"
            },
            {
                "name": "selectProjectsState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<ProjectsState>('projects')"
            },
            {
                "name": "selectProjectsStats",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  (projects: Project[]) => {\r\n    const stats = {\r\n      total: projects.length,\r\n      active: 0,\r\n      archived: 0,\r\n      completed: 0,\r\n      onHold: 0\r\n    };\r\n\r\n    projects.forEach(project => {\r\n      const status = project.status ?? 'active';\r\n      switch (status) {\r\n        case 'active':\r\n          stats.active++;\r\n          break;\r\n        case 'archived':\r\n          stats.archived++;\r\n          break;\r\n        case 'completed':\r\n          stats.completed++;\r\n          break;\r\n        case 'on-hold':\r\n          stats.onHold++;\r\n          break;\r\n        default:\r\n          stats.active++;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  }\r\n)"
            },
            {
                "name": "selectProjectsWithSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectSelectedProjectIds,\r\n  (projects: Project[], selectedIds: string[]) =>\r\n    projects.map(project => ({\r\n      project,\r\n      isSelected: selectedIds.includes(project.id),\r\n      isHovered: false\r\n    }))\r\n)"
            },
            {
                "name": "selectRefreshToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.refreshToken\n)"
            },
            {
                "name": "selectSearchTerm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListFilters,\r\n  (filters) => filters.searchTerm\r\n)"
            },
            {
                "name": "selectSelectedProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProjectsEntities,\n  selectSelectedProjectId,\n  (entities, selectedId) => selectedId ? entities[selectedId] : null\n)"
            },
            {
                "name": "selectSelectedProjectId",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.selectedProjectId\n)"
            },
            {
                "name": "selectSelectedProjectIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.selectedProjectIds\r\n)"
            },
            {
                "name": "selectSelectedProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectSelectedProjectIds,\r\n  (projects: Project[], selectedIds: string[]) =>\r\n    projects.filter(project => selectedIds.includes(project.id))\r\n)"
            },
            {
                "name": "selectSelectedProjectsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectSelectedProjectIds,\r\n  (selectedIds: string[]) => selectedIds.length\r\n)"
            },
            {
                "name": "selectSortDirection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListSort,\r\n  (sort) => sort.direction\r\n)"
            },
            {
                "name": "selectSortedProjects",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectFilteredProjects,\r\n  selectProjectListSort,\r\n  (projects: Project[], sort) => {\r\n    return [...projects].sort((a, b) => {\r\n      // Безопасное получение значений с проверкой типов\r\n      const getValue = (project: Project, field: string): unknown => {\r\n        switch (field) {\r\n          case 'name':\r\n            return project.name;\r\n          case 'description':\r\n            return project.description;\r\n          case 'status':\r\n            return project.status;\r\n          case 'createdAt':\r\n            return project.createdAt;\r\n          case 'updatedAt':\r\n            return project.updatedAt;\r\n          case 'id':\r\n            return project.id;\r\n          default:\r\n            return null;\r\n        }\r\n      };\r\n\r\n      let aValue = getValue(a, sort.field);\r\n      let bValue = getValue(b, sort.field);\r\n\r\n      // Обработка null/undefined значений\r\n      aValue ??= '';\r\n      bValue ??= '';\r\n\r\n      // Обработка дат\r\n      if (sort.field === 'createdAt' || sort.field === 'updatedAt') {\r\n        aValue = new Date(aValue as string | number | Date).getTime();\r\n        bValue = new Date(bValue as string | number | Date).getTime();\r\n      }\r\n\r\n      // Обработка строк\r\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n        aValue = aValue.toLowerCase();\r\n        bValue = bValue.toLowerCase();\r\n      }\r\n\r\n      // Сравнение значений\r\n      if ((aValue as string | number) < (bValue as string | number)) {\r\n        return sort.direction === 'asc' ? -1 : 1;\r\n      }\r\n      if ((aValue as string | number) > (bValue as string | number)) {\r\n        return sort.direction === 'asc' ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n)"
            },
            {
                "name": "selectSortedTasks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectFilteredTasks,\n  selectTasksSortBy,\n  (tasks, sortBy) => {\n    return [...tasks].sort((a, b) => {\n      switch (sortBy) {\n        case 'created':\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        case 'updated':\n          return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n        case 'priority': {\n          const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };\n          return priorityOrder[b.priority] - priorityOrder[a.priority];\n        }\n        case 'dueDate':\n          if (!a.dueDate && !b.dueDate) return 0;\n          if (!a.dueDate) return 1;\n          if (!b.dueDate) return -1;\n          return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();\n        case 'title':\n          return a.title.localeCompare(b.title);\n        default:\n          return 0;\n      }\n    });\n  }\n)"
            },
            {
                "name": "selectSortField",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListSort,\r\n  (sort) => sort.field\r\n)"
            },
            {
                "name": "selectStatusFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListFilters,\r\n  (filters) => filters.status\r\n)"
            },
            {
                "name": "selectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.error // Временно используем error для success\n)"
            },
            {
                "name": "selectTasksByAssignee",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(assigneeId: string) => createSelector(\n  selectAllTasks,\n  (tasks) => tasks.filter(task => task.assigneeId === assigneeId)\n)"
            },
            {
                "name": "selectTasksByProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(projectId: string) => createSelector(\n  selectAllTasks,\n  (tasks) => tasks.filter(task => task.projectId === projectId)\n)"
            },
            {
                "name": "selectTasksByStatus",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(status: string) => createSelector(\n  selectAllTasks,\n  (tasks) => tasks.filter(task => task.status === status)\n)"
            },
            {
                "name": "selectTasksEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.entities\n)"
            },
            {
                "name": "selectTasksError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.error\n)"
            },
            {
                "name": "selectTasksFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.filters\n)"
            },
            {
                "name": "selectTasksIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.ids\n)"
            },
            {
                "name": "selectTasksLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.loading\n)"
            },
            {
                "name": "selectTasksSortBy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.sortBy\n)"
            },
            {
                "name": "selectTasksState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TasksState>('tasks')"
            },
            {
                "name": "selectTasksStats",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllTasks,\n  (tasks) => ({\n    total: tasks.length,\n    backlog: tasks.filter(t => t.status === 'backlog').length,\n    inProgress: tasks.filter(t => t.status === 'in-progress').length,\n    done: tasks.filter(t => t.status === 'done').length,\n    urgent: tasks.filter(t => t.priority === 'urgent').length,\n    high: tasks.filter(t => t.priority === 'high').length,\n    medium: tasks.filter(t => t.priority === 'medium').length,\n    low: tasks.filter(t => t.priority === 'low').length,\n  })\n)"
            },
            {
                "name": "selectTimeEntriesByTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(taskId: string) => createSelector(\n  selectAllTimeEntries,\n  (timeEntries) => timeEntries.filter(entry => entry.taskId === taskId)\n)"
            },
            {
                "name": "selectTimeEntriesByUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(userId: string) => createSelector(\n  selectAllTimeEntries,\n  (timeEntries) => timeEntries.filter(entry => entry.userId === userId)\n)"
            },
            {
                "name": "selectTimeEntriesEntities",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.entities\n)"
            },
            {
                "name": "selectTimeEntriesIds",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.ids\n)"
            },
            {
                "name": "selectTimeTrackingError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.error\n)"
            },
            {
                "name": "selectTimeTrackingLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.loading\n)"
            },
            {
                "name": "selectTimeTrackingState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<TimeTrackingState>('timeTracking')"
            },
            {
                "name": "selectTimeTrackingStats",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAllTimeEntries,\n  (timeEntries) => {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const startOfWeek = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n\n    return {\n      total: timeEntries.reduce((sum, entry) => sum + entry.duration, 0),\n      today: timeEntries\n        .filter(entry => new Date(entry.startTime) >= startOfDay)\n        .reduce((sum, entry) => sum + entry.duration, 0),\n      thisWeek: timeEntries\n        .filter(entry => new Date(entry.startTime) >= startOfWeek)\n        .reduce((sum, entry) => sum + entry.duration, 0),\n      thisMonth: timeEntries\n        .filter(entry => new Date(entry.startTime) >= startOfMonth)\n        .reduce((sum, entry) => sum + entry.duration, 0),\n      totalEntries: timeEntries.length\n    };\n  }\n)"
            },
            {
                "name": "selectToken",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.token\n)"
            },
            {
                "name": "selectTotalProjectsCount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  (pagination) => pagination.total\r\n)"
            },
            {
                "name": "selectTotalTimeByTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(taskId: string) => createSelector(\n  selectTimeEntriesByTask(taskId),\n  (timeEntries) => timeEntries.reduce((total, entry) => total + entry.duration, 0)\n)"
            },
            {
                "name": "selectTotalTimeByUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(userId: string) => createSelector(\n  selectTimeEntriesByUser(userId),\n  (timeEntries) => timeEntries.reduce((total, entry) => total + entry.duration, 0)\n)"
            },
            {
                "name": "selectUser",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.user\n)"
            },
            {
                "name": "selectUserEmail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectUser,\n  (user) => user?.email\n)"
            },
            {
                "name": "selectUsername",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectUser,\n  (user) => user?.username\n)"
            },
            {
                "name": "selectUserRole",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/auth/store/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectUser,\n  (user) => user?.role\n)"
            },
            {
                "name": "setLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Set Loading',\r\n  props<{ loading: boolean }>()\r\n)"
            },
            {
                "name": "startTimer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Start Timer',\r\n  props<{ taskId: string }>()\r\n)"
            },
            {
                "name": "stopTimer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Time Tracking] Stop Timer')"
            },
            {
                "name": "tasksReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n\n  // Load Tasks\n  on(TasksActions.loadTasks, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n\n  on(TasksActions.loadTasksSuccess, (state, { tasks }) => {\n    const entities = tasks.reduce((acc, task) => ({\n      ...acc,\n      [task.id]: task\n    }), {});\n    const ids = tasks.map(task => task.id);\n\n    return {\n      ...state,\n      entities,\n      ids,\n      loading: false,\n      error: null\n    };\n  }),\n\n  on(TasksActions.loadTasksFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  })),\n\n  // Create Task\n  on(TasksActions.createTask, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n\n  on(TasksActions.createTaskSuccess, (state, { task }) => ({\n    ...state,\n    entities: {\n      ...state.entities,\n      [task.id]: task\n    },\n    ids: [...state.ids, task.id],\n    loading: false,\n    error: null\n  })),\n\n  on(TasksActions.createTaskFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  })),\n\n  // Update Task\n  on(TasksActions.updateTask, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n\n  on(TasksActions.updateTaskSuccess, (state, { task }) => ({\n    ...state,\n    entities: {\n      ...state.entities,\n      [task.id]: task\n    },\n    loading: false,\n    error: null\n  })),\n\n  on(TasksActions.updateTaskFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  })),\n\n  // Delete Task\n  on(TasksActions.deleteTask, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n\n  on(TasksActions.deleteTaskSuccess, (state, { taskId }) => {\n    const entities = { ...state.entities };\n    delete entities[taskId];\n    const ids = state.ids.filter(id => id !== taskId);\n\n    return {\n      ...state,\n      entities,\n      ids,\n      loading: false,\n      error: null\n    };\n  }),\n\n  on(TasksActions.deleteTaskFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  })),\n\n  // Update Filters\n  on(TasksActions.updateFilters, (state, { filters }) => ({\n    ...state,\n    filters: { ...state.filters, ...filters }\n  })),\n\n  // Update Sort\n  on(TasksActions.updateSort, (state, { sortBy }) => ({\n    ...state,\n    sortBy\n  })),\n\n  // Clear Filters\n  on(TasksActions.clearFilters, (state) => ({\n    ...state,\n    filters: initialFilters\n  })),\n\n  // Clear Error\n  on(TasksActions.clearTasksError, (state) => ({\n    ...state,\n    error: null\n  }))\n)"
            },
            {
                "name": "timeTrackingReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  // Load Time Entries\r\n  on(TimeTrackingActions.loadTimeEntries, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.loadTimeEntriesSuccess, (state, { timeEntries }) => {\r\n    const entities = timeEntries.reduce((acc, entry) => ({\r\n      ...acc,\r\n      [entry.id]: entry\r\n    }), {});\r\n    const ids = timeEntries.map(entry => entry.id);\r\n\r\n    return {\r\n      ...state,\r\n      entities,\r\n      ids,\r\n      loading: false,\r\n      error: null\r\n    };\r\n  }),\r\n\r\n  on(TimeTrackingActions.loadTimeEntriesFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Start Timer\r\n  on(TimeTrackingActions.startTimer, (state, { taskId }) => ({\r\n    ...state,\r\n    activeTimer: {\r\n      taskId,\r\n      startTime: new Date()\r\n    }\r\n  })),\r\n\r\n  // Stop Timer\r\n  on(TimeTrackingActions.stopTimer, (state) => ({\r\n    ...state,\r\n    activeTimer: null\r\n  })),\r\n\r\n  // Create Time Entry\r\n  on(TimeTrackingActions.createTimeEntry, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.createTimeEntrySuccess, (state, { timeEntry }) => ({\r\n    ...state,\r\n    entities: {\r\n      ...state.entities,\r\n      [timeEntry.id]: timeEntry\r\n    },\r\n    ids: [...state.ids, timeEntry.id],\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.createTimeEntryFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Update Time Entry\r\n  on(TimeTrackingActions.updateTimeEntry, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.updateTimeEntrySuccess, (state, { timeEntry }) => ({\r\n    ...state,\r\n    entities: {\r\n      ...state.entities,\r\n      [timeEntry.id]: timeEntry\r\n    },\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.updateTimeEntryFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Delete Time Entry\r\n  on(TimeTrackingActions.deleteTimeEntry, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.deleteTimeEntrySuccess, (state, { timeEntryId }) => {\r\n    const entities = { ...state.entities };\r\n    delete entities[timeEntryId];\r\n    const ids = state.ids.filter(id => id !== timeEntryId);\r\n\r\n    return {\r\n      ...state,\r\n      entities,\r\n      ids,\r\n      loading: false,\r\n      error: null\r\n    };\r\n  }),\r\n\r\n  on(TimeTrackingActions.deleteTimeEntryFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Clear Error\r\n  on(TimeTrackingActions.clearTimeTrackingError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  }))\r\n)"
            },
            {
                "name": "toggleProjectSelection",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Toggle Project Selection',\r\n  props<{ projectId: string }>()\r\n)"
            },
            {
                "name": "updateDateRange",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Date Range',\r\n  props<{ start: Date | null; end: Date | null }>()\r\n)"
            },
            {
                "name": "updateFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Filters',\r\n  props<{ filters: Partial<ProjectFilters> }>()\r\n)"
            },
            {
                "name": "updateFilters",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Update Filters',\r\n  props<{ filters: Partial<TaskFilters> }>()\r\n)"
            },
            {
                "name": "updatePagination",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Pagination',\r\n  props<{ pagination: Partial<ProjectPagination> }>()\r\n)"
            },
            {
                "name": "updateProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Project',\r\n  props<{ id: string; project: Partial<Project> }>()\r\n)"
            },
            {
                "name": "updateProject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Update Project',\r\n  props<{ project: Partial<Project> & { id: string } }>()\r\n)"
            },
            {
                "name": "updateProjectFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Project Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "updateProjectFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Update Project Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "updateProjectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Project Success',\r\n  props<{ project: Project }>()\r\n)"
            },
            {
                "name": "updateProjectSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/projects.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Projects] Update Project Success',\r\n  props<{ project: Project }>()\r\n)"
            },
            {
                "name": "updateSearchTerm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Search Term',\r\n  props<{ searchTerm: string }>()\r\n)"
            },
            {
                "name": "updateSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Sort',\r\n  props<{ sort: ProjectSort }>()\r\n)"
            },
            {
                "name": "updateSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Update Sort',\r\n  props<{ sortBy: TaskSortOption }>()\r\n)"
            },
            {
                "name": "updateStatusFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/projects/store/project-list.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Project List] Update Status Filter',\r\n  props<{ status: string }>()\r\n)"
            },
            {
                "name": "updateTask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Update Task',\r\n  props<{ task: Partial<Task> & { id: string } }>()\r\n)"
            },
            {
                "name": "updateTaskFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Update Task Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "updateTaskSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/tasks/store/tasks.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Tasks] Update Task Success',\r\n  props<{ task: Task }>()\r\n)"
            },
            {
                "name": "updateTimeEntry",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Update Time Entry',\r\n  props<{ timeEntry: Partial<TimeEntry> & { id: string } }>()\r\n)"
            },
            {
                "name": "updateTimeEntryFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Update Time Entry Failure',\r\n  props<{ error: string }>()\r\n)"
            },
            {
                "name": "updateTimeEntrySuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\r\n  '[Time Tracking] Update Time Entry Success',\r\n  props<{ timeEntry: TimeEntry }>()\r\n)"
            }
        ],
        "functions": [
            {
                "name": "createApiError",
                "file": "src/app/core/interceptors/error-handler.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "HttpErrorResponse",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "request",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ApiError",
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "HttpErrorResponse",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "request",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getUserFriendlyMessage",
                "file": "src/app/core/interceptors/error-handler.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "HttpErrorResponse",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "HttpErrorResponse",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "shouldNotRetry",
                "file": "src/app/core/interceptors/error-handler.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "error",
                        "type": "HttpErrorResponse",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "attemptIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "error",
                        "type": "HttpErrorResponse",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "attemptIndex",
                        "type": "number",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "ProjectStatus",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"active\" | \"archived\" | \"completed\" | \"on-hold\"",
                "file": "src/app/features/projects/models/project-list.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "TaskSortOption",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"created\" | \"updated\" | \"priority\" | \"dueDate\" | \"title\"",
                "file": "src/app/core/models/task.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideBrowserGlobalErrorListeners(),\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(\r\n      withInterceptors([authInterceptor, loadingInterceptor, errorHandlerInterceptor])\r\n    ),\r\n    provideNativeDateAdapter(),\r\n    provideAnimations(),\r\n    provideStore({\r\n      auth: authReducer,\r\n      projects: projectsReducer,\r\n      tasks: tasksReducer,\r\n      timeTracking: timeTrackingReducer,\r\n    }),\r\n    provideEffects([AuthEffects, ProjectsEffects, TasksEffects, TimeTrackingEffects]),\r\n    provideStoreDevtools({\r\n      maxAge: 25,\r\n      logOnly: false,\r\n      autoPause: true,\r\n      trace: false,\r\n      traceLimit: 75,\r\n    }),\r\n    // Core Module\r\n    importProvidersFrom(CoreModule),\r\n    // Lucide Icons - выбираем конкретные иконки для оптимизации\r\n    importProvidersFrom(LucideAngularModule.pick({\r\n      User,\r\n      Settings,\r\n      KeyRound,\r\n      LogOut,\r\n      ChevronDown,\r\n      ChevronLeft,\r\n      ChevronRight,\r\n      Mail,\r\n      Loader2,\r\n      CheckCircle,\r\n      Camera,\r\n      Save,\r\n      RefreshCw,\r\n      AlertCircle,\r\n      Menu,\r\n      FolderOpen,\r\n      Plus,\r\n      Users,\r\n      TrendingUp,\r\n      ChartColumn,\r\n      FileText,\r\n      Target,\r\n      Play,\r\n      PartyPopper,\r\n      ClipboardList,\r\n      Eye,\r\n      EyeOff,\r\n      Palette,\r\n      Bell,\r\n      Shield,\r\n      Grid3X3,\r\n      Link,\r\n      Calendar,\r\n      Move,\r\n      Clock\r\n    })),\r\n  ],\r\n}"
                }
            ],
            "src/app/features/projects/store/project-list.actions.ts": [
                {
                    "name": "archiveProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Archive Project',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "archiveProjectFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Archive Project Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "archiveProjectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Archive Project Success',\r\n  props<{ project: Project }>()\r\n)"
                },
                {
                    "name": "clearError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Clear Error'\r\n)"
                },
                {
                    "name": "clearFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Clear Filters'\r\n)"
                },
                {
                    "name": "createProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Create Project',\r\n  props<{ project: Partial<Project> }>()\r\n)"
                },
                {
                    "name": "createProjectFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Create Project Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "createProjectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Create Project Success',\r\n  props<{ project: Project }>()\r\n)"
                },
                {
                    "name": "deleteProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Delete Project',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "deleteProjectFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Delete Project Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "deleteProjectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Delete Project Success',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "deselectAllProjectsAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Deselect All Projects'\r\n)"
                },
                {
                    "name": "deselectProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Deselect Project',\r\n  props<{ projectId: string }>()\r\n)"
                },
                {
                    "name": "duplicateProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Duplicate Project',\r\n  props<{ id: string }>()\r\n)"
                },
                {
                    "name": "duplicateProjectFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Duplicate Project Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "duplicateProjectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Duplicate Project Success',\r\n  props<{ project: Project }>()\r\n)"
                },
                {
                    "name": "loadMoreProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Load More Projects'\r\n)"
                },
                {
                    "name": "loadNextPage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Load Next Page'\r\n)"
                },
                {
                    "name": "loadNextPageFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Load Next Page Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadNextPageSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Load Next Page Success',\r\n  props<{ response: ProjectListResponse }>()\r\n)"
                },
                {
                    "name": "loadProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Load Projects',\r\n  props<{ request: ProjectListRequest }>()\r\n)"
                },
                {
                    "name": "loadProjectsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Load Projects Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadProjectsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Load Projects Success',\r\n  props<{ response: ProjectListResponse; append: boolean }>()\r\n)"
                },
                {
                    "name": "performProjectAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Perform Project Action',\r\n  props<{ action: ProjectAction }>()\r\n)"
                },
                {
                    "name": "performProjectActionFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Perform Project Action Failure',\r\n  props<{ action: ProjectAction; error: string }>()\r\n)"
                },
                {
                    "name": "performProjectActionSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Perform Project Action Success',\r\n  props<{ action: ProjectAction; result: any }>()\r\n)"
                },
                {
                    "name": "prefetchNextPage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Prefetch Next Page'\r\n)"
                },
                {
                    "name": "prefetchNextPageFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Prefetch Next Page Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "prefetchNextPageSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Prefetch Next Page Success',\r\n  props<{ response: ProjectListResponse }>()\r\n)"
                },
                {
                    "name": "refreshProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Refresh Projects'\r\n)"
                },
                {
                    "name": "resetFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Reset Filters'\r\n)"
                },
                {
                    "name": "resetPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Reset Pagination'\r\n)"
                },
                {
                    "name": "resetProjectList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Reset State'\r\n)"
                },
                {
                    "name": "resetSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Reset Sort'\r\n)"
                },
                {
                    "name": "selectAllProjectsAction",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Select All Projects'\r\n)"
                },
                {
                    "name": "selectProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Select Project',\r\n  props<{ projectId: string }>()\r\n)"
                },
                {
                    "name": "setLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Set Loading',\r\n  props<{ loading: boolean }>()\r\n)"
                },
                {
                    "name": "toggleProjectSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Toggle Project Selection',\r\n  props<{ projectId: string }>()\r\n)"
                },
                {
                    "name": "updateDateRange",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Date Range',\r\n  props<{ start: Date | null; end: Date | null }>()\r\n)"
                },
                {
                    "name": "updateFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Filters',\r\n  props<{ filters: Partial<ProjectFilters> }>()\r\n)"
                },
                {
                    "name": "updatePagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Pagination',\r\n  props<{ pagination: Partial<ProjectPagination> }>()\r\n)"
                },
                {
                    "name": "updateProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Project',\r\n  props<{ id: string; project: Partial<Project> }>()\r\n)"
                },
                {
                    "name": "updateProjectFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Project Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "updateProjectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Project Success',\r\n  props<{ project: Project }>()\r\n)"
                },
                {
                    "name": "updateSearchTerm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Search Term',\r\n  props<{ searchTerm: string }>()\r\n)"
                },
                {
                    "name": "updateSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Sort',\r\n  props<{ sort: ProjectSort }>()\r\n)"
                },
                {
                    "name": "updateStatusFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Project List] Update Status Filter',\r\n  props<{ status: string }>()\r\n)"
                }
            ],
            "src/app/core/interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(request, next) => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    request = request.clone({\n      setHeaders: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  }\n\n  return next(request);\n}"
                }
            ],
            "src/app/features/auth/store/auth.reducer.ts": [
                {
                    "name": "authReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n  \r\n  // Login\r\n  on(AuthActions.login, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.loginSuccess, (state, { user, token, refreshToken }) => ({\r\n    ...state,\r\n    user,\r\n    token,\r\n    refreshToken,\r\n    loading: false,\r\n    error: null,\r\n    isAuthenticated: true\r\n  })),\r\n  \r\n  on(AuthActions.loginFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n    isAuthenticated: false\r\n  })),\r\n  \r\n  // Register\r\n  on(AuthActions.register, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.registerSuccess, (state, { user, token, refreshToken }) => ({\r\n    ...state,\r\n    user,\r\n    token,\r\n    refreshToken,\r\n    loading: false,\r\n    error: null,\r\n    isAuthenticated: true\r\n  })),\r\n  \r\n  on(AuthActions.registerFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n    isAuthenticated: false\r\n  })),\r\n  \r\n  // Logout\r\n  on(AuthActions.logout, (state) => ({\r\n    ...state,\r\n    loading: true\r\n  })),\r\n  \r\n  on(AuthActions.logoutSuccess, () => ({\r\n    ...initialState\r\n  })),\r\n  \r\n  // Refresh Token\r\n  on(AuthActions.refreshToken, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.refreshTokenSuccess, (state, { token, refreshToken }) => ({\r\n    ...state,\r\n    token,\r\n    refreshToken,\r\n    loading: false,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.refreshTokenFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error,\r\n    isAuthenticated: false\r\n  })),\r\n  \r\n  // Forgot Password\r\n  on(AuthActions.forgotPassword, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.forgotPasswordSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.forgotPasswordFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  \r\n  // Reset Password\r\n  on(AuthActions.resetPassword, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.resetPasswordSuccess, (state) => ({\r\n    ...state,\r\n    loading: false,\r\n    error: null\r\n  })),\r\n  \r\n  on(AuthActions.resetPasswordFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n  \r\n  // Clear Error\r\n  on(AuthActions.clearAuthError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  }))\r\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "defaultValue": "{\r\n  user: null,\r\n  token: null,\r\n  refreshToken: null,\r\n  loading: false,\r\n  error: null,\r\n  isAuthenticated: false\r\n}"
                }
            ],
            "src/app/features/auth/store/auth.actions.ts": [
                {
                    "name": "clearAuthError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Clear Error')"
                },
                {
                    "name": "forgotPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Forgot Password',\r\n  props<{ email: string }>()\r\n)"
                },
                {
                    "name": "forgotPasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Forgot Password Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "forgotPasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Forgot Password Success',\r\n  props<{ message: string }>()\r\n)"
                },
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Login',\r\n  props<{ credentials: LoginRequest }>()\r\n)"
                },
                {
                    "name": "loginFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Login Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Login Success',\r\n  props<{ user: User; token: string; refreshToken: string }>()\r\n)"
                },
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Logout')"
                },
                {
                    "name": "logoutSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Logout Success')"
                },
                {
                    "name": "refreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] Refresh Token')"
                },
                {
                    "name": "refreshTokenFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Refresh Token Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "refreshTokenSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Refresh Token Success',\r\n  props<{ token: string; refreshToken: string }>()\r\n)"
                },
                {
                    "name": "register",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Register',\r\n  props<{ userData: RegisterRequest }>()\r\n)"
                },
                {
                    "name": "registerFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Register Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "registerSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Register Success',\r\n  props<{ user: User; token: string; refreshToken: string }>()\r\n)"
                },
                {
                    "name": "resetPassword",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Reset Password',\r\n  props<{ token: string; password: string }>()\r\n)"
                },
                {
                    "name": "resetPasswordFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Reset Password Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "resetPasswordSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Auth] Reset Password Success',\r\n  props<{ message: string }>()\r\n)"
                }
            ],
            "src/app/features/tasks/store/tasks.actions.ts": [
                {
                    "name": "clearFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Tasks] Clear Filters')"
                },
                {
                    "name": "clearTasksError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Tasks] Clear Error')"
                },
                {
                    "name": "createTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Create Task',\r\n  props<{ task: Partial<Task> }>()\r\n)"
                },
                {
                    "name": "createTaskFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Create Task Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "createTaskSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Create Task Success',\r\n  props<{ task: Task }>()\r\n)"
                },
                {
                    "name": "deleteTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Delete Task',\r\n  props<{ taskId: string }>()\r\n)"
                },
                {
                    "name": "deleteTaskFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Delete Task Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "deleteTaskSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Delete Task Success',\r\n  props<{ taskId: string }>()\r\n)"
                },
                {
                    "name": "loadTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Tasks] Load Tasks')"
                },
                {
                    "name": "loadTasksFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Load Tasks Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadTasksSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Load Tasks Success',\r\n  props<{ tasks: Task[] }>()\r\n)"
                },
                {
                    "name": "updateFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Update Filters',\r\n  props<{ filters: Partial<TaskFilters> }>()\r\n)"
                },
                {
                    "name": "updateSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Update Sort',\r\n  props<{ sortBy: TaskSortOption }>()\r\n)"
                },
                {
                    "name": "updateTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Update Task',\r\n  props<{ task: Partial<Task> & { id: string } }>()\r\n)"
                },
                {
                    "name": "updateTaskFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Update Task Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "updateTaskSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Tasks] Update Task Success',\r\n  props<{ task: Task }>()\r\n)"
                }
            ],
            "src/app/features/projects/store/projects.actions.ts": [
                {
                    "name": "clearProjectsError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Projects] Clear Error')"
                },
                {
                    "name": "createProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Create Project',\r\n  props<{ project: Partial<Project> }>()\r\n)"
                },
                {
                    "name": "createProjectFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Create Project Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "createProjectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Create Project Success',\r\n  props<{ project: Project }>()\r\n)"
                },
                {
                    "name": "deleteProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Delete Project',\r\n  props<{ projectId: string }>()\r\n)"
                },
                {
                    "name": "deleteProjectFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Delete Project Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "deleteProjectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Delete Project Success',\r\n  props<{ projectId: string }>()\r\n)"
                },
                {
                    "name": "loadProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Projects] Load Projects')"
                },
                {
                    "name": "loadProjectsFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Load Projects Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadProjectsSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Load Projects Success',\r\n  props<{ projects: Project[] }>()\r\n)"
                },
                {
                    "name": "selectProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Select Project',\r\n  props<{ projectId: string }>()\r\n)"
                },
                {
                    "name": "updateProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Update Project',\r\n  props<{ project: Partial<Project> & { id: string } }>()\r\n)"
                },
                {
                    "name": "updateProjectFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Update Project Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "updateProjectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Projects] Update Project Success',\r\n  props<{ project: Project }>()\r\n)"
                }
            ],
            "src/app/features/time-tracking/store/time-tracking.actions.ts": [
                {
                    "name": "clearTimeTrackingError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Time Tracking] Clear Error')"
                },
                {
                    "name": "createTimeEntry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Create Time Entry',\r\n  props<{ timeEntry: Partial<TimeEntry> }>()\r\n)"
                },
                {
                    "name": "createTimeEntryFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Create Time Entry Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "createTimeEntrySuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Create Time Entry Success',\r\n  props<{ timeEntry: TimeEntry }>()\r\n)"
                },
                {
                    "name": "deleteTimeEntry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Delete Time Entry',\r\n  props<{ timeEntryId: string }>()\r\n)"
                },
                {
                    "name": "deleteTimeEntryFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Delete Time Entry Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "deleteTimeEntrySuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Delete Time Entry Success',\r\n  props<{ timeEntryId: string }>()\r\n)"
                },
                {
                    "name": "loadTimeEntries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Time Tracking] Load Time Entries')"
                },
                {
                    "name": "loadTimeEntriesFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Load Time Entries Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "loadTimeEntriesSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Load Time Entries Success',\r\n  props<{ timeEntries: TimeEntry[] }>()\r\n)"
                },
                {
                    "name": "startTimer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Start Timer',\r\n  props<{ taskId: string }>()\r\n)"
                },
                {
                    "name": "stopTimer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Time Tracking] Stop Timer')"
                },
                {
                    "name": "updateTimeEntry",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Update Time Entry',\r\n  props<{ timeEntry: Partial<TimeEntry> & { id: string } }>()\r\n)"
                },
                {
                    "name": "updateTimeEntryFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Update Time Entry Failure',\r\n  props<{ error: string }>()\r\n)"
                },
                {
                    "name": "updateTimeEntrySuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\r\n  '[Time Tracking] Update Time Entry Success',\r\n  props<{ timeEntry: TimeEntry }>()\r\n)"
                }
            ],
            "src/app/core/interceptors/error-handler.interceptor.ts": [
                {
                    "name": "errorHandlerInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/error-handler.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(\r\n  req: HttpRequest<unknown>,\r\n  next: HttpHandlerFn\r\n): Observable<HttpEvent<unknown>> => {\r\n  const notificationService = inject(NotificationService);\r\n\r\n  return next(req).pipe(\r\n    // Заменяем retryWhen на retry с delayWhen для экспоненциальной задержки\r\n    retry({\r\n      count: 3,\r\n      delay: (error: HttpErrorResponse, retryCount: number) => {\r\n        // Не повторяем для определенных ошибок\r\n        if (shouldNotRetry(error, retryCount)) {\r\n          return throwError(() => error);\r\n        }\r\n\r\n        // Экспоненциальная задержка: 1s, 2s, 4s, 8s...\r\n        const delayMs = Math.min(1000 * Math.pow(2, retryCount), 10000);\r\n\r\n        console.warn(`Retry attempt ${retryCount + 1} for ${req.url} after ${delayMs}ms`);\r\n\r\n        return timer(delayMs);\r\n      }\r\n    }),\r\n    catchError((error: HttpErrorResponse) => {\r\n      const apiError = createApiError(error, req);\r\n\r\n      // Логируем ошибку для разработчиков\r\n      console.error('API Error:', apiError);\r\n\r\n      // Показываем уведомление только для критичных ошибок (0, 5xx)\r\n      // Для 4xx ошибок уведомления будут показываться в effects\r\n      if (error.status === 0 || (error.status >= 500)) {\r\n        notificationService.error('Ошибка сервера', apiError.message);\r\n      }\r\n\r\n      return throwError(() => apiError);\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/core/interceptors/error.interceptor.ts": [
                {
                    "name": "errorInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/error.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(request, next) => {\n  return next(request).pipe(\n    catchError(error => {\n      console.error('HTTP Error:', error);\n      return throwError(() => error);\n    })\n  );\n}"
                }
            ],
            "src/app/features/tasks/store/tasks.reducer.ts": [
                {
                    "name": "initialFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TaskFilters",
                    "defaultValue": "{\n  status: 'all',\n  priority: 'all',\n  assignee: 'all',\n  project: 'all'\n}"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TasksState",
                    "defaultValue": "{\n  entities: {},\n  ids: [],\n  loading: false,\n  error: null,\n  filters: initialFilters,\n  sortBy: 'created'\n}"
                },
                {
                    "name": "tasksReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n\n  // Load Tasks\n  on(TasksActions.loadTasks, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n\n  on(TasksActions.loadTasksSuccess, (state, { tasks }) => {\n    const entities = tasks.reduce((acc, task) => ({\n      ...acc,\n      [task.id]: task\n    }), {});\n    const ids = tasks.map(task => task.id);\n\n    return {\n      ...state,\n      entities,\n      ids,\n      loading: false,\n      error: null\n    };\n  }),\n\n  on(TasksActions.loadTasksFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  })),\n\n  // Create Task\n  on(TasksActions.createTask, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n\n  on(TasksActions.createTaskSuccess, (state, { task }) => ({\n    ...state,\n    entities: {\n      ...state.entities,\n      [task.id]: task\n    },\n    ids: [...state.ids, task.id],\n    loading: false,\n    error: null\n  })),\n\n  on(TasksActions.createTaskFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  })),\n\n  // Update Task\n  on(TasksActions.updateTask, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n\n  on(TasksActions.updateTaskSuccess, (state, { task }) => ({\n    ...state,\n    entities: {\n      ...state.entities,\n      [task.id]: task\n    },\n    loading: false,\n    error: null\n  })),\n\n  on(TasksActions.updateTaskFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  })),\n\n  // Delete Task\n  on(TasksActions.deleteTask, (state) => ({\n    ...state,\n    loading: true,\n    error: null\n  })),\n\n  on(TasksActions.deleteTaskSuccess, (state, { taskId }) => {\n    const entities = { ...state.entities };\n    delete entities[taskId];\n    const ids = state.ids.filter(id => id !== taskId);\n\n    return {\n      ...state,\n      entities,\n      ids,\n      loading: false,\n      error: null\n    };\n  }),\n\n  on(TasksActions.deleteTaskFailure, (state, { error }) => ({\n    ...state,\n    loading: false,\n    error\n  })),\n\n  // Update Filters\n  on(TasksActions.updateFilters, (state, { filters }) => ({\n    ...state,\n    filters: { ...state.filters, ...filters }\n  })),\n\n  // Update Sort\n  on(TasksActions.updateSort, (state, { sortBy }) => ({\n    ...state,\n    sortBy\n  })),\n\n  // Clear Filters\n  on(TasksActions.clearFilters, (state) => ({\n    ...state,\n    filters: initialFilters\n  })),\n\n  // Clear Error\n  on(TasksActions.clearTasksError, (state) => ({\n    ...state,\n    error: null\n  }))\n)"
                }
            ],
            "src/app/features/projects/store/project-list.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectListState",
                    "defaultValue": "{\r\n  projects: [],\r\n  loading: false,\r\n  error: null,\r\n  filters: {\r\n    searchTerm: '',\r\n    status: 'all',\r\n    ownerId: null,\r\n    dateRange: {\r\n      start: null,\r\n      end: null\r\n    }\r\n  },\r\n  sort: {\r\n    field: 'createdAt',\r\n    direction: 'desc'\r\n  },\r\n  pagination: {\r\n    page: 1,\r\n    pageSize: 12,\r\n    total: 0,\r\n    hasMore: true\r\n  },\r\n  selectedProjectIds: []\r\n}"
                },
                {
                    "name": "projectListReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  // Загрузка проектов\r\n  on(ProjectListActions.loadProjects, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectListActions.loadProjectsSuccess, (state, { response, append }) => ({\r\n    ...state,\r\n    projects: append ? [...state.projects, ...response.projects] : response.projects,\r\n    pagination: {\r\n      ...state.pagination,\r\n      total: response.total,\r\n      hasMore: response.hasMore\r\n    },\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectListActions.loadProjectsFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Загрузка следующей страницы\r\n  on(ProjectListActions.loadNextPage, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectListActions.loadNextPageSuccess, (state, { response }) => ({\r\n    ...state,\r\n    projects: [...state.projects, ...response.projects],\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: state.pagination.page + 1,\r\n      total: response.total,\r\n      hasMore: response.hasMore\r\n    },\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectListActions.loadNextPageFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Обновление фильтров\r\n  on(ProjectListActions.updateFilters, (state, { filters }) => ({\r\n    ...state,\r\n    filters: { ...state.filters, ...filters },\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1 // Сбрасываем на первую страницу при изменении фильтров\r\n    },\r\n    selectedProjectIds: [] // Сбрасываем выбор при изменении фильтров\r\n  })),\r\n\r\n  on(ProjectListActions.resetFilters, (state) => ({\r\n    ...state,\r\n    filters: initialState.filters,\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  // Обновление сортировки\r\n  on(ProjectListActions.updateSort, (state, { sort }) => ({\r\n    ...state,\r\n    sort,\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  on(ProjectListActions.resetSort, (state) => ({\r\n    ...state,\r\n    sort: initialState.sort,\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  // Обновление пагинации\r\n  on(ProjectListActions.updatePagination, (state, { pagination }) => ({\r\n    ...state,\r\n    pagination: { ...state.pagination, ...pagination }\r\n  })),\r\n\r\n  on(ProjectListActions.resetPagination, (state) => ({\r\n    ...state,\r\n    pagination: initialState.pagination\r\n  })),\r\n\r\n  // Выбор проектов\r\n  on(ProjectListActions.selectProject, (state, { projectId }) => ({\r\n    ...state,\r\n    selectedProjectIds: state.selectedProjectIds.includes(projectId)\r\n      ? state.selectedProjectIds\r\n      : [...state.selectedProjectIds, projectId]\r\n  })),\r\n\r\n  on(ProjectListActions.deselectProject, (state, { projectId }) => ({\r\n    ...state,\r\n    selectedProjectIds: state.selectedProjectIds.filter(id => id !== projectId)\r\n  })),\r\n\r\n  on(ProjectListActions.selectAllProjectsAction, (state) => ({\r\n    ...state,\r\n    selectedProjectIds: state.projects.map(project => project.id)\r\n  })),\r\n\r\n  on(ProjectListActions.deselectAllProjectsAction, (state) => ({\r\n    ...state,\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  on(ProjectListActions.toggleProjectSelection, (state, { projectId }) => ({\r\n    ...state,\r\n    selectedProjectIds: state.selectedProjectIds.includes(projectId)\r\n      ? state.selectedProjectIds.filter(id => id !== projectId)\r\n      : [...state.selectedProjectIds, projectId]\r\n  })),\r\n\r\n  // Создание проекта\r\n  on(ProjectListActions.createProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    projects: [project, ...state.projects],\r\n    pagination: {\r\n      ...state.pagination,\r\n      total: state.pagination.total + 1\r\n    }\r\n  })),\r\n\r\n  // Обновление проекта\r\n  on(ProjectListActions.updateProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    projects: state.projects.map(p => p.id === project.id ? project : p)\r\n  })),\r\n\r\n  // Удаление проекта\r\n  on(ProjectListActions.deleteProjectSuccess, (state, { id }) => ({\r\n    ...state,\r\n    projects: state.projects.filter(p => p.id !== id),\r\n    selectedProjectIds: state.selectedProjectIds.filter(projectId => projectId !== id),\r\n    pagination: {\r\n      ...state.pagination,\r\n      total: Math.max(0, state.pagination.total - 1)\r\n    }\r\n  })),\r\n\r\n  // Архивирование проекта\r\n  on(ProjectListActions.archiveProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    projects: state.projects.map(p => p.id === project.id ? project : p)\r\n  })),\r\n\r\n  // Дублирование проекта\r\n  on(ProjectListActions.duplicateProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    projects: [project, ...state.projects],\r\n    pagination: {\r\n      ...state.pagination,\r\n      total: state.pagination.total + 1\r\n    }\r\n  })),\r\n\r\n  // Установка состояния загрузки\r\n  on(ProjectListActions.setLoading, (state, { loading }) => ({\r\n    ...state,\r\n    loading\r\n  })),\r\n\r\n  // Очистка ошибок\r\n  on(ProjectListActions.clearError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  })),\r\n\r\n  // Сброс состояния\r\n  on(ProjectListActions.resetProjectList, () => initialState),\r\n\r\n  // Обновление поиска\r\n  on(ProjectListActions.updateSearchTerm, (state, { searchTerm }) => ({\r\n    ...state,\r\n    filters: {\r\n      ...state.filters,\r\n      searchTerm\r\n    },\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  // Обновление фильтра статуса\r\n  on(ProjectListActions.updateStatusFilter, (state, { status }) => ({\r\n    ...state,\r\n    filters: {\r\n      ...state.filters,\r\n      status: status as ProjectStatus | 'all'\r\n    },\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  })),\r\n\r\n  // Обновление диапазона дат\r\n  on(ProjectListActions.updateDateRange, (state, { start, end }) => ({\r\n    ...state,\r\n    filters: {\r\n      ...state.filters,\r\n      dateRange: { start, end }\r\n    },\r\n    pagination: {\r\n      ...state.pagination,\r\n      page: 1\r\n    },\r\n    selectedProjectIds: []\r\n  }))\r\n)"
                }
            ],
            "src/app/features/projects/store/projects.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ProjectsState",
                    "defaultValue": "{\r\n  entities: {},\r\n  ids: [],\r\n  loading: false,\r\n  error: null,\r\n  selectedProjectId: null\r\n}"
                },
                {
                    "name": "projectsReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  // Load Projects\r\n  on(ProjectsActions.loadProjects, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.loadProjectsSuccess, (state, { projects }) => {\r\n    const entities = projects.reduce((acc, project) => ({\r\n      ...acc,\r\n      [project.id]: project\r\n    }), {});\r\n    const ids = projects.map(project => project.id);\r\n\r\n    return {\r\n      ...state,\r\n      entities,\r\n      ids,\r\n      loading: false,\r\n      error: null\r\n    };\r\n  }),\r\n\r\n  on(ProjectsActions.loadProjectsFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Create Project\r\n  on(ProjectsActions.createProject, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.createProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    entities: {\r\n      ...state.entities,\r\n      [project.id]: project\r\n    },\r\n    ids: [...state.ids, project.id],\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.createProjectFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Update Project\r\n  on(ProjectsActions.updateProject, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.updateProjectSuccess, (state, { project }) => ({\r\n    ...state,\r\n    entities: {\r\n      ...state.entities,\r\n      [project.id]: project\r\n    },\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.updateProjectFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Delete Project\r\n  on(ProjectsActions.deleteProject, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(ProjectsActions.deleteProjectSuccess, (state, { projectId }) => {\r\n    const entities = { ...state.entities };\r\n    delete entities[projectId];\r\n    const ids = state.ids.filter(id => id !== projectId);\r\n\r\n    return {\r\n      ...state,\r\n      entities,\r\n      ids,\r\n      loading: false,\r\n      error: null\r\n    };\r\n  }),\r\n\r\n  on(ProjectsActions.deleteProjectFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Select Project\r\n  on(ProjectsActions.selectProject, (state, { projectId }) => ({\r\n    ...state,\r\n    selectedProjectId: projectId\r\n  })),\r\n\r\n  // Clear Error\r\n  on(ProjectsActions.clearProjectsError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  }))\r\n)"
                }
            ],
            "src/app/features/time-tracking/store/time-tracking.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeTrackingState",
                    "defaultValue": "{\r\n  entities: {},\r\n  ids: [],\r\n  loading: false,\r\n  error: null,\r\n  activeTimer: null\r\n}"
                },
                {
                    "name": "timeTrackingReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialState,\r\n\r\n  // Load Time Entries\r\n  on(TimeTrackingActions.loadTimeEntries, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.loadTimeEntriesSuccess, (state, { timeEntries }) => {\r\n    const entities = timeEntries.reduce((acc, entry) => ({\r\n      ...acc,\r\n      [entry.id]: entry\r\n    }), {});\r\n    const ids = timeEntries.map(entry => entry.id);\r\n\r\n    return {\r\n      ...state,\r\n      entities,\r\n      ids,\r\n      loading: false,\r\n      error: null\r\n    };\r\n  }),\r\n\r\n  on(TimeTrackingActions.loadTimeEntriesFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Start Timer\r\n  on(TimeTrackingActions.startTimer, (state, { taskId }) => ({\r\n    ...state,\r\n    activeTimer: {\r\n      taskId,\r\n      startTime: new Date()\r\n    }\r\n  })),\r\n\r\n  // Stop Timer\r\n  on(TimeTrackingActions.stopTimer, (state) => ({\r\n    ...state,\r\n    activeTimer: null\r\n  })),\r\n\r\n  // Create Time Entry\r\n  on(TimeTrackingActions.createTimeEntry, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.createTimeEntrySuccess, (state, { timeEntry }) => ({\r\n    ...state,\r\n    entities: {\r\n      ...state.entities,\r\n      [timeEntry.id]: timeEntry\r\n    },\r\n    ids: [...state.ids, timeEntry.id],\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.createTimeEntryFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Update Time Entry\r\n  on(TimeTrackingActions.updateTimeEntry, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.updateTimeEntrySuccess, (state, { timeEntry }) => ({\r\n    ...state,\r\n    entities: {\r\n      ...state.entities,\r\n      [timeEntry.id]: timeEntry\r\n    },\r\n    loading: false,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.updateTimeEntryFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Delete Time Entry\r\n  on(TimeTrackingActions.deleteTimeEntry, (state) => ({\r\n    ...state,\r\n    loading: true,\r\n    error: null\r\n  })),\r\n\r\n  on(TimeTrackingActions.deleteTimeEntrySuccess, (state, { timeEntryId }) => {\r\n    const entities = { ...state.entities };\r\n    delete entities[timeEntryId];\r\n    const ids = state.ids.filter(id => id !== timeEntryId);\r\n\r\n    return {\r\n      ...state,\r\n      entities,\r\n      ids,\r\n      loading: false,\r\n      error: null\r\n    };\r\n  }),\r\n\r\n  on(TimeTrackingActions.deleteTimeEntryFailure, (state, { error }) => ({\r\n    ...state,\r\n    loading: false,\r\n    error\r\n  })),\r\n\r\n  // Clear Error\r\n  on(TimeTrackingActions.clearTimeTrackingError, (state) => ({\r\n    ...state,\r\n    error: null\r\n  }))\r\n)"
                }
            ],
            "src/app/features/time-tracking/store/time-tracking.state.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.state.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TimeTrackingState",
                    "defaultValue": "{\r\n  entities: {},\r\n  ids: [],\r\n  loading: false,\r\n  error: null,\r\n  activeTimer: null\r\n}"
                }
            ],
            "src/app/core/interceptors/loading.interceptor.ts": [
                {
                    "name": "loadingInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/loading.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(request, next) => {\r\n  const notificationService = inject(NotificationService);\r\n\r\n  // Показываем индикатор загрузки только для определенных запросов\r\n  // Исключаем запросы к профилю и другим критичным данным\r\n  const shouldShowLoading = !request.url.includes('/auth/refresh') &&\r\n                           !request.url.includes('/profile') &&\r\n                           !request.url.includes('/user/current');\r\n\r\n  if (shouldShowLoading) {\r\n    notificationService.info('Загрузка', 'Выполняется запрос...', 0);\r\n  }\r\n\r\n  return next(request).pipe(\r\n    finalize(() => {\r\n      // Скрываем индикатор загрузки\r\n      if (shouldShowLoading) {\r\n        notificationService.clearAll();\r\n      }\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/shared/material.module.ts": [
                {
                    "name": "MATERIAL_MODULES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/material.module.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  MatCardModule,\r\n  MatButtonModule,\r\n  MatIconModule,\r\n  MatFormFieldModule,\r\n  MatInputModule,\r\n  MatCheckboxModule,\r\n  MatProgressSpinnerModule,\r\n  MatSelectModule,\r\n  MatSnackBarModule\r\n]"
                }
            ],
            "src/app/features/projects/store/project-list.selectors.ts": [
                {
                    "name": "selectActiveFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListFilters,\r\n  (filters) => {\r\n    const activeFilters: string[] = [];\r\n\r\n    if (filters.searchTerm) {\r\n      activeFilters.push(`Поиск: \"${filters.searchTerm}\"`);\r\n    }\r\n\r\n    if (filters.status && filters.status !== 'all') {\r\n      activeFilters.push(`Статус: ${filters.status}`);\r\n    }\r\n\r\n    if (filters.dateRange.start || filters.dateRange.end) {\r\n      const dateRange = [];\r\n      if (filters.dateRange.start) {\r\n        dateRange.push(`с ${filters.dateRange.start.toLocaleDateString()}`);\r\n      }\r\n      if (filters.dateRange.end) {\r\n        dateRange.push(`по ${filters.dateRange.end.toLocaleDateString()}`);\r\n      }\r\n      activeFilters.push(`Дата: ${dateRange.join(' ')}`);\r\n    }\r\n\r\n    return activeFilters;\r\n  }\r\n)"
                },
                {
                    "name": "selectAllProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.projects\r\n)"
                },
                {
                    "name": "selectCurrentPage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  (pagination) => pagination.page\r\n)"
                },
                {
                    "name": "selectDateRangeFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListFilters,\r\n  (filters) => filters.dateRange\r\n)"
                },
                {
                    "name": "selectErrorMessage",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListError,\r\n  (error) => error\r\n)"
                },
                {
                    "name": "selectFilteredProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectProjectListFilters,\r\n  (projects: Project[], filters) => {\r\n    return projects.filter(project => {\r\n      // Фильтр по поисковому запросу\r\n      if (filters.searchTerm) {\r\n        const searchLower = filters.searchTerm.toLowerCase();\r\n        const matchesSearch =\r\n          project.name.toLowerCase().includes(searchLower) ||\r\n          project.description.toLowerCase().includes(searchLower);\r\n\r\n        if (!matchesSearch) return false;\r\n      }\r\n\r\n      // Фильтр по статусу\r\n      if (filters.status && filters.status !== 'all') {\r\n        const projectStatus = project.status ?? 'active';\r\n        if (projectStatus !== filters.status) return false;\r\n      }\r\n\r\n      // Фильтр по дате\r\n      if (filters.dateRange.start || filters.dateRange.end) {\r\n        const projectDate = new Date(project.createdAt);\r\n\r\n        if (filters.dateRange.start && projectDate < filters.dateRange.start) {\r\n          return false;\r\n        }\r\n\r\n        if (filters.dateRange.end && projectDate > filters.dateRange.end) {\r\n          return false;\r\n        }\r\n      }\r\n\r\n      return true;\r\n    });\r\n  }\r\n)"
                },
                {
                    "name": "selectHasActiveFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectActiveFilters,\r\n  (activeFilters) => activeFilters.length > 0\r\n)"
                },
                {
                    "name": "selectHasError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListError,\r\n  (error) => error !== null\r\n)"
                },
                {
                    "name": "selectHasMoreProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  (pagination) => pagination.hasMore\r\n)"
                },
                {
                    "name": "selectIsAllSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectSelectedProjectIds,\r\n  (projects: Project[], selectedIds: string[]) => {\r\n    if (projects.length === 0) return false;\r\n    return projects.every(project => selectedIds.includes(project.id));\r\n  }\r\n)"
                },
                {
                    "name": "selectIsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListLoading,\r\n  (loading) => loading\r\n)"
                },
                {
                    "name": "selectIsPartiallySelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectSelectedProjectIds,\r\n  (projects: Project[], selectedIds: string[]) => {\r\n    if (projects.length === 0 || selectedIds.length === 0) return false;\r\n    return selectedIds.length > 0 && selectedIds.length < projects.length;\r\n  }\r\n)"
                },
                {
                    "name": "selectPageSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  (pagination) => pagination.pageSize\r\n)"
                },
                {
                    "name": "selectPaginationInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  selectProjectsCount,\r\n  (pagination, currentCount) => ({\r\n    currentPage: pagination.page,\r\n    pageSize: pagination.pageSize,\r\n    total: pagination.total,\r\n    hasMore: pagination.hasMore,\r\n    currentCount,\r\n    totalPages: Math.ceil(pagination.total / pagination.pageSize)\r\n  })\r\n)"
                },
                {
                    "name": "selectProjectById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(projectId: string) => createSelector(\r\n  selectAllProjects,\r\n  (projects: Project[]) => projects.find(project => project.id === projectId)\r\n)"
                },
                {
                    "name": "selectProjectListError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.error\r\n)"
                },
                {
                    "name": "selectProjectListFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.filters\r\n)"
                },
                {
                    "name": "selectProjectListLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.loading\r\n)"
                },
                {
                    "name": "selectProjectListPagination",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.pagination\r\n)"
                },
                {
                    "name": "selectProjectListSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.sort\r\n)"
                },
                {
                    "name": "selectProjectListState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProjectListState>('projectList')"
                },
                {
                    "name": "selectProjectsByStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  (projects: Project[]) => {\r\n    const grouped: { [key: string]: Project[] } = {\r\n      active: [],\r\n      archived: [],\r\n      completed: [],\r\n      'on-hold': []\r\n    };\r\n\r\n    projects.forEach(project => {\r\n      const status = project.status ?? 'active';\r\n      if (grouped[status]) {\r\n        grouped[status].push(project);\r\n      } else {\r\n        grouped['active'].push(project);\r\n      }\r\n    });\r\n\r\n    return grouped;\r\n  }\r\n)"
                },
                {
                    "name": "selectProjectsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  (projects: Project[]) => projects.length\r\n)"
                },
                {
                    "name": "selectProjectsStats",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  (projects: Project[]) => {\r\n    const stats = {\r\n      total: projects.length,\r\n      active: 0,\r\n      archived: 0,\r\n      completed: 0,\r\n      onHold: 0\r\n    };\r\n\r\n    projects.forEach(project => {\r\n      const status = project.status ?? 'active';\r\n      switch (status) {\r\n        case 'active':\r\n          stats.active++;\r\n          break;\r\n        case 'archived':\r\n          stats.archived++;\r\n          break;\r\n        case 'completed':\r\n          stats.completed++;\r\n          break;\r\n        case 'on-hold':\r\n          stats.onHold++;\r\n          break;\r\n        default:\r\n          stats.active++;\r\n      }\r\n    });\r\n\r\n    return stats;\r\n  }\r\n)"
                },
                {
                    "name": "selectProjectsWithSelection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectSelectedProjectIds,\r\n  (projects: Project[], selectedIds: string[]) =>\r\n    projects.map(project => ({\r\n      project,\r\n      isSelected: selectedIds.includes(project.id),\r\n      isHovered: false\r\n    }))\r\n)"
                },
                {
                    "name": "selectSearchTerm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListFilters,\r\n  (filters) => filters.searchTerm\r\n)"
                },
                {
                    "name": "selectSelectedProjectIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListState,\r\n  (state: ProjectListState) => state.selectedProjectIds\r\n)"
                },
                {
                    "name": "selectSelectedProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllProjects,\r\n  selectSelectedProjectIds,\r\n  (projects: Project[], selectedIds: string[]) =>\r\n    projects.filter(project => selectedIds.includes(project.id))\r\n)"
                },
                {
                    "name": "selectSelectedProjectsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectSelectedProjectIds,\r\n  (selectedIds: string[]) => selectedIds.length\r\n)"
                },
                {
                    "name": "selectSortDirection",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListSort,\r\n  (sort) => sort.direction\r\n)"
                },
                {
                    "name": "selectSortedProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectFilteredProjects,\r\n  selectProjectListSort,\r\n  (projects: Project[], sort) => {\r\n    return [...projects].sort((a, b) => {\r\n      // Безопасное получение значений с проверкой типов\r\n      const getValue = (project: Project, field: string): unknown => {\r\n        switch (field) {\r\n          case 'name':\r\n            return project.name;\r\n          case 'description':\r\n            return project.description;\r\n          case 'status':\r\n            return project.status;\r\n          case 'createdAt':\r\n            return project.createdAt;\r\n          case 'updatedAt':\r\n            return project.updatedAt;\r\n          case 'id':\r\n            return project.id;\r\n          default:\r\n            return null;\r\n        }\r\n      };\r\n\r\n      let aValue = getValue(a, sort.field);\r\n      let bValue = getValue(b, sort.field);\r\n\r\n      // Обработка null/undefined значений\r\n      aValue ??= '';\r\n      bValue ??= '';\r\n\r\n      // Обработка дат\r\n      if (sort.field === 'createdAt' || sort.field === 'updatedAt') {\r\n        aValue = new Date(aValue as string | number | Date).getTime();\r\n        bValue = new Date(bValue as string | number | Date).getTime();\r\n      }\r\n\r\n      // Обработка строк\r\n      if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n        aValue = aValue.toLowerCase();\r\n        bValue = bValue.toLowerCase();\r\n      }\r\n\r\n      // Сравнение значений\r\n      if ((aValue as string | number) < (bValue as string | number)) {\r\n        return sort.direction === 'asc' ? -1 : 1;\r\n      }\r\n      if ((aValue as string | number) > (bValue as string | number)) {\r\n        return sort.direction === 'asc' ? 1 : -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n)"
                },
                {
                    "name": "selectSortField",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListSort,\r\n  (sort) => sort.field\r\n)"
                },
                {
                    "name": "selectStatusFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListFilters,\r\n  (filters) => filters.status\r\n)"
                },
                {
                    "name": "selectTotalProjectsCount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/project-list.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectProjectListPagination,\r\n  (pagination) => pagination.total\r\n)"
                }
            ],
            "src/app/features/time-tracking/store/time-tracking.selectors.ts": [
                {
                    "name": "selectActiveTaskId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectActiveTimer,\n  (activeTimer) => activeTimer?.taskId ?? null\n)"
                },
                {
                    "name": "selectActiveTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectActiveTimer,\n  (activeTimer) => {\n    if (!activeTimer) return 0;\n    const now = new Date();\n    const startTime = new Date(activeTimer.startTime);\n    return Math.floor((now.getTime() - startTime.getTime()) / 1000 / 60); // в минутах\n  }\n)"
                },
                {
                    "name": "selectActiveTimer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.activeTimer\n)"
                },
                {
                    "name": "selectAllTimeEntries",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.ids.map(id => state.entities[id]).filter(Boolean)\n)"
                },
                {
                    "name": "selectIsTimerActive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectActiveTimer,\n  (activeTimer) => activeTimer !== null\n)"
                },
                {
                    "name": "selectTimeEntriesByTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(taskId: string) => createSelector(\n  selectAllTimeEntries,\n  (timeEntries) => timeEntries.filter(entry => entry.taskId === taskId)\n)"
                },
                {
                    "name": "selectTimeEntriesByUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(userId: string) => createSelector(\n  selectAllTimeEntries,\n  (timeEntries) => timeEntries.filter(entry => entry.userId === userId)\n)"
                },
                {
                    "name": "selectTimeEntriesEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.entities\n)"
                },
                {
                    "name": "selectTimeEntriesIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.ids\n)"
                },
                {
                    "name": "selectTimeTrackingError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.error\n)"
                },
                {
                    "name": "selectTimeTrackingLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTimeTrackingState,\n  (state) => state.loading\n)"
                },
                {
                    "name": "selectTimeTrackingState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TimeTrackingState>('timeTracking')"
                },
                {
                    "name": "selectTimeTrackingStats",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllTimeEntries,\n  (timeEntries) => {\n    const today = new Date();\n    const startOfDay = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    const startOfWeek = new Date(today.getFullYear(), today.getMonth(), today.getDate() - today.getDay());\n    const startOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);\n\n    return {\n      total: timeEntries.reduce((sum, entry) => sum + entry.duration, 0),\n      today: timeEntries\n        .filter(entry => new Date(entry.startTime) >= startOfDay)\n        .reduce((sum, entry) => sum + entry.duration, 0),\n      thisWeek: timeEntries\n        .filter(entry => new Date(entry.startTime) >= startOfWeek)\n        .reduce((sum, entry) => sum + entry.duration, 0),\n      thisMonth: timeEntries\n        .filter(entry => new Date(entry.startTime) >= startOfMonth)\n        .reduce((sum, entry) => sum + entry.duration, 0),\n      totalEntries: timeEntries.length\n    };\n  }\n)"
                },
                {
                    "name": "selectTotalTimeByTask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(taskId: string) => createSelector(\n  selectTimeEntriesByTask(taskId),\n  (timeEntries) => timeEntries.reduce((total, entry) => total + entry.duration, 0)\n)"
                },
                {
                    "name": "selectTotalTimeByUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(userId: string) => createSelector(\n  selectTimeEntriesByUser(userId),\n  (timeEntries) => timeEntries.reduce((total, entry) => total + entry.duration, 0)\n)"
                }
            ],
            "src/app/features/projects/store/projects.selectors.ts": [
                {
                    "name": "selectAllProjects",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.ids.map(id => state.entities[id]).filter(Boolean)\n)"
                },
                {
                    "name": "selectProjectById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(projectId: string) => createSelector(\n  selectProjectsEntities,\n  (entities) => entities[projectId] || null\n)"
                },
                {
                    "name": "selectProjectsByMember",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(memberId: string) => createSelector(\n  selectAllProjects,\n  (projects) => projects.filter(project =>\n    project.ownerId === memberId || project.members.includes(memberId)\n  )\n)"
                },
                {
                    "name": "selectProjectsByOwner",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(ownerId: string) => createSelector(\n  selectAllProjects,\n  (projects) => projects.filter(project => project.ownerId === ownerId)\n)"
                },
                {
                    "name": "selectProjectsEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.entities\n)"
                },
                {
                    "name": "selectProjectsError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.error\n)"
                },
                {
                    "name": "selectProjectsIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.ids\n)"
                },
                {
                    "name": "selectProjectsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.loading\n)"
                },
                {
                    "name": "selectProjectsState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<ProjectsState>('projects')"
                },
                {
                    "name": "selectSelectedProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProjectsEntities,\n  selectSelectedProjectId,\n  (entities, selectedId) => selectedId ? entities[selectedId] : null\n)"
                },
                {
                    "name": "selectSelectedProjectId",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/projects/store/projects.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectProjectsState,\n  (state) => state.selectedProjectId\n)"
                }
            ],
            "src/app/features/tasks/store/tasks.selectors.ts": [
                {
                    "name": "selectAllTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.ids.map(id => state.entities[id]).filter(Boolean)\n)"
                },
                {
                    "name": "selectFilteredTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllTasks,\n  selectTasksFilters,\n  (tasks, filters) => {\n    return tasks.filter(task => {\n      if (filters.status !== 'all' && task.status !== filters.status) {\n        return false;\n      }\n      if (filters.priority !== 'all' && task.priority !== filters.priority) {\n        return false;\n      }\n      if (filters.assignee !== 'all' && task.assigneeId !== filters.assignee) {\n        return false;\n      }\n      if (filters.project !== 'all' && task.projectId !== filters.project) {\n        return false;\n      }\n      return true;\n    });\n  }\n)"
                },
                {
                    "name": "selectSortedTasks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectFilteredTasks,\n  selectTasksSortBy,\n  (tasks, sortBy) => {\n    return [...tasks].sort((a, b) => {\n      switch (sortBy) {\n        case 'created':\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        case 'updated':\n          return new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime();\n        case 'priority': {\n          const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };\n          return priorityOrder[b.priority] - priorityOrder[a.priority];\n        }\n        case 'dueDate':\n          if (!a.dueDate && !b.dueDate) return 0;\n          if (!a.dueDate) return 1;\n          if (!b.dueDate) return -1;\n          return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();\n        case 'title':\n          return a.title.localeCompare(b.title);\n        default:\n          return 0;\n      }\n    });\n  }\n)"
                },
                {
                    "name": "selectTasksByAssignee",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(assigneeId: string) => createSelector(\n  selectAllTasks,\n  (tasks) => tasks.filter(task => task.assigneeId === assigneeId)\n)"
                },
                {
                    "name": "selectTasksByProject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(projectId: string) => createSelector(\n  selectAllTasks,\n  (tasks) => tasks.filter(task => task.projectId === projectId)\n)"
                },
                {
                    "name": "selectTasksByStatus",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(status: string) => createSelector(\n  selectAllTasks,\n  (tasks) => tasks.filter(task => task.status === status)\n)"
                },
                {
                    "name": "selectTasksEntities",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.entities\n)"
                },
                {
                    "name": "selectTasksError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.error\n)"
                },
                {
                    "name": "selectTasksFilters",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.filters\n)"
                },
                {
                    "name": "selectTasksIds",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.ids\n)"
                },
                {
                    "name": "selectTasksLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.loading\n)"
                },
                {
                    "name": "selectTasksSortBy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectTasksState,\n  (state) => state.sortBy\n)"
                },
                {
                    "name": "selectTasksState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<TasksState>('tasks')"
                },
                {
                    "name": "selectTasksStats",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/tasks/store/tasks.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAllTasks,\n  (tasks) => ({\n    total: tasks.length,\n    backlog: tasks.filter(t => t.status === 'backlog').length,\n    inProgress: tasks.filter(t => t.status === 'in-progress').length,\n    done: tasks.filter(t => t.status === 'done').length,\n    urgent: tasks.filter(t => t.priority === 'urgent').length,\n    high: tasks.filter(t => t.priority === 'high').length,\n    medium: tasks.filter(t => t.priority === 'medium').length,\n    low: tasks.filter(t => t.priority === 'low').length,\n  })\n)"
                }
            ],
            "src/app/features/auth/store/auth.selectors.ts": [
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AuthState>('auth')"
                },
                {
                    "name": "selectError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.error\n)"
                },
                {
                    "name": "selectIsAuthenticated",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.isAuthenticated\n)"
                },
                {
                    "name": "selectIsLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.loading\n)"
                },
                {
                    "name": "selectRefreshToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.refreshToken\n)"
                },
                {
                    "name": "selectSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.error // Временно используем error для success\n)"
                },
                {
                    "name": "selectToken",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.token\n)"
                },
                {
                    "name": "selectUser",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.user\n)"
                },
                {
                    "name": "selectUserEmail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectUser,\n  (user) => user?.email\n)"
                },
                {
                    "name": "selectUsername",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectUser,\n  (user) => user?.username\n)"
                },
                {
                    "name": "selectUserRole",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/features/auth/store/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectUser,\n  (user) => user?.role\n)"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/interceptors/error-handler.interceptor.ts": [
                {
                    "name": "createApiError",
                    "file": "src/app/core/interceptors/error-handler.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "request",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ApiError",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "request",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUserFriendlyMessage",
                    "file": "src/app/core/interceptors/error-handler.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldNotRetry",
                    "file": "src/app/core/interceptors/error-handler.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "attemptIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "HttpErrorResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "attemptIndex",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/features/projects/models/project-list.model.ts": [
                {
                    "name": "ProjectStatus",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"active\" | \"archived\" | \"completed\" | \"on-hold\"",
                    "file": "src/app/features/projects/models/project-list.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/core/models/task.model.ts": [
                {
                    "name": "TaskSortOption",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"created\" | \"updated\" | \"priority\" | \"dueDate\" | \"title\"",
                    "file": "src/app/core/models/task.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/admin.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AdminGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/guest.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "GuestGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/role.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "RoleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error-handler.interceptor.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiError",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error-handler.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "createApiError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error-handler.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getUserFriendlyMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error-handler.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "shouldNotRetry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error-handler.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorHandlerInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/loading.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadingInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/activity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Activity",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/activity.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeEntry",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApiResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginRequest",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PaginatedResponse",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/api-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/project.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Project",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/project.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectSettings",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Subtask",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Task",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/task.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TaskFilters",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/task.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "TaskSortOption",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NotificationSettings",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserPreferences",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/api.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ApiService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 20,
                "coverageCount": "4/20",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/notification.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ErrorNotification",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/notification.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Notification",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/date.utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateUtils",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/utils/validation.utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ValidationUtils",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/analytics/components/analytics/analytics.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AnalyticsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/forgot-password/forgot-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ForgotPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearAuthError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "forgotPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "forgotPasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "forgotPasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logoutSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "register",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "registerSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPasswordFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPasswordSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsAuthenticated",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectRefreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserEmail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUsername",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectUserRole",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/store/auth.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/components/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/features/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/components/project-card/project-card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectCardComponent",
                "coveragePercent": 2,
                "coverageCount": "1/39",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/components/project-list/project-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectListComponent",
                "coveragePercent": 1,
                "coverageCount": "1/62",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/components/projects/projects.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProjectsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectAction",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectCard",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectFilters",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectListConfig",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectListRequest",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectListResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectListState",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectPagination",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectSort",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/models/project-list.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ProjectStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/services/project-list.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectListService",
                "coveragePercent": 46,
                "coverageCount": "13/28",
                "status": "medium"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "archiveProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "archiveProjectFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "archiveProjectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createProjectFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createProjectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProjectFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProjectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deselectAllProjectsAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deselectProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "duplicateProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "duplicateProjectFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "duplicateProjectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMoreProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadNextPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadNextPageFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadNextPageSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProjectsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProjectsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "performProjectAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "performProjectActionFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "performProjectActionSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefetchNextPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefetchNextPageFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "prefetchNextPageSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetProjectList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "resetSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllProjectsAction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "toggleProjectSelection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateDateRange",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updatePagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProjectFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProjectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateSearchTerm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateStatusFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectListEffects",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "projectListReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectCurrentPage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectDateRangeFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectErrorMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFilteredProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHasActiveFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHasError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHasMoreProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsAllSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsPartiallySelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPageSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPaginationInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectListError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectListFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectListLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectListPagination",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectListSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectListState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsByStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsStats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsWithSelection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSearchTerm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedProjectIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedProjectsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSortDirection",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSortedProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSortField",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectStatusFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/project-list.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTotalProjectsCount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearProjectsError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createProjectFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createProjectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProjectFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteProjectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProjectsFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadProjectsSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProjectFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateProjectSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProjectsEffects",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "projectsReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllProjects",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsByMember",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsByOwner",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectProjectsState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedProjectId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/projects/store/projects.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProjectsState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/advanced-settings/advanced-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AdvancedSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/appearance-settings/appearance-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppearanceSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/integrations-settings/integrations-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "IntegrationsSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/notification-settings/notification-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/security-settings/security-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SecuritySettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/settings/settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/settings/settings.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsTab",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/user-profile-settings/user-profile-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserProfileSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/42",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/components/workspace-settings/workspace-settings.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WorkspaceSettingsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileFormData",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileValidationErrors",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateAvatarRequest",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UpdateProfileRequest",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/models/user-profile.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "UserProfile",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/services/profile.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ProfileService",
                "coveragePercent": 45,
                "coverageCount": "10/22",
                "status": "medium"
            },
            {
                "filePath": "src/app/features/settings/services/profile.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ProfileState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/services/settings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/utils/date.utils.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DateUtils",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/settings/validators/profile.validators.ts",
                "type": "class",
                "linktype": "classe",
                "name": "ProfileValidators",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/components/tasks/tasks.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TasksComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearTasksError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTaskFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTaskSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTaskFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTaskSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTasksFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTasksSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTaskFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTaskSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TasksEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "tasksReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectFilteredTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSortedTasks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksByAssignee",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksByProject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksByStatus",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksFilters",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksSortBy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTasksStats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/tasks/store/tasks.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TasksState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/components/time-tracking/time-tracking.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimeTrackingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearTimeTrackingError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTimeEntry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTimeEntryFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "createTimeEntrySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTimeEntry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTimeEntryFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "deleteTimeEntrySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTimeEntries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTimeEntriesFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadTimeEntriesSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "startTimer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "stopTimer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTimeEntry",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTimeEntryFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "updateTimeEntrySuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TimeTrackingEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "timeTrackingReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveTaskId",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveTimer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllTimeEntries",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsTimerActive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTimeEntriesByTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTimeEntriesByUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTimeEntriesEntities",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTimeEntriesIds",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTimeTrackingError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTimeTrackingLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTimeTrackingState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTimeTrackingStats",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTotalTimeByTask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTotalTimeByUser",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimeTrackingState",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/features/time-tracking/store/time-tracking.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/layout/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/layout/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/notification-toast/notification-toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotificationToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/user-menu/user-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/material.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MATERIAL_MODULES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}