#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const glob = require('glob');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  srcDir: 'client/src/app',
  maxRelativePathDepth: 3,
  forbiddenPatterns: [
    /\.\.\/\.\.\/\.\.\/\.\.\//, // ../../../
    /\.\.\/\.\.\/\.\.\//, // ../../
  ],
  barrelExports: {
    '@models': 'client/src/app/core/models/index.ts',
    '@services': 'client/src/app/core/services/index.ts',
    '@utils': 'client/src/app/core/utils/index.ts'
  },
  // –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
  excludedImports: [
    '@angular/core',
    '@angular/router',
    '@angular/common',
    '@angular/forms',
    '@angular/material',
    '@ngrx/store',
    '@ngrx/effects',
    '@ngrx/entity',
    'rxjs',
    'rxjs/operators'
  ]
};

// –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
function checkRelativePathDepth(importPath) {
  const depth = (importPath.match(/\.\.\//g) || []).length;
  return depth <= CONFIG.maxRelativePathDepth;
}

function checkForbiddenPatterns(importPath) {
  return !CONFIG.forbiddenPatterns.some(pattern => pattern.test(importPath));
}

function findDuplicateImports(files) {
  const imports = new Map();
  const duplicates = [];

  files.forEach(file => {
    const content = fs.readFileSync(file, 'utf8');
    const importMatches = content.match(/import.*from\s+['"]([^'"]+)['"]/g);

    if (importMatches) {
      importMatches.forEach(match => {
        const importPath = match.match(/from\s+['"]([^'"]+)['"]/)[1];

        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        if (CONFIG.excludedImports.some(excluded => importPath.startsWith(excluded))) {
          return;
        }

        if (!imports.has(importPath)) {
          imports.set(importPath, []);
        }
        imports.get(importPath).push(file);
      });
    }
  });

  imports.forEach((files, importPath) => {
    if (files.length > 1) {
      duplicates.push({ importPath, files });
    }
  });

  return duplicates;
}

function checkBarrelExports() {
  const issues = [];

  Object.entries(CONFIG.barrelExports).forEach(([alias, barrelPath]) => {
    if (!fs.existsSync(barrelPath)) {
      issues.push(`Missing barrel export: ${barrelPath}`);
    }
  });

  return issues;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ Angular –ø—Ä–æ–µ–∫—Ç–µ...\n');

  const tsFiles = glob.sync(`${CONFIG.srcDir}/**/*.ts`, { ignore: ['**/*.spec.ts'] });
  let hasIssues = false;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
  console.log('üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π:');
  tsFiles.forEach(file => {
    const content = fs.readFileSync(file, 'utf8');
    const importMatches = content.match(/import.*from\s+['"]([^'"]+)['"]/g);

    if (importMatches) {
      importMatches.forEach(match => {
        const importPath = match.match(/from\s+['"]([^'"]+)['"]/)[1];

        if (importPath.startsWith('.')) {
          if (!checkRelativePathDepth(importPath)) {
            console.log(`  ‚ùå ${file}: —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—É—Ç—å "${importPath}"`);
            hasIssues = true;
          }

          if (!checkForbiddenPatterns(importPath)) {
            console.log(`  ‚ùå ${file}: –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω "${importPath}"`);
            hasIssues = true;
          }
        }
      });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–ø–æ—Ä—Ç–æ–≤
  console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–ø–æ—Ä—Ç–æ–≤:');
  const duplicates = findDuplicateImports(tsFiles);
  if (duplicates.length > 0) {
    duplicates.forEach(({ importPath, files }) => {
      console.log(`  ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ "${importPath}":`);
      files.forEach(file => console.log(`    - ${file}`));
      hasIssues = true;
    });
  } else {
    console.log('  ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –∏–º–ø–æ—Ä—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ barrel-—ç–∫—Å–ø–æ—Ä—Ç–æ–≤
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ barrel-—ç–∫—Å–ø–æ—Ä—Ç–æ–≤:');
  const barrelIssues = checkBarrelExports();
  if (barrelIssues.length > 0) {
    barrelIssues.forEach(issue => {
      console.log(`  ‚ùå ${issue}`);
      hasIssues = true;
    });
  } else {
    console.log('  ‚úÖ –í—Å–µ barrel-—ç–∫—Å–ø–æ—Ä—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('\n' + '='.repeat(50));
  if (hasIssues) {
    console.log('‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏!');
    process.exit(1);
  } else {
    console.log('‚úÖ –í—Å–µ –∏–º–ø–æ—Ä—Ç—ã –≤ –ø–æ—Ä—è–¥–∫–µ!');
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main();
}

module.exports = { main, checkRelativePathDepth, checkForbiddenPatterns, findDuplicateImports };
