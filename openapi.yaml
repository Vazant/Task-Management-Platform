openapi: 3.0.0
info:
  title: Task Management Platform API
  version: 1.0.0
  description: Comprehensive API for task and project management
  contact:
    name: Development Team
    email: dev@taskboard.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://api.taskboard.com/api
    description: Production server

security:
  - BearerAuth: []

paths:
  # Authentication endpoints
  /auth/login:
    post:
      summary: User login
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/register:
    post:
      summary: User registration
      tags: [Authentication]
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Task Management endpoints
  /tasks:
    get:
      summary: Get all tasks
      tags: [Tasks]
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [TODO, IN_PROGRESS, IN_REVIEW, DONE, CANCELLED]
        - name: assignee
          in: query
          schema:
            type: string
        - name: project
          in: query
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create new task
      tags: [Tasks]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}:
    get:
      summary: Get task by ID
      tags: [Tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update task
      tags: [Tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete task
      tags: [Tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}/assign:
    put:
      summary: Assign task to user
      tags: [Tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignTaskRequest'
      responses:
        '200':
          description: Task assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'

  /tasks/{id}/status:
    put:
      summary: Change task status
      tags: [Tasks]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeStatusRequest'
      responses:
        '200':
          description: Status changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskDto'

  /tasks/search:
    get:
      summary: Search tasks
      tags: [Tasks]
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskListResponse'

  # Time Tracking endpoints
  /time-entries:
    get:
      summary: Get time entries
      tags: [Time Tracking]
      parameters:
        - name: userId
          in: query
          schema:
            type: string
        - name: taskId
          in: query
          schema:
            type: string
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of time entries
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryListResponse'

    post:
      summary: Create time entry
      tags: [Time Tracking]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTimeEntryRequest'
      responses:
        '201':
          description: Time entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryDto'

  /time-entries/{id}:
    get:
      summary: Get time entry by ID
      tags: [Time Tracking]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Time entry details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryDto'

    put:
      summary: Update time entry
      tags: [Time Tracking]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTimeEntryRequest'
      responses:
        '200':
          description: Time entry updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryDto'

    delete:
      summary: Delete time entry
      tags: [Time Tracking]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Time entry deleted successfully

  /timer/start:
    post:
      summary: Start timer
      tags: [Time Tracking]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartTimerRequest'
      responses:
        '200':
          description: Timer started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimerDto'

  /timer/stop:
    post:
      summary: Stop timer
      tags: [Time Tracking]
      responses:
        '200':
          description: Timer stopped successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeEntryDto'

  /timer/status:
    get:
      summary: Get timer status
      tags: [Time Tracking]
      responses:
        '200':
          description: Current timer status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimerDto'

  # Analytics endpoints
  /analytics/dashboard:
    get:
      summary: Get dashboard analytics
      tags: [Analytics]
      responses:
        '200':
          description: Dashboard analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAnalytics'

  /analytics/projects:
    get:
      summary: Get project analytics
      tags: [Analytics]
      responses:
        '200':
          description: Project analytics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectAnalytics'

  /analytics/tasks:
    get:
      summary: Get task analytics
      tags: [Analytics]
      responses:
        '200':
          description: Task analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskAnalytics'

  /analytics/time:
    get:
      summary: Get time tracking analytics
      tags: [Analytics]
      responses:
        '200':
          description: Time tracking analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimeAnalytics'

  /analytics/team:
    get:
      summary: Get team performance analytics
      tags: [Analytics]
      responses:
        '200':
          description: Team performance analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamPerformance'

  # Search endpoints
  /search:
    get:
      summary: Global search
      tags: [Search]
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: types
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [task, project, user, comment]
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResponse'

  # Notification endpoints
  /notifications:
    get:
      summary: Get user notifications
      tags: [Notifications]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListResponse'

  /notifications/{id}/read:
    put:
      summary: Mark notification as read
      tags: [Notifications]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDto'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - username
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        username:
          type: string
          minLength: 3
          maxLength: 50
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50

    LoginResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserDto'
        token:
          type: string
        refreshToken:
          type: string

    # Task schemas
    TaskDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 200
        description:
          type: string
        status:
          type: string
          enum: [TODO, IN_PROGRESS, IN_REVIEW, DONE, CANCELLED]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
        projectId:
          type: string
          format: uuid
        assigneeId:
          type: string
          format: uuid
        creatorId:
          type: string
          format: uuid
        labels:
          type: array
          items:
            type: string
        timeSpent:
          type: integer
          description: "Time spent in minutes"
        estimatedHours:
          type: number
          format: decimal
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTaskRequest:
      type: object
      required:
        - title
        - projectId
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        projectId:
          type: string
          format: uuid
        assigneeId:
          type: string
          format: uuid
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
          default: MEDIUM
        estimatedHours:
          type: number
          format: decimal
          minimum: 0
        dueDate:
          type: string
          format: date-time
        labels:
          type: array
          items:
            type: string

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        assigneeId:
          type: string
          format: uuid
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
        estimatedHours:
          type: number
          format: decimal
        dueDate:
          type: string
          format: date-time
        labels:
          type: array
          items:
            type: string

    AssignTaskRequest:
      type: object
      required:
        - assigneeId
      properties:
        assigneeId:
          type: string
          format: uuid

    ChangeStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum: [TODO, IN_PROGRESS, IN_REVIEW, DONE, CANCELLED]

    TaskListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TaskDto'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    # Time Tracking schemas
    TimeEntryDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        duration:
          type: integer
          description: "Duration in minutes"
        description:
          type: string
        billable:
          type: boolean
          default: false
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateTimeEntryRequest:
      type: object
      required:
        - taskId
        - startTime
        - endTime
      properties:
        taskId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        description:
          type: string
        billable:
          type: boolean
          default: false

    UpdateTimeEntryRequest:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        description:
          type: string
        billable:
          type: boolean

    StartTimerRequest:
      type: object
      required:
        - taskId
      properties:
        taskId:
          type: string
          format: uuid
        description:
          type: string

    TimerDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        taskId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        isRunning:
          type: boolean

    TimeEntryListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/TimeEntryDto'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    # Analytics schemas
    DashboardAnalytics:
      type: object
      properties:
        totalProjects:
          type: integer
        activeProjects:
          type: integer
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        overdueTasks:
          type: integer
        averageCompletionTime:
          type: number
        teamProductivity:
          type: number
        recentActivity:
          type: array
          items:
            $ref: '#/components/schemas/ActivityItem'
        projectProgress:
          type: array
          items:
            $ref: '#/components/schemas/ProjectProgress'

    ProjectAnalytics:
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        projectName:
          type: string
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        progress:
          type: number
        totalTimeSpent:
          type: integer
        estimatedTime:
          type: integer
        teamMembers:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'

    TaskAnalytics:
      type: object
      properties:
        totalTasks:
          type: integer
        completedTasks:
          type: integer
        overdueTasks:
          type: integer
        averageCompletionTime:
          type: number
        tasksByStatus:
          type: object
          additionalProperties:
            type: integer
        tasksByPriority:
          type: object
          additionalProperties:
            type: integer

    TimeAnalytics:
      type: object
      properties:
        totalTimeSpent:
          type: integer
        billableTime:
          type: integer
        averageSessionDuration:
          type: number
        mostProductiveHours:
          type: array
          items:
            type: integer
        timeByProject:
          type: object
          additionalProperties:
            type: integer

    TeamPerformance:
      type: object
      properties:
        teamMembers:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'
        averageProductivity:
          type: number
        topPerformers:
          type: array
          items:
            $ref: '#/components/schemas/TeamMember'

    ActivityItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [task_created, task_updated, task_completed, time_logged, comment_added]
        title:
          type: string
        description:
          type: string
        userId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time

    ProjectProgress:
      type: object
      properties:
        projectId:
          type: string
          format: uuid
        projectName:
          type: string
        progress:
          type: number
        completedTasks:
          type: integer
        totalTasks:
          type: integer

    TeamMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
        productivity:
          type: number
        tasksCompleted:
          type: integer
        timeSpent:
          type: integer

    # Search schemas
    SearchResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/SearchResult'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    SearchResult:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [task, project, user, comment]
        title:
          type: string
        description:
          type: string
        projectName:
          type: string
        assigneeName:
          type: string
        createdAt:
          type: string
          format: date-time
        relevanceScore:
          type: number

    # Notification schemas
    NotificationDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        title:
          type: string
        message:
          type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time

    NotificationListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDto'
        page:
          type: integer
        size:
          type: integer
        totalElements:
          type: integer
        totalPages:
          type: integer

    # User schemas
    UserDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        avatar:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]
        createdAt:
          type: string
          format: date-time
        lastLogin:
          type: string
          format: date-time

    # Error schemas
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
        path:
          type: string
        status:
          type: integer

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Tasks
    description: Task management operations
  - name: Time Tracking
    description: Time tracking and timer functionality
  - name: Analytics
    description: Analytics and reporting
  - name: Search
    description: Global search functionality
  - name: Notifications
    description: Notification management




